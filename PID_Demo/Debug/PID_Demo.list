
PID_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008620  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080088b8  080088b8  000188b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080088f0  080088f0  000188f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080088f8  080088f8  000188f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080088fc  080088fc  000188fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08008900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000210  24000010  08008910  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000220  08008910  00020220  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00015ca6  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002540  00000000  00000000  00035d27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001088  00000000  00000000  00038268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000d02  00000000  00000000  000392f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00036ae8  00000000  00000000  00039ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00016d35  00000000  00000000  00070ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016231b  00000000  00000000  0008780f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000046c0  00000000  00000000  001e9b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  001ee1ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080088a0 	.word	0x080088a0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080088a0 	.word	0x080088a0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005d8:	f000 fa68 	bl	8000aac <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 fcca 	bl	8000f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f81e 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 f9c2 	bl	800096c <MX_GPIO_Init>
  MX_UART4_Init();
 80005e8:	f000 f928 	bl	800083c <MX_UART4_Init>
  MX_USART3_UART_Init();
 80005ec:	f000 f972 	bl	80008d4 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80005f0:	f000 f894 	bl	800071c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005f4:	2100      	movs	r1, #0
 80005f6:	4807      	ldr	r0, [pc, #28]	; (8000614 <main+0x40>)
 80005f8:	f004 fcf2 	bl	8004fe0 <HAL_TIM_PWM_Start>

  user_pwm_setvalue(8);
 80005fc:	2008      	movs	r0, #8
 80005fe:	f000 fa17 	bl	8000a30 <user_pwm_setvalue>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive_IT(&huart3, RxBuffer, RX_BUFFER_SIZE);
 8000602:	2209      	movs	r2, #9
 8000604:	4904      	ldr	r1, [pc, #16]	; (8000618 <main+0x44>)
 8000606:	4805      	ldr	r0, [pc, #20]	; (800061c <main+0x48>)
 8000608:	f005 fd22 	bl	8006050 <HAL_UART_Receive_IT>
	  HAL_Delay(100);
 800060c:	2064      	movs	r0, #100	; 0x64
 800060e:	f000 fd43 	bl	8001098 <HAL_Delay>
	  HAL_UART_Receive_IT(&huart3, RxBuffer, RX_BUFFER_SIZE);
 8000612:	e7f6      	b.n	8000602 <main+0x2e>
 8000614:	2400002c 	.word	0x2400002c
 8000618:	24000210 	.word	0x24000210
 800061c:	24000144 	.word	0x24000144

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b09c      	sub	sp, #112	; 0x70
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800062a:	224c      	movs	r2, #76	; 0x4c
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f008 f90a 	bl	8008848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2220      	movs	r2, #32
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f008 f904 	bl	8008848 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000640:	2002      	movs	r0, #2
 8000642:	f001 fe29 	bl	8002298 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000646:	2300      	movs	r3, #0
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	4b32      	ldr	r3, [pc, #200]	; (8000714 <SystemClock_Config+0xf4>)
 800064c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800064e:	4a31      	ldr	r2, [pc, #196]	; (8000714 <SystemClock_Config+0xf4>)
 8000650:	f023 0301 	bic.w	r3, r3, #1
 8000654:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000656:	4b2f      	ldr	r3, [pc, #188]	; (8000714 <SystemClock_Config+0xf4>)
 8000658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	4b2d      	ldr	r3, [pc, #180]	; (8000718 <SystemClock_Config+0xf8>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000668:	4a2b      	ldr	r2, [pc, #172]	; (8000718 <SystemClock_Config+0xf8>)
 800066a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066e:	6193      	str	r3, [r2, #24]
 8000670:	4b29      	ldr	r3, [pc, #164]	; (8000718 <SystemClock_Config+0xf8>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000678:	603b      	str	r3, [r7, #0]
 800067a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800067c:	bf00      	nop
 800067e:	4b26      	ldr	r3, [pc, #152]	; (8000718 <SystemClock_Config+0xf8>)
 8000680:	699b      	ldr	r3, [r3, #24]
 8000682:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800068a:	d1f8      	bne.n	800067e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800068c:	2302      	movs	r3, #2
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000690:	2301      	movs	r3, #1
 8000692:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000694:	2340      	movs	r3, #64	; 0x40
 8000696:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000698:	2302      	movs	r3, #2
 800069a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800069c:	2300      	movs	r3, #0
 800069e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a0:	2304      	movs	r3, #4
 80006a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80006a4:	230c      	movs	r3, #12
 80006a6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006b4:	230c      	movs	r3, #12
 80006b6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 80006bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fe20 	bl	800230c <HAL_RCC_OscConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006d2:	f000 fa17 	bl	8000b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	233f      	movs	r3, #63	; 0x3f
 80006d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006da:	2303      	movs	r3, #3
 80006dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006ea:	2340      	movs	r3, #64	; 0x40
 80006ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	2102      	movs	r1, #2
 80006fa:	4618      	mov	r0, r3
 80006fc:	f002 fa60 	bl	8002bc0 <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000706:	f000 f9fd 	bl	8000b04 <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	3770      	adds	r7, #112	; 0x70
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	58000400 	.word	0x58000400
 8000718:	58024800 	.word	0x58024800

0800071c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b096      	sub	sp, #88	; 0x58
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000722:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800072e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]
 800073e:	615a      	str	r2, [r3, #20]
 8000740:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	222c      	movs	r2, #44	; 0x2c
 8000746:	2100      	movs	r1, #0
 8000748:	4618      	mov	r0, r3
 800074a:	f008 f87d 	bl	8008848 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800074e:	4b39      	ldr	r3, [pc, #228]	; (8000834 <MX_TIM1_Init+0x118>)
 8000750:	4a39      	ldr	r2, [pc, #228]	; (8000838 <MX_TIM1_Init+0x11c>)
 8000752:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 8000754:	4b37      	ldr	r3, [pc, #220]	; (8000834 <MX_TIM1_Init+0x118>)
 8000756:	2263      	movs	r2, #99	; 0x63
 8000758:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075a:	4b36      	ldr	r3, [pc, #216]	; (8000834 <MX_TIM1_Init+0x118>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000760:	4b34      	ldr	r3, [pc, #208]	; (8000834 <MX_TIM1_Init+0x118>)
 8000762:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000766:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000768:	4b32      	ldr	r3, [pc, #200]	; (8000834 <MX_TIM1_Init+0x118>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800076e:	4b31      	ldr	r3, [pc, #196]	; (8000834 <MX_TIM1_Init+0x118>)
 8000770:	2200      	movs	r2, #0
 8000772:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000774:	4b2f      	ldr	r3, [pc, #188]	; (8000834 <MX_TIM1_Init+0x118>)
 8000776:	2280      	movs	r2, #128	; 0x80
 8000778:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800077a:	482e      	ldr	r0, [pc, #184]	; (8000834 <MX_TIM1_Init+0x118>)
 800077c:	f004 fbd8 	bl	8004f30 <HAL_TIM_OC_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000786:	f000 f9bd 	bl	8000b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078a:	2300      	movs	r3, #0
 800078c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800078e:	2300      	movs	r3, #0
 8000790:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000792:	2300      	movs	r3, #0
 8000794:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000796:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800079a:	4619      	mov	r1, r3
 800079c:	4825      	ldr	r0, [pc, #148]	; (8000834 <MX_TIM1_Init+0x118>)
 800079e:	f005 fa5d 	bl	8005c5c <HAL_TIMEx_MasterConfigSynchronization>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80007a8:	f000 f9ac 	bl	8000b04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80007ac:	2300      	movs	r3, #0
 80007ae:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007b4:	2300      	movs	r3, #0
 80007b6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007b8:	2300      	movs	r3, #0
 80007ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007bc:	2300      	movs	r3, #0
 80007be:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007c0:	2300      	movs	r3, #0
 80007c2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007c4:	2300      	movs	r3, #0
 80007c6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007cc:	2200      	movs	r2, #0
 80007ce:	4619      	mov	r1, r3
 80007d0:	4818      	ldr	r0, [pc, #96]	; (8000834 <MX_TIM1_Init+0x118>)
 80007d2:	f004 fd13 	bl	80051fc <HAL_TIM_OC_ConfigChannel>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80007dc:	f000 f992 	bl	8000b04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007fe:	2300      	movs	r3, #0
 8000800:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000802:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800080c:	2300      	movs	r3, #0
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	4619      	mov	r1, r3
 8000814:	4807      	ldr	r0, [pc, #28]	; (8000834 <MX_TIM1_Init+0x118>)
 8000816:	f005 faaf 	bl	8005d78 <HAL_TIMEx_ConfigBreakDeadTime>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000820:	f000 f970 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000824:	4803      	ldr	r0, [pc, #12]	; (8000834 <MX_TIM1_Init+0x118>)
 8000826:	f000 f9af 	bl	8000b88 <HAL_TIM_MspPostInit>

}
 800082a:	bf00      	nop
 800082c:	3758      	adds	r7, #88	; 0x58
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	2400002c 	.word	0x2400002c
 8000838:	40010000 	.word	0x40010000

0800083c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000840:	4b22      	ldr	r3, [pc, #136]	; (80008cc <MX_UART4_Init+0x90>)
 8000842:	4a23      	ldr	r2, [pc, #140]	; (80008d0 <MX_UART4_Init+0x94>)
 8000844:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000846:	4b21      	ldr	r3, [pc, #132]	; (80008cc <MX_UART4_Init+0x90>)
 8000848:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800084c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800084e:	4b1f      	ldr	r3, [pc, #124]	; (80008cc <MX_UART4_Init+0x90>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000854:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <MX_UART4_Init+0x90>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800085a:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <MX_UART4_Init+0x90>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000860:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <MX_UART4_Init+0x90>)
 8000862:	220c      	movs	r2, #12
 8000864:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000866:	4b19      	ldr	r3, [pc, #100]	; (80008cc <MX_UART4_Init+0x90>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800086c:	4b17      	ldr	r3, [pc, #92]	; (80008cc <MX_UART4_Init+0x90>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000872:	4b16      	ldr	r3, [pc, #88]	; (80008cc <MX_UART4_Init+0x90>)
 8000874:	2200      	movs	r2, #0
 8000876:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000878:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_UART4_Init+0x90>)
 800087a:	2200      	movs	r2, #0
 800087c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800087e:	4b13      	ldr	r3, [pc, #76]	; (80008cc <MX_UART4_Init+0x90>)
 8000880:	2200      	movs	r2, #0
 8000882:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000884:	4811      	ldr	r0, [pc, #68]	; (80008cc <MX_UART4_Init+0x90>)
 8000886:	f005 faf5 	bl	8005e74 <HAL_UART_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000890:	f000 f938 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000894:	2100      	movs	r1, #0
 8000896:	480d      	ldr	r0, [pc, #52]	; (80008cc <MX_UART4_Init+0x90>)
 8000898:	f007 ff0b 	bl	80086b2 <HAL_UARTEx_SetTxFifoThreshold>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80008a2:	f000 f92f 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a6:	2100      	movs	r1, #0
 80008a8:	4808      	ldr	r0, [pc, #32]	; (80008cc <MX_UART4_Init+0x90>)
 80008aa:	f007 ff40 	bl	800872e <HAL_UARTEx_SetRxFifoThreshold>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80008b4:	f000 f926 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80008b8:	4804      	ldr	r0, [pc, #16]	; (80008cc <MX_UART4_Init+0x90>)
 80008ba:	f007 fec1 	bl	8008640 <HAL_UARTEx_DisableFifoMode>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80008c4:	f000 f91e 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	24000078 	.word	0x24000078
 80008d0:	40004c00 	.word	0x40004c00

080008d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008d8:	4b22      	ldr	r3, [pc, #136]	; (8000964 <MX_USART3_UART_Init+0x90>)
 80008da:	4a23      	ldr	r2, [pc, #140]	; (8000968 <MX_USART3_UART_Init+0x94>)
 80008dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008de:	4b21      	ldr	r3, [pc, #132]	; (8000964 <MX_USART3_UART_Init+0x90>)
 80008e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008e6:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <MX_USART3_UART_Init+0x90>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008ec:	4b1d      	ldr	r3, [pc, #116]	; (8000964 <MX_USART3_UART_Init+0x90>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008f2:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <MX_USART3_UART_Init+0x90>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008f8:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <MX_USART3_UART_Init+0x90>)
 80008fa:	220c      	movs	r2, #12
 80008fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fe:	4b19      	ldr	r3, [pc, #100]	; (8000964 <MX_USART3_UART_Init+0x90>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000904:	4b17      	ldr	r3, [pc, #92]	; (8000964 <MX_USART3_UART_Init+0x90>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800090a:	4b16      	ldr	r3, [pc, #88]	; (8000964 <MX_USART3_UART_Init+0x90>)
 800090c:	2200      	movs	r2, #0
 800090e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000910:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_USART3_UART_Init+0x90>)
 8000912:	2200      	movs	r2, #0
 8000914:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000916:	4b13      	ldr	r3, [pc, #76]	; (8000964 <MX_USART3_UART_Init+0x90>)
 8000918:	2200      	movs	r2, #0
 800091a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800091c:	4811      	ldr	r0, [pc, #68]	; (8000964 <MX_USART3_UART_Init+0x90>)
 800091e:	f005 faa9 	bl	8005e74 <HAL_UART_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000928:	f000 f8ec 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800092c:	2100      	movs	r1, #0
 800092e:	480d      	ldr	r0, [pc, #52]	; (8000964 <MX_USART3_UART_Init+0x90>)
 8000930:	f007 febf 	bl	80086b2 <HAL_UARTEx_SetTxFifoThreshold>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800093a:	f000 f8e3 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800093e:	2100      	movs	r1, #0
 8000940:	4808      	ldr	r0, [pc, #32]	; (8000964 <MX_USART3_UART_Init+0x90>)
 8000942:	f007 fef4 	bl	800872e <HAL_UARTEx_SetRxFifoThreshold>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800094c:	f000 f8da 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <MX_USART3_UART_Init+0x90>)
 8000952:	f007 fe75 	bl	8008640 <HAL_UARTEx_DisableFifoMode>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800095c:	f000 f8d2 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	24000144 	.word	0x24000144
 8000968:	40004800 	.word	0x40004800

0800096c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	; 0x28
 8000970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
 8000980:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	4b29      	ldr	r3, [pc, #164]	; (8000a28 <MX_GPIO_Init+0xbc>)
 8000984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000988:	4a27      	ldr	r2, [pc, #156]	; (8000a28 <MX_GPIO_Init+0xbc>)
 800098a:	f043 0301 	orr.w	r3, r3, #1
 800098e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000992:	4b25      	ldr	r3, [pc, #148]	; (8000a28 <MX_GPIO_Init+0xbc>)
 8000994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000998:	f003 0301 	and.w	r3, r3, #1
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a0:	4b21      	ldr	r3, [pc, #132]	; (8000a28 <MX_GPIO_Init+0xbc>)
 80009a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a6:	4a20      	ldr	r2, [pc, #128]	; (8000a28 <MX_GPIO_Init+0xbc>)
 80009a8:	f043 0302 	orr.w	r3, r3, #2
 80009ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009b0:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <MX_GPIO_Init+0xbc>)
 80009b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009be:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <MX_GPIO_Init+0xbc>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c4:	4a18      	ldr	r2, [pc, #96]	; (8000a28 <MX_GPIO_Init+0xbc>)
 80009c6:	f043 0310 	orr.w	r3, r3, #16
 80009ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ce:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <MX_GPIO_Init+0xbc>)
 80009d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d4:	f003 0310 	and.w	r3, r3, #16
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <MX_GPIO_Init+0xbc>)
 80009de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e2:	4a11      	ldr	r2, [pc, #68]	; (8000a28 <MX_GPIO_Init+0xbc>)
 80009e4:	f043 0308 	orr.w	r3, r3, #8
 80009e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ec:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <MX_GPIO_Init+0xbc>)
 80009ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f2:	f003 0308 	and.w	r3, r3, #8
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2101      	movs	r1, #1
 80009fe:	480b      	ldr	r0, [pc, #44]	; (8000a2c <MX_GPIO_Init+0xc0>)
 8000a00:	f001 fc16 	bl	8002230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a04:	2301      	movs	r3, #1
 8000a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4804      	ldr	r0, [pc, #16]	; (8000a2c <MX_GPIO_Init+0xc0>)
 8000a1c:	f001 fa58 	bl	8001ed0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a20:	bf00      	nop
 8000a22:	3728      	adds	r7, #40	; 0x28
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	58024400 	.word	0x58024400
 8000a2c:	58020400 	.word	0x58020400

08000a30 <user_pwm_setvalue>:

/* USER CODE BEGIN 4 */

void user_pwm_setvalue(uint16_t value)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	; 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	80fb      	strh	r3, [r7, #6]
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a3a:	2360      	movs	r3, #96	; 0x60
 8000a3c:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = value;
 8000a3e:	88fb      	ldrh	r3, [r7, #6]
 8000a40:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
    HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 8000a4a:	f107 030c 	add.w	r3, r7, #12
 8000a4e:	2200      	movs	r2, #0
 8000a50:	4619      	mov	r1, r3
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <user_pwm_setvalue+0x38>)
 8000a54:	f004 fc4c 	bl	80052f0 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4803      	ldr	r0, [pc, #12]	; (8000a68 <user_pwm_setvalue+0x38>)
 8000a5c:	f004 fac0 	bl	8004fe0 <HAL_TIM_PWM_Start>
}
 8000a60:	bf00      	nop
 8000a62:	3728      	adds	r7, #40	; 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	2400002c 	.word	0x2400002c

08000a6c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_0);
 8000a74:	2101      	movs	r1, #1
 8000a76:	4809      	ldr	r0, [pc, #36]	; (8000a9c <HAL_UART_RxCpltCallback+0x30>)
 8000a78:	f001 fbf3 	bl	8002262 <HAL_GPIO_TogglePin>
	HAL_UART_Transmit(&huart4, RxBuffer, RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8000a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a80:	2209      	movs	r2, #9
 8000a82:	4907      	ldr	r1, [pc, #28]	; (8000aa0 <HAL_UART_RxCpltCallback+0x34>)
 8000a84:	4807      	ldr	r0, [pc, #28]	; (8000aa4 <HAL_UART_RxCpltCallback+0x38>)
 8000a86:	f005 fa55 	bl	8005f34 <HAL_UART_Transmit>
    HAL_UART_Receive_IT(&huart3, RxBuffer, RX_BUFFER_SIZE);
 8000a8a:	2209      	movs	r2, #9
 8000a8c:	4904      	ldr	r1, [pc, #16]	; (8000aa0 <HAL_UART_RxCpltCallback+0x34>)
 8000a8e:	4806      	ldr	r0, [pc, #24]	; (8000aa8 <HAL_UART_RxCpltCallback+0x3c>)
 8000a90:	f005 fade 	bl	8006050 <HAL_UART_Receive_IT>
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	58020400 	.word	0x58020400
 8000aa0:	24000210 	.word	0x24000210
 8000aa4:	24000078 	.word	0x24000078
 8000aa8:	24000144 	.word	0x24000144

08000aac <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000abe:	f000 fc2b 	bl	8001318 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000ace:	231f      	movs	r3, #31
 8000ad0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000ad2:	2387      	movs	r3, #135	; 0x87
 8000ad4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ada:	2300      	movs	r3, #0
 8000adc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000aea:	2300      	movs	r3, #0
 8000aec:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000aee:	463b      	mov	r3, r7
 8000af0:	4618      	mov	r0, r3
 8000af2:	f000 fc49 	bl	8001388 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000af6:	2004      	movs	r0, #4
 8000af8:	f000 fc26 	bl	8001348 <HAL_MPU_Enable>

}
 8000afc:	bf00      	nop
 8000afe:	3710      	adds	r7, #16
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b08:	b672      	cpsid	i
}
 8000b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <Error_Handler+0x8>
	...

08000b10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <HAL_MspInit+0x30>)
 8000b18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b1c:	4a08      	ldr	r2, [pc, #32]	; (8000b40 <HAL_MspInit+0x30>)
 8000b1e:	f043 0302 	orr.w	r3, r3, #2
 8000b22:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_MspInit+0x30>)
 8000b28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b2c:	f003 0302 	and.w	r3, r3, #2
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	58024400 	.word	0x58024400

08000b44 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a0b      	ldr	r2, [pc, #44]	; (8000b80 <HAL_TIM_OC_MspInit+0x3c>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d10e      	bne.n	8000b74 <HAL_TIM_OC_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <HAL_TIM_OC_MspInit+0x40>)
 8000b58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000b5c:	4a09      	ldr	r2, [pc, #36]	; (8000b84 <HAL_TIM_OC_MspInit+0x40>)
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000b66:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <HAL_TIM_OC_MspInit+0x40>)
 8000b68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000b6c:	f003 0301 	and.w	r3, r3, #1
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b74:	bf00      	nop
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	40010000 	.word	0x40010000
 8000b84:	58024400 	.word	0x58024400

08000b88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b088      	sub	sp, #32
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 030c 	add.w	r3, r7, #12
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a13      	ldr	r2, [pc, #76]	; (8000bf4 <HAL_TIM_MspPostInit+0x6c>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d11f      	bne.n	8000bea <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000baa:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <HAL_TIM_MspPostInit+0x70>)
 8000bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb0:	4a11      	ldr	r2, [pc, #68]	; (8000bf8 <HAL_TIM_MspPostInit+0x70>)
 8000bb2:	f043 0310 	orr.w	r3, r3, #16
 8000bb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bba:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <HAL_TIM_MspPostInit+0x70>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc0:	f003 0310 	and.w	r3, r3, #16
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bcc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bde:	f107 030c 	add.w	r3, r7, #12
 8000be2:	4619      	mov	r1, r3
 8000be4:	4805      	ldr	r0, [pc, #20]	; (8000bfc <HAL_TIM_MspPostInit+0x74>)
 8000be6:	f001 f973 	bl	8001ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000bea:	bf00      	nop
 8000bec:	3720      	adds	r7, #32
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40010000 	.word	0x40010000
 8000bf8:	58024400 	.word	0x58024400
 8000bfc:	58021000 	.word	0x58021000

08000c00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b0bc      	sub	sp, #240	; 0xf0
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c18:	f107 0318 	add.w	r3, r7, #24
 8000c1c:	22c0      	movs	r2, #192	; 0xc0
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f007 fe11 	bl	8008848 <memset>
  if(huart->Instance==UART4)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a55      	ldr	r2, [pc, #340]	; (8000d80 <HAL_UART_MspInit+0x180>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d14e      	bne.n	8000cce <HAL_UART_MspInit+0xce>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000c30:	f04f 0202 	mov.w	r2, #2
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c42:	f107 0318 	add.w	r3, r7, #24
 8000c46:	4618      	mov	r0, r3
 8000c48:	f002 fb46 	bl	80032d8 <HAL_RCCEx_PeriphCLKConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000c52:	f7ff ff57 	bl	8000b04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000c56:	4b4b      	ldr	r3, [pc, #300]	; (8000d84 <HAL_UART_MspInit+0x184>)
 8000c58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c5c:	4a49      	ldr	r2, [pc, #292]	; (8000d84 <HAL_UART_MspInit+0x184>)
 8000c5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c62:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c66:	4b47      	ldr	r3, [pc, #284]	; (8000d84 <HAL_UART_MspInit+0x184>)
 8000c68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c70:	617b      	str	r3, [r7, #20]
 8000c72:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c74:	4b43      	ldr	r3, [pc, #268]	; (8000d84 <HAL_UART_MspInit+0x184>)
 8000c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7a:	4a42      	ldr	r2, [pc, #264]	; (8000d84 <HAL_UART_MspInit+0x184>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c84:	4b3f      	ldr	r3, [pc, #252]	; (8000d84 <HAL_UART_MspInit+0x184>)
 8000c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c92:	2303      	movs	r3, #3
 8000c94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000caa:	2308      	movs	r3, #8
 8000cac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4834      	ldr	r0, [pc, #208]	; (8000d88 <HAL_UART_MspInit+0x188>)
 8000cb8:	f001 f90a 	bl	8001ed0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	2034      	movs	r0, #52	; 0x34
 8000cc2:	f000 faf4 	bl	80012ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000cc6:	2034      	movs	r0, #52	; 0x34
 8000cc8:	f000 fb0b 	bl	80012e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ccc:	e053      	b.n	8000d76 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART3)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a2e      	ldr	r2, [pc, #184]	; (8000d8c <HAL_UART_MspInit+0x18c>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d14e      	bne.n	8000d76 <HAL_UART_MspInit+0x176>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cd8:	f04f 0202 	mov.w	r2, #2
 8000cdc:	f04f 0300 	mov.w	r3, #0
 8000ce0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cea:	f107 0318 	add.w	r3, r7, #24
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f002 faf2 	bl	80032d8 <HAL_RCCEx_PeriphCLKConfig>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_UART_MspInit+0xfe>
      Error_Handler();
 8000cfa:	f7ff ff03 	bl	8000b04 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cfe:	4b21      	ldr	r3, [pc, #132]	; (8000d84 <HAL_UART_MspInit+0x184>)
 8000d00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d04:	4a1f      	ldr	r2, [pc, #124]	; (8000d84 <HAL_UART_MspInit+0x184>)
 8000d06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d0a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d0e:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <HAL_UART_MspInit+0x184>)
 8000d10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1c:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <HAL_UART_MspInit+0x184>)
 8000d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d22:	4a18      	ldr	r2, [pc, #96]	; (8000d84 <HAL_UART_MspInit+0x184>)
 8000d24:	f043 0308 	orr.w	r3, r3, #8
 8000d28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d2c:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <HAL_UART_MspInit+0x184>)
 8000d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d32:	f003 0308 	and.w	r3, r3, #8
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d54:	2307      	movs	r3, #7
 8000d56:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d5a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000d5e:	4619      	mov	r1, r3
 8000d60:	480b      	ldr	r0, [pc, #44]	; (8000d90 <HAL_UART_MspInit+0x190>)
 8000d62:	f001 f8b5 	bl	8001ed0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2100      	movs	r1, #0
 8000d6a:	2027      	movs	r0, #39	; 0x27
 8000d6c:	f000 fa9f 	bl	80012ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d70:	2027      	movs	r0, #39	; 0x27
 8000d72:	f000 fab6 	bl	80012e2 <HAL_NVIC_EnableIRQ>
}
 8000d76:	bf00      	nop
 8000d78:	37f0      	adds	r7, #240	; 0xf0
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40004c00 	.word	0x40004c00
 8000d84:	58024400 	.word	0x58024400
 8000d88:	58020000 	.word	0x58020000
 8000d8c:	40004800 	.word	0x40004800
 8000d90:	58020c00 	.word	0x58020c00

08000d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d98:	e7fe      	b.n	8000d98 <NMI_Handler+0x4>

08000d9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <HardFault_Handler+0x4>

08000da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <MemManage_Handler+0x4>

08000da6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <BusFault_Handler+0x4>

08000dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <UsageFault_Handler+0x4>

08000db2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de0:	f000 f93a 	bl	8001058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000dec:	4802      	ldr	r0, [pc, #8]	; (8000df8 <USART3_IRQHandler+0x10>)
 8000dee:	f005 f97b 	bl	80060e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	24000144 	.word	0x24000144

08000dfc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <UART4_IRQHandler+0x10>)
 8000e02:	f005 f971 	bl	80060e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	24000078 	.word	0x24000078

08000e10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e14:	4b37      	ldr	r3, [pc, #220]	; (8000ef4 <SystemInit+0xe4>)
 8000e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e1a:	4a36      	ldr	r2, [pc, #216]	; (8000ef4 <SystemInit+0xe4>)
 8000e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e24:	4b34      	ldr	r3, [pc, #208]	; (8000ef8 <SystemInit+0xe8>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f003 030f 	and.w	r3, r3, #15
 8000e2c:	2b06      	cmp	r3, #6
 8000e2e:	d807      	bhi.n	8000e40 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e30:	4b31      	ldr	r3, [pc, #196]	; (8000ef8 <SystemInit+0xe8>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f023 030f 	bic.w	r3, r3, #15
 8000e38:	4a2f      	ldr	r2, [pc, #188]	; (8000ef8 <SystemInit+0xe8>)
 8000e3a:	f043 0307 	orr.w	r3, r3, #7
 8000e3e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e40:	4b2e      	ldr	r3, [pc, #184]	; (8000efc <SystemInit+0xec>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a2d      	ldr	r2, [pc, #180]	; (8000efc <SystemInit+0xec>)
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e4c:	4b2b      	ldr	r3, [pc, #172]	; (8000efc <SystemInit+0xec>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e52:	4b2a      	ldr	r3, [pc, #168]	; (8000efc <SystemInit+0xec>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	4929      	ldr	r1, [pc, #164]	; (8000efc <SystemInit+0xec>)
 8000e58:	4b29      	ldr	r3, [pc, #164]	; (8000f00 <SystemInit+0xf0>)
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e5e:	4b26      	ldr	r3, [pc, #152]	; (8000ef8 <SystemInit+0xe8>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0308 	and.w	r3, r3, #8
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d007      	beq.n	8000e7a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e6a:	4b23      	ldr	r3, [pc, #140]	; (8000ef8 <SystemInit+0xe8>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f023 030f 	bic.w	r3, r3, #15
 8000e72:	4a21      	ldr	r2, [pc, #132]	; (8000ef8 <SystemInit+0xe8>)
 8000e74:	f043 0307 	orr.w	r3, r3, #7
 8000e78:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e7a:	4b20      	ldr	r3, [pc, #128]	; (8000efc <SystemInit+0xec>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e80:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <SystemInit+0xec>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e86:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <SystemInit+0xec>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e8c:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <SystemInit+0xec>)
 8000e8e:	4a1d      	ldr	r2, [pc, #116]	; (8000f04 <SystemInit+0xf4>)
 8000e90:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e92:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <SystemInit+0xec>)
 8000e94:	4a1c      	ldr	r2, [pc, #112]	; (8000f08 <SystemInit+0xf8>)
 8000e96:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e98:	4b18      	ldr	r3, [pc, #96]	; (8000efc <SystemInit+0xec>)
 8000e9a:	4a1c      	ldr	r2, [pc, #112]	; (8000f0c <SystemInit+0xfc>)
 8000e9c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e9e:	4b17      	ldr	r3, [pc, #92]	; (8000efc <SystemInit+0xec>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ea4:	4b15      	ldr	r3, [pc, #84]	; (8000efc <SystemInit+0xec>)
 8000ea6:	4a19      	ldr	r2, [pc, #100]	; (8000f0c <SystemInit+0xfc>)
 8000ea8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000eaa:	4b14      	ldr	r3, [pc, #80]	; (8000efc <SystemInit+0xec>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000eb0:	4b12      	ldr	r3, [pc, #72]	; (8000efc <SystemInit+0xec>)
 8000eb2:	4a16      	ldr	r2, [pc, #88]	; (8000f0c <SystemInit+0xfc>)
 8000eb4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000eb6:	4b11      	ldr	r3, [pc, #68]	; (8000efc <SystemInit+0xec>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ebc:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <SystemInit+0xec>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <SystemInit+0xec>)
 8000ec2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ec6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <SystemInit+0xec>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000ece:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <SystemInit+0x100>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <SystemInit+0x104>)
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000eda:	d202      	bcs.n	8000ee2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000edc:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <SystemInit+0x108>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <SystemInit+0x10c>)
 8000ee4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ee8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00
 8000ef8:	52002000 	.word	0x52002000
 8000efc:	58024400 	.word	0x58024400
 8000f00:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f04:	02020200 	.word	0x02020200
 8000f08:	01ff0000 	.word	0x01ff0000
 8000f0c:	01010280 	.word	0x01010280
 8000f10:	5c001000 	.word	0x5c001000
 8000f14:	ffff0000 	.word	0xffff0000
 8000f18:	51008108 	.word	0x51008108
 8000f1c:	52004000 	.word	0x52004000

08000f20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f24:	f7ff ff74 	bl	8000e10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f28:	480c      	ldr	r0, [pc, #48]	; (8000f5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f2a:	490d      	ldr	r1, [pc, #52]	; (8000f60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	; (8000f64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f30:	e002      	b.n	8000f38 <LoopCopyDataInit>

08000f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f36:	3304      	adds	r3, #4

08000f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f3c:	d3f9      	bcc.n	8000f32 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f40:	4c0a      	ldr	r4, [pc, #40]	; (8000f6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f44:	e001      	b.n	8000f4a <LoopFillZerobss>

08000f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f48:	3204      	adds	r2, #4

08000f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f4e:	f007 fc83 	bl	8008858 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f52:	f7ff fb3f 	bl	80005d4 <main>
  bx  lr
 8000f56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f58:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f5c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f60:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000f64:	08008900 	.word	0x08008900
  ldr r2, =_sbss
 8000f68:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000f6c:	24000220 	.word	0x24000220

08000f70 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f70:	e7fe      	b.n	8000f70 <ADC3_IRQHandler>
	...

08000f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7a:	2003      	movs	r0, #3
 8000f7c:	f000 f98c 	bl	8001298 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f80:	f001 ffd4 	bl	8002f2c <HAL_RCC_GetSysClockFreq>
 8000f84:	4602      	mov	r2, r0
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <HAL_Init+0x68>)
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	0a1b      	lsrs	r3, r3, #8
 8000f8c:	f003 030f 	and.w	r3, r3, #15
 8000f90:	4913      	ldr	r1, [pc, #76]	; (8000fe0 <HAL_Init+0x6c>)
 8000f92:	5ccb      	ldrb	r3, [r1, r3]
 8000f94:	f003 031f 	and.w	r3, r3, #31
 8000f98:	fa22 f303 	lsr.w	r3, r2, r3
 8000f9c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <HAL_Init+0x68>)
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	f003 030f 	and.w	r3, r3, #15
 8000fa6:	4a0e      	ldr	r2, [pc, #56]	; (8000fe0 <HAL_Init+0x6c>)
 8000fa8:	5cd3      	ldrb	r3, [r2, r3]
 8000faa:	f003 031f 	and.w	r3, r3, #31
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb4:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <HAL_Init+0x70>)
 8000fb6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fb8:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <HAL_Init+0x74>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fbe:	200f      	movs	r0, #15
 8000fc0:	f000 f814 	bl	8000fec <HAL_InitTick>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e002      	b.n	8000fd4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fce:	f7ff fd9f 	bl	8000b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd2:	2300      	movs	r3, #0
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	58024400 	.word	0x58024400
 8000fe0:	080088b8 	.word	0x080088b8
 8000fe4:	24000004 	.word	0x24000004
 8000fe8:	24000000 	.word	0x24000000

08000fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ff4:	4b15      	ldr	r3, [pc, #84]	; (800104c <HAL_InitTick+0x60>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d101      	bne.n	8001000 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e021      	b.n	8001044 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001000:	4b13      	ldr	r3, [pc, #76]	; (8001050 <HAL_InitTick+0x64>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_InitTick+0x60>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	4619      	mov	r1, r3
 800100a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001012:	fbb2 f3f3 	udiv	r3, r2, r3
 8001016:	4618      	mov	r0, r3
 8001018:	f000 f971 	bl	80012fe <HAL_SYSTICK_Config>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e00e      	b.n	8001044 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2b0f      	cmp	r3, #15
 800102a:	d80a      	bhi.n	8001042 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800102c:	2200      	movs	r2, #0
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	f04f 30ff 	mov.w	r0, #4294967295
 8001034:	f000 f93b 	bl	80012ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001038:	4a06      	ldr	r2, [pc, #24]	; (8001054 <HAL_InitTick+0x68>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800103e:	2300      	movs	r3, #0
 8001040:	e000      	b.n	8001044 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
}
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	2400000c 	.word	0x2400000c
 8001050:	24000000 	.word	0x24000000
 8001054:	24000008 	.word	0x24000008

08001058 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_IncTick+0x20>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_IncTick+0x24>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4413      	add	r3, r2
 8001068:	4a04      	ldr	r2, [pc, #16]	; (800107c <HAL_IncTick+0x24>)
 800106a:	6013      	str	r3, [r2, #0]
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	2400000c 	.word	0x2400000c
 800107c:	2400021c 	.word	0x2400021c

08001080 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return uwTick;
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <HAL_GetTick+0x14>)
 8001086:	681b      	ldr	r3, [r3, #0]
}
 8001088:	4618      	mov	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	2400021c 	.word	0x2400021c

08001098 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a0:	f7ff ffee 	bl	8001080 <HAL_GetTick>
 80010a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b0:	d005      	beq.n	80010be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010b2:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <HAL_Delay+0x44>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4413      	add	r3, r2
 80010bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010be:	bf00      	nop
 80010c0:	f7ff ffde 	bl	8001080 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d8f7      	bhi.n	80010c0 <HAL_Delay+0x28>
  {
  }
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	2400000c 	.word	0x2400000c

080010e0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010e4:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <HAL_GetREVID+0x14>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	0c1b      	lsrs	r3, r3, #16
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	5c001000 	.word	0x5c001000

080010f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <__NVIC_SetPriorityGrouping+0x40>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001114:	4013      	ands	r3, r2
 8001116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <__NVIC_SetPriorityGrouping+0x44>)
 8001122:	4313      	orrs	r3, r2
 8001124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001126:	4a04      	ldr	r2, [pc, #16]	; (8001138 <__NVIC_SetPriorityGrouping+0x40>)
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	60d3      	str	r3, [r2, #12]
}
 800112c:	bf00      	nop
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000ed00 	.word	0xe000ed00
 800113c:	05fa0000 	.word	0x05fa0000

08001140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001144:	4b04      	ldr	r3, [pc, #16]	; (8001158 <__NVIC_GetPriorityGrouping+0x18>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	0a1b      	lsrs	r3, r3, #8
 800114a:	f003 0307 	and.w	r3, r3, #7
}
 800114e:	4618      	mov	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001166:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800116a:	2b00      	cmp	r3, #0
 800116c:	db0b      	blt.n	8001186 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800116e:	88fb      	ldrh	r3, [r7, #6]
 8001170:	f003 021f 	and.w	r2, r3, #31
 8001174:	4907      	ldr	r1, [pc, #28]	; (8001194 <__NVIC_EnableIRQ+0x38>)
 8001176:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800117a:	095b      	lsrs	r3, r3, #5
 800117c:	2001      	movs	r0, #1
 800117e:	fa00 f202 	lsl.w	r2, r0, r2
 8001182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000e100 	.word	0xe000e100

08001198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	6039      	str	r1, [r7, #0]
 80011a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	db0a      	blt.n	80011c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	490c      	ldr	r1, [pc, #48]	; (80011e4 <__NVIC_SetPriority+0x4c>)
 80011b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011b6:	0112      	lsls	r2, r2, #4
 80011b8:	b2d2      	uxtb	r2, r2
 80011ba:	440b      	add	r3, r1
 80011bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c0:	e00a      	b.n	80011d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4908      	ldr	r1, [pc, #32]	; (80011e8 <__NVIC_SetPriority+0x50>)
 80011c8:	88fb      	ldrh	r3, [r7, #6]
 80011ca:	f003 030f 	and.w	r3, r3, #15
 80011ce:	3b04      	subs	r3, #4
 80011d0:	0112      	lsls	r2, r2, #4
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	440b      	add	r3, r1
 80011d6:	761a      	strb	r2, [r3, #24]
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000e100 	.word	0xe000e100
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b089      	sub	sp, #36	; 0x24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f1c3 0307 	rsb	r3, r3, #7
 8001206:	2b04      	cmp	r3, #4
 8001208:	bf28      	it	cs
 800120a:	2304      	movcs	r3, #4
 800120c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3304      	adds	r3, #4
 8001212:	2b06      	cmp	r3, #6
 8001214:	d902      	bls.n	800121c <NVIC_EncodePriority+0x30>
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3b03      	subs	r3, #3
 800121a:	e000      	b.n	800121e <NVIC_EncodePriority+0x32>
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001220:	f04f 32ff 	mov.w	r2, #4294967295
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43da      	mvns	r2, r3
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	401a      	ands	r2, r3
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001234:	f04f 31ff 	mov.w	r1, #4294967295
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	fa01 f303 	lsl.w	r3, r1, r3
 800123e:	43d9      	mvns	r1, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	4313      	orrs	r3, r2
         );
}
 8001246:	4618      	mov	r0, r3
 8001248:	3724      	adds	r7, #36	; 0x24
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3b01      	subs	r3, #1
 8001260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001264:	d301      	bcc.n	800126a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001266:	2301      	movs	r3, #1
 8001268:	e00f      	b.n	800128a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800126a:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <SysTick_Config+0x40>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3b01      	subs	r3, #1
 8001270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001272:	210f      	movs	r1, #15
 8001274:	f04f 30ff 	mov.w	r0, #4294967295
 8001278:	f7ff ff8e 	bl	8001198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <SysTick_Config+0x40>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001282:	4b04      	ldr	r3, [pc, #16]	; (8001294 <SysTick_Config+0x40>)
 8001284:	2207      	movs	r2, #7
 8001286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	e000e010 	.word	0xe000e010

08001298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff ff29 	bl	80010f8 <__NVIC_SetPriorityGrouping>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b086      	sub	sp, #24
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	60b9      	str	r1, [r7, #8]
 80012b8:	607a      	str	r2, [r7, #4]
 80012ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012bc:	f7ff ff40 	bl	8001140 <__NVIC_GetPriorityGrouping>
 80012c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	68b9      	ldr	r1, [r7, #8]
 80012c6:	6978      	ldr	r0, [r7, #20]
 80012c8:	f7ff ff90 	bl	80011ec <NVIC_EncodePriority>
 80012cc:	4602      	mov	r2, r0
 80012ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012d2:	4611      	mov	r1, r2
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff ff5f 	bl	8001198 <__NVIC_SetPriority>
}
 80012da:	bf00      	nop
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	4603      	mov	r3, r0
 80012ea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff33 	bl	800115c <__NVIC_EnableIRQ>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff ffa4 	bl	8001254 <SysTick_Config>
 800130c:	4603      	mov	r3, r0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800131c:	f3bf 8f5f 	dmb	sy
}
 8001320:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001322:	4b07      	ldr	r3, [pc, #28]	; (8001340 <HAL_MPU_Disable+0x28>)
 8001324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001326:	4a06      	ldr	r2, [pc, #24]	; (8001340 <HAL_MPU_Disable+0x28>)
 8001328:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800132c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800132e:	4b05      	ldr	r3, [pc, #20]	; (8001344 <HAL_MPU_Disable+0x2c>)
 8001330:	2200      	movs	r2, #0
 8001332:	605a      	str	r2, [r3, #4]
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000ed00 	.word	0xe000ed00
 8001344:	e000ed90 	.word	0xe000ed90

08001348 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001350:	4a0b      	ldr	r2, [pc, #44]	; (8001380 <HAL_MPU_Enable+0x38>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800135a:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <HAL_MPU_Enable+0x3c>)
 800135c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135e:	4a09      	ldr	r2, [pc, #36]	; (8001384 <HAL_MPU_Enable+0x3c>)
 8001360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001364:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001366:	f3bf 8f4f 	dsb	sy
}
 800136a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800136c:	f3bf 8f6f 	isb	sy
}
 8001370:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000ed90 	.word	0xe000ed90
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	785a      	ldrb	r2, [r3, #1]
 8001394:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <HAL_MPU_ConfigRegion+0x7c>)
 8001396:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001398:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <HAL_MPU_ConfigRegion+0x7c>)
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	4a19      	ldr	r2, [pc, #100]	; (8001404 <HAL_MPU_ConfigRegion+0x7c>)
 800139e:	f023 0301 	bic.w	r3, r3, #1
 80013a2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80013a4:	4a17      	ldr	r2, [pc, #92]	; (8001404 <HAL_MPU_ConfigRegion+0x7c>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	7b1b      	ldrb	r3, [r3, #12]
 80013b0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	7adb      	ldrb	r3, [r3, #11]
 80013b6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	7a9b      	ldrb	r3, [r3, #10]
 80013be:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	7b5b      	ldrb	r3, [r3, #13]
 80013c6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80013c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	7b9b      	ldrb	r3, [r3, #14]
 80013ce:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	7bdb      	ldrb	r3, [r3, #15]
 80013d6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80013d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	7a5b      	ldrb	r3, [r3, #9]
 80013de:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80013e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	7a1b      	ldrb	r3, [r3, #8]
 80013e6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013e8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	7812      	ldrb	r2, [r2, #0]
 80013ee:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013f0:	4a04      	ldr	r2, [pc, #16]	; (8001404 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013f2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013f4:	6113      	str	r3, [r2, #16]
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000ed90 	.word	0xe000ed90

08001408 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001410:	f7ff fe36 	bl	8001080 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d101      	bne.n	8001420 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e2dc      	b.n	80019da <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001426:	b2db      	uxtb	r3, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d008      	beq.n	800143e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2280      	movs	r2, #128	; 0x80
 8001430:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e2cd      	b.n	80019da <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a76      	ldr	r2, [pc, #472]	; (800161c <HAL_DMA_Abort+0x214>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d04a      	beq.n	80014de <HAL_DMA_Abort+0xd6>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a74      	ldr	r2, [pc, #464]	; (8001620 <HAL_DMA_Abort+0x218>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d045      	beq.n	80014de <HAL_DMA_Abort+0xd6>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a73      	ldr	r2, [pc, #460]	; (8001624 <HAL_DMA_Abort+0x21c>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d040      	beq.n	80014de <HAL_DMA_Abort+0xd6>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a71      	ldr	r2, [pc, #452]	; (8001628 <HAL_DMA_Abort+0x220>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d03b      	beq.n	80014de <HAL_DMA_Abort+0xd6>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a70      	ldr	r2, [pc, #448]	; (800162c <HAL_DMA_Abort+0x224>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d036      	beq.n	80014de <HAL_DMA_Abort+0xd6>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a6e      	ldr	r2, [pc, #440]	; (8001630 <HAL_DMA_Abort+0x228>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d031      	beq.n	80014de <HAL_DMA_Abort+0xd6>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a6d      	ldr	r2, [pc, #436]	; (8001634 <HAL_DMA_Abort+0x22c>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d02c      	beq.n	80014de <HAL_DMA_Abort+0xd6>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a6b      	ldr	r2, [pc, #428]	; (8001638 <HAL_DMA_Abort+0x230>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d027      	beq.n	80014de <HAL_DMA_Abort+0xd6>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a6a      	ldr	r2, [pc, #424]	; (800163c <HAL_DMA_Abort+0x234>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d022      	beq.n	80014de <HAL_DMA_Abort+0xd6>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a68      	ldr	r2, [pc, #416]	; (8001640 <HAL_DMA_Abort+0x238>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d01d      	beq.n	80014de <HAL_DMA_Abort+0xd6>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a67      	ldr	r2, [pc, #412]	; (8001644 <HAL_DMA_Abort+0x23c>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d018      	beq.n	80014de <HAL_DMA_Abort+0xd6>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a65      	ldr	r2, [pc, #404]	; (8001648 <HAL_DMA_Abort+0x240>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d013      	beq.n	80014de <HAL_DMA_Abort+0xd6>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a64      	ldr	r2, [pc, #400]	; (800164c <HAL_DMA_Abort+0x244>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d00e      	beq.n	80014de <HAL_DMA_Abort+0xd6>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a62      	ldr	r2, [pc, #392]	; (8001650 <HAL_DMA_Abort+0x248>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d009      	beq.n	80014de <HAL_DMA_Abort+0xd6>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a61      	ldr	r2, [pc, #388]	; (8001654 <HAL_DMA_Abort+0x24c>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d004      	beq.n	80014de <HAL_DMA_Abort+0xd6>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a5f      	ldr	r2, [pc, #380]	; (8001658 <HAL_DMA_Abort+0x250>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d101      	bne.n	80014e2 <HAL_DMA_Abort+0xda>
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <HAL_DMA_Abort+0xdc>
 80014e2:	2300      	movs	r3, #0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d013      	beq.n	8001510 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 021e 	bic.w	r2, r2, #30
 80014f6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	695a      	ldr	r2, [r3, #20]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001506:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	617b      	str	r3, [r7, #20]
 800150e:	e00a      	b.n	8001526 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 020e 	bic.w	r2, r2, #14
 800151e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a3c      	ldr	r2, [pc, #240]	; (800161c <HAL_DMA_Abort+0x214>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d072      	beq.n	8001616 <HAL_DMA_Abort+0x20e>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a3a      	ldr	r2, [pc, #232]	; (8001620 <HAL_DMA_Abort+0x218>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d06d      	beq.n	8001616 <HAL_DMA_Abort+0x20e>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a39      	ldr	r2, [pc, #228]	; (8001624 <HAL_DMA_Abort+0x21c>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d068      	beq.n	8001616 <HAL_DMA_Abort+0x20e>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a37      	ldr	r2, [pc, #220]	; (8001628 <HAL_DMA_Abort+0x220>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d063      	beq.n	8001616 <HAL_DMA_Abort+0x20e>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a36      	ldr	r2, [pc, #216]	; (800162c <HAL_DMA_Abort+0x224>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d05e      	beq.n	8001616 <HAL_DMA_Abort+0x20e>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a34      	ldr	r2, [pc, #208]	; (8001630 <HAL_DMA_Abort+0x228>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d059      	beq.n	8001616 <HAL_DMA_Abort+0x20e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a33      	ldr	r2, [pc, #204]	; (8001634 <HAL_DMA_Abort+0x22c>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d054      	beq.n	8001616 <HAL_DMA_Abort+0x20e>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a31      	ldr	r2, [pc, #196]	; (8001638 <HAL_DMA_Abort+0x230>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d04f      	beq.n	8001616 <HAL_DMA_Abort+0x20e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a30      	ldr	r2, [pc, #192]	; (800163c <HAL_DMA_Abort+0x234>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d04a      	beq.n	8001616 <HAL_DMA_Abort+0x20e>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a2e      	ldr	r2, [pc, #184]	; (8001640 <HAL_DMA_Abort+0x238>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d045      	beq.n	8001616 <HAL_DMA_Abort+0x20e>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a2d      	ldr	r2, [pc, #180]	; (8001644 <HAL_DMA_Abort+0x23c>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d040      	beq.n	8001616 <HAL_DMA_Abort+0x20e>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a2b      	ldr	r2, [pc, #172]	; (8001648 <HAL_DMA_Abort+0x240>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d03b      	beq.n	8001616 <HAL_DMA_Abort+0x20e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a2a      	ldr	r2, [pc, #168]	; (800164c <HAL_DMA_Abort+0x244>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d036      	beq.n	8001616 <HAL_DMA_Abort+0x20e>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a28      	ldr	r2, [pc, #160]	; (8001650 <HAL_DMA_Abort+0x248>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d031      	beq.n	8001616 <HAL_DMA_Abort+0x20e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a27      	ldr	r2, [pc, #156]	; (8001654 <HAL_DMA_Abort+0x24c>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d02c      	beq.n	8001616 <HAL_DMA_Abort+0x20e>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a25      	ldr	r2, [pc, #148]	; (8001658 <HAL_DMA_Abort+0x250>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d027      	beq.n	8001616 <HAL_DMA_Abort+0x20e>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a24      	ldr	r2, [pc, #144]	; (800165c <HAL_DMA_Abort+0x254>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d022      	beq.n	8001616 <HAL_DMA_Abort+0x20e>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a22      	ldr	r2, [pc, #136]	; (8001660 <HAL_DMA_Abort+0x258>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d01d      	beq.n	8001616 <HAL_DMA_Abort+0x20e>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a21      	ldr	r2, [pc, #132]	; (8001664 <HAL_DMA_Abort+0x25c>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d018      	beq.n	8001616 <HAL_DMA_Abort+0x20e>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a1f      	ldr	r2, [pc, #124]	; (8001668 <HAL_DMA_Abort+0x260>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d013      	beq.n	8001616 <HAL_DMA_Abort+0x20e>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a1e      	ldr	r2, [pc, #120]	; (800166c <HAL_DMA_Abort+0x264>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d00e      	beq.n	8001616 <HAL_DMA_Abort+0x20e>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a1c      	ldr	r2, [pc, #112]	; (8001670 <HAL_DMA_Abort+0x268>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d009      	beq.n	8001616 <HAL_DMA_Abort+0x20e>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a1b      	ldr	r2, [pc, #108]	; (8001674 <HAL_DMA_Abort+0x26c>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d004      	beq.n	8001616 <HAL_DMA_Abort+0x20e>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a19      	ldr	r2, [pc, #100]	; (8001678 <HAL_DMA_Abort+0x270>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d132      	bne.n	800167c <HAL_DMA_Abort+0x274>
 8001616:	2301      	movs	r3, #1
 8001618:	e031      	b.n	800167e <HAL_DMA_Abort+0x276>
 800161a:	bf00      	nop
 800161c:	40020010 	.word	0x40020010
 8001620:	40020028 	.word	0x40020028
 8001624:	40020040 	.word	0x40020040
 8001628:	40020058 	.word	0x40020058
 800162c:	40020070 	.word	0x40020070
 8001630:	40020088 	.word	0x40020088
 8001634:	400200a0 	.word	0x400200a0
 8001638:	400200b8 	.word	0x400200b8
 800163c:	40020410 	.word	0x40020410
 8001640:	40020428 	.word	0x40020428
 8001644:	40020440 	.word	0x40020440
 8001648:	40020458 	.word	0x40020458
 800164c:	40020470 	.word	0x40020470
 8001650:	40020488 	.word	0x40020488
 8001654:	400204a0 	.word	0x400204a0
 8001658:	400204b8 	.word	0x400204b8
 800165c:	58025408 	.word	0x58025408
 8001660:	5802541c 	.word	0x5802541c
 8001664:	58025430 	.word	0x58025430
 8001668:	58025444 	.word	0x58025444
 800166c:	58025458 	.word	0x58025458
 8001670:	5802546c 	.word	0x5802546c
 8001674:	58025480 	.word	0x58025480
 8001678:	58025494 	.word	0x58025494
 800167c:	2300      	movs	r3, #0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d007      	beq.n	8001692 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800168c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001690:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a6d      	ldr	r2, [pc, #436]	; (800184c <HAL_DMA_Abort+0x444>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d04a      	beq.n	8001732 <HAL_DMA_Abort+0x32a>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a6b      	ldr	r2, [pc, #428]	; (8001850 <HAL_DMA_Abort+0x448>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d045      	beq.n	8001732 <HAL_DMA_Abort+0x32a>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a6a      	ldr	r2, [pc, #424]	; (8001854 <HAL_DMA_Abort+0x44c>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d040      	beq.n	8001732 <HAL_DMA_Abort+0x32a>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a68      	ldr	r2, [pc, #416]	; (8001858 <HAL_DMA_Abort+0x450>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d03b      	beq.n	8001732 <HAL_DMA_Abort+0x32a>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a67      	ldr	r2, [pc, #412]	; (800185c <HAL_DMA_Abort+0x454>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d036      	beq.n	8001732 <HAL_DMA_Abort+0x32a>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a65      	ldr	r2, [pc, #404]	; (8001860 <HAL_DMA_Abort+0x458>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d031      	beq.n	8001732 <HAL_DMA_Abort+0x32a>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a64      	ldr	r2, [pc, #400]	; (8001864 <HAL_DMA_Abort+0x45c>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d02c      	beq.n	8001732 <HAL_DMA_Abort+0x32a>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a62      	ldr	r2, [pc, #392]	; (8001868 <HAL_DMA_Abort+0x460>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d027      	beq.n	8001732 <HAL_DMA_Abort+0x32a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a61      	ldr	r2, [pc, #388]	; (800186c <HAL_DMA_Abort+0x464>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d022      	beq.n	8001732 <HAL_DMA_Abort+0x32a>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a5f      	ldr	r2, [pc, #380]	; (8001870 <HAL_DMA_Abort+0x468>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d01d      	beq.n	8001732 <HAL_DMA_Abort+0x32a>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a5e      	ldr	r2, [pc, #376]	; (8001874 <HAL_DMA_Abort+0x46c>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d018      	beq.n	8001732 <HAL_DMA_Abort+0x32a>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a5c      	ldr	r2, [pc, #368]	; (8001878 <HAL_DMA_Abort+0x470>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d013      	beq.n	8001732 <HAL_DMA_Abort+0x32a>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a5b      	ldr	r2, [pc, #364]	; (800187c <HAL_DMA_Abort+0x474>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d00e      	beq.n	8001732 <HAL_DMA_Abort+0x32a>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a59      	ldr	r2, [pc, #356]	; (8001880 <HAL_DMA_Abort+0x478>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d009      	beq.n	8001732 <HAL_DMA_Abort+0x32a>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a58      	ldr	r2, [pc, #352]	; (8001884 <HAL_DMA_Abort+0x47c>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d004      	beq.n	8001732 <HAL_DMA_Abort+0x32a>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a56      	ldr	r2, [pc, #344]	; (8001888 <HAL_DMA_Abort+0x480>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d108      	bne.n	8001744 <HAL_DMA_Abort+0x33c>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 0201 	bic.w	r2, r2, #1
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	e007      	b.n	8001754 <HAL_DMA_Abort+0x34c>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 0201 	bic.w	r2, r2, #1
 8001752:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001754:	e013      	b.n	800177e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001756:	f7ff fc93 	bl	8001080 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b05      	cmp	r3, #5
 8001762:	d90c      	bls.n	800177e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2220      	movs	r2, #32
 8001768:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2203      	movs	r2, #3
 800176e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e12d      	b.n	80019da <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1e5      	bne.n	8001756 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a2f      	ldr	r2, [pc, #188]	; (800184c <HAL_DMA_Abort+0x444>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d04a      	beq.n	800182a <HAL_DMA_Abort+0x422>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a2d      	ldr	r2, [pc, #180]	; (8001850 <HAL_DMA_Abort+0x448>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d045      	beq.n	800182a <HAL_DMA_Abort+0x422>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a2c      	ldr	r2, [pc, #176]	; (8001854 <HAL_DMA_Abort+0x44c>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d040      	beq.n	800182a <HAL_DMA_Abort+0x422>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a2a      	ldr	r2, [pc, #168]	; (8001858 <HAL_DMA_Abort+0x450>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d03b      	beq.n	800182a <HAL_DMA_Abort+0x422>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a29      	ldr	r2, [pc, #164]	; (800185c <HAL_DMA_Abort+0x454>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d036      	beq.n	800182a <HAL_DMA_Abort+0x422>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a27      	ldr	r2, [pc, #156]	; (8001860 <HAL_DMA_Abort+0x458>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d031      	beq.n	800182a <HAL_DMA_Abort+0x422>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a26      	ldr	r2, [pc, #152]	; (8001864 <HAL_DMA_Abort+0x45c>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d02c      	beq.n	800182a <HAL_DMA_Abort+0x422>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a24      	ldr	r2, [pc, #144]	; (8001868 <HAL_DMA_Abort+0x460>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d027      	beq.n	800182a <HAL_DMA_Abort+0x422>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a23      	ldr	r2, [pc, #140]	; (800186c <HAL_DMA_Abort+0x464>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d022      	beq.n	800182a <HAL_DMA_Abort+0x422>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a21      	ldr	r2, [pc, #132]	; (8001870 <HAL_DMA_Abort+0x468>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d01d      	beq.n	800182a <HAL_DMA_Abort+0x422>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a20      	ldr	r2, [pc, #128]	; (8001874 <HAL_DMA_Abort+0x46c>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d018      	beq.n	800182a <HAL_DMA_Abort+0x422>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a1e      	ldr	r2, [pc, #120]	; (8001878 <HAL_DMA_Abort+0x470>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d013      	beq.n	800182a <HAL_DMA_Abort+0x422>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a1d      	ldr	r2, [pc, #116]	; (800187c <HAL_DMA_Abort+0x474>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d00e      	beq.n	800182a <HAL_DMA_Abort+0x422>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a1b      	ldr	r2, [pc, #108]	; (8001880 <HAL_DMA_Abort+0x478>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d009      	beq.n	800182a <HAL_DMA_Abort+0x422>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a1a      	ldr	r2, [pc, #104]	; (8001884 <HAL_DMA_Abort+0x47c>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d004      	beq.n	800182a <HAL_DMA_Abort+0x422>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a18      	ldr	r2, [pc, #96]	; (8001888 <HAL_DMA_Abort+0x480>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d101      	bne.n	800182e <HAL_DMA_Abort+0x426>
 800182a:	2301      	movs	r3, #1
 800182c:	e000      	b.n	8001830 <HAL_DMA_Abort+0x428>
 800182e:	2300      	movs	r3, #0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d02b      	beq.n	800188c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001838:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800183e:	f003 031f 	and.w	r3, r3, #31
 8001842:	223f      	movs	r2, #63	; 0x3f
 8001844:	409a      	lsls	r2, r3
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	e02a      	b.n	80018a2 <HAL_DMA_Abort+0x49a>
 800184c:	40020010 	.word	0x40020010
 8001850:	40020028 	.word	0x40020028
 8001854:	40020040 	.word	0x40020040
 8001858:	40020058 	.word	0x40020058
 800185c:	40020070 	.word	0x40020070
 8001860:	40020088 	.word	0x40020088
 8001864:	400200a0 	.word	0x400200a0
 8001868:	400200b8 	.word	0x400200b8
 800186c:	40020410 	.word	0x40020410
 8001870:	40020428 	.word	0x40020428
 8001874:	40020440 	.word	0x40020440
 8001878:	40020458 	.word	0x40020458
 800187c:	40020470 	.word	0x40020470
 8001880:	40020488 	.word	0x40020488
 8001884:	400204a0 	.word	0x400204a0
 8001888:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001890:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001896:	f003 031f 	and.w	r3, r3, #31
 800189a:	2201      	movs	r2, #1
 800189c:	409a      	lsls	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a4f      	ldr	r2, [pc, #316]	; (80019e4 <HAL_DMA_Abort+0x5dc>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d072      	beq.n	8001992 <HAL_DMA_Abort+0x58a>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a4d      	ldr	r2, [pc, #308]	; (80019e8 <HAL_DMA_Abort+0x5e0>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d06d      	beq.n	8001992 <HAL_DMA_Abort+0x58a>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a4c      	ldr	r2, [pc, #304]	; (80019ec <HAL_DMA_Abort+0x5e4>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d068      	beq.n	8001992 <HAL_DMA_Abort+0x58a>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a4a      	ldr	r2, [pc, #296]	; (80019f0 <HAL_DMA_Abort+0x5e8>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d063      	beq.n	8001992 <HAL_DMA_Abort+0x58a>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a49      	ldr	r2, [pc, #292]	; (80019f4 <HAL_DMA_Abort+0x5ec>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d05e      	beq.n	8001992 <HAL_DMA_Abort+0x58a>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a47      	ldr	r2, [pc, #284]	; (80019f8 <HAL_DMA_Abort+0x5f0>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d059      	beq.n	8001992 <HAL_DMA_Abort+0x58a>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a46      	ldr	r2, [pc, #280]	; (80019fc <HAL_DMA_Abort+0x5f4>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d054      	beq.n	8001992 <HAL_DMA_Abort+0x58a>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a44      	ldr	r2, [pc, #272]	; (8001a00 <HAL_DMA_Abort+0x5f8>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d04f      	beq.n	8001992 <HAL_DMA_Abort+0x58a>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a43      	ldr	r2, [pc, #268]	; (8001a04 <HAL_DMA_Abort+0x5fc>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d04a      	beq.n	8001992 <HAL_DMA_Abort+0x58a>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a41      	ldr	r2, [pc, #260]	; (8001a08 <HAL_DMA_Abort+0x600>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d045      	beq.n	8001992 <HAL_DMA_Abort+0x58a>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a40      	ldr	r2, [pc, #256]	; (8001a0c <HAL_DMA_Abort+0x604>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d040      	beq.n	8001992 <HAL_DMA_Abort+0x58a>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a3e      	ldr	r2, [pc, #248]	; (8001a10 <HAL_DMA_Abort+0x608>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d03b      	beq.n	8001992 <HAL_DMA_Abort+0x58a>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a3d      	ldr	r2, [pc, #244]	; (8001a14 <HAL_DMA_Abort+0x60c>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d036      	beq.n	8001992 <HAL_DMA_Abort+0x58a>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a3b      	ldr	r2, [pc, #236]	; (8001a18 <HAL_DMA_Abort+0x610>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d031      	beq.n	8001992 <HAL_DMA_Abort+0x58a>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a3a      	ldr	r2, [pc, #232]	; (8001a1c <HAL_DMA_Abort+0x614>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d02c      	beq.n	8001992 <HAL_DMA_Abort+0x58a>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a38      	ldr	r2, [pc, #224]	; (8001a20 <HAL_DMA_Abort+0x618>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d027      	beq.n	8001992 <HAL_DMA_Abort+0x58a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a37      	ldr	r2, [pc, #220]	; (8001a24 <HAL_DMA_Abort+0x61c>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d022      	beq.n	8001992 <HAL_DMA_Abort+0x58a>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a35      	ldr	r2, [pc, #212]	; (8001a28 <HAL_DMA_Abort+0x620>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d01d      	beq.n	8001992 <HAL_DMA_Abort+0x58a>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a34      	ldr	r2, [pc, #208]	; (8001a2c <HAL_DMA_Abort+0x624>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d018      	beq.n	8001992 <HAL_DMA_Abort+0x58a>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a32      	ldr	r2, [pc, #200]	; (8001a30 <HAL_DMA_Abort+0x628>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d013      	beq.n	8001992 <HAL_DMA_Abort+0x58a>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a31      	ldr	r2, [pc, #196]	; (8001a34 <HAL_DMA_Abort+0x62c>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d00e      	beq.n	8001992 <HAL_DMA_Abort+0x58a>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a2f      	ldr	r2, [pc, #188]	; (8001a38 <HAL_DMA_Abort+0x630>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d009      	beq.n	8001992 <HAL_DMA_Abort+0x58a>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a2e      	ldr	r2, [pc, #184]	; (8001a3c <HAL_DMA_Abort+0x634>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d004      	beq.n	8001992 <HAL_DMA_Abort+0x58a>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a2c      	ldr	r2, [pc, #176]	; (8001a40 <HAL_DMA_Abort+0x638>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d101      	bne.n	8001996 <HAL_DMA_Abort+0x58e>
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <HAL_DMA_Abort+0x590>
 8001996:	2300      	movs	r3, #0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d015      	beq.n	80019c8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80019a4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00c      	beq.n	80019c8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019bc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80019c6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40020010 	.word	0x40020010
 80019e8:	40020028 	.word	0x40020028
 80019ec:	40020040 	.word	0x40020040
 80019f0:	40020058 	.word	0x40020058
 80019f4:	40020070 	.word	0x40020070
 80019f8:	40020088 	.word	0x40020088
 80019fc:	400200a0 	.word	0x400200a0
 8001a00:	400200b8 	.word	0x400200b8
 8001a04:	40020410 	.word	0x40020410
 8001a08:	40020428 	.word	0x40020428
 8001a0c:	40020440 	.word	0x40020440
 8001a10:	40020458 	.word	0x40020458
 8001a14:	40020470 	.word	0x40020470
 8001a18:	40020488 	.word	0x40020488
 8001a1c:	400204a0 	.word	0x400204a0
 8001a20:	400204b8 	.word	0x400204b8
 8001a24:	58025408 	.word	0x58025408
 8001a28:	5802541c 	.word	0x5802541c
 8001a2c:	58025430 	.word	0x58025430
 8001a30:	58025444 	.word	0x58025444
 8001a34:	58025458 	.word	0x58025458
 8001a38:	5802546c 	.word	0x5802546c
 8001a3c:	58025480 	.word	0x58025480
 8001a40:	58025494 	.word	0x58025494

08001a44 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e237      	b.n	8001ec6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d004      	beq.n	8001a6c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2280      	movs	r2, #128	; 0x80
 8001a66:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e22c      	b.n	8001ec6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a5c      	ldr	r2, [pc, #368]	; (8001be4 <HAL_DMA_Abort_IT+0x1a0>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d04a      	beq.n	8001b0c <HAL_DMA_Abort_IT+0xc8>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a5b      	ldr	r2, [pc, #364]	; (8001be8 <HAL_DMA_Abort_IT+0x1a4>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d045      	beq.n	8001b0c <HAL_DMA_Abort_IT+0xc8>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a59      	ldr	r2, [pc, #356]	; (8001bec <HAL_DMA_Abort_IT+0x1a8>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d040      	beq.n	8001b0c <HAL_DMA_Abort_IT+0xc8>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a58      	ldr	r2, [pc, #352]	; (8001bf0 <HAL_DMA_Abort_IT+0x1ac>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d03b      	beq.n	8001b0c <HAL_DMA_Abort_IT+0xc8>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a56      	ldr	r2, [pc, #344]	; (8001bf4 <HAL_DMA_Abort_IT+0x1b0>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d036      	beq.n	8001b0c <HAL_DMA_Abort_IT+0xc8>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a55      	ldr	r2, [pc, #340]	; (8001bf8 <HAL_DMA_Abort_IT+0x1b4>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d031      	beq.n	8001b0c <HAL_DMA_Abort_IT+0xc8>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a53      	ldr	r2, [pc, #332]	; (8001bfc <HAL_DMA_Abort_IT+0x1b8>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d02c      	beq.n	8001b0c <HAL_DMA_Abort_IT+0xc8>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a52      	ldr	r2, [pc, #328]	; (8001c00 <HAL_DMA_Abort_IT+0x1bc>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d027      	beq.n	8001b0c <HAL_DMA_Abort_IT+0xc8>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a50      	ldr	r2, [pc, #320]	; (8001c04 <HAL_DMA_Abort_IT+0x1c0>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d022      	beq.n	8001b0c <HAL_DMA_Abort_IT+0xc8>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a4f      	ldr	r2, [pc, #316]	; (8001c08 <HAL_DMA_Abort_IT+0x1c4>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d01d      	beq.n	8001b0c <HAL_DMA_Abort_IT+0xc8>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a4d      	ldr	r2, [pc, #308]	; (8001c0c <HAL_DMA_Abort_IT+0x1c8>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d018      	beq.n	8001b0c <HAL_DMA_Abort_IT+0xc8>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a4c      	ldr	r2, [pc, #304]	; (8001c10 <HAL_DMA_Abort_IT+0x1cc>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d013      	beq.n	8001b0c <HAL_DMA_Abort_IT+0xc8>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a4a      	ldr	r2, [pc, #296]	; (8001c14 <HAL_DMA_Abort_IT+0x1d0>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d00e      	beq.n	8001b0c <HAL_DMA_Abort_IT+0xc8>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a49      	ldr	r2, [pc, #292]	; (8001c18 <HAL_DMA_Abort_IT+0x1d4>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d009      	beq.n	8001b0c <HAL_DMA_Abort_IT+0xc8>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a47      	ldr	r2, [pc, #284]	; (8001c1c <HAL_DMA_Abort_IT+0x1d8>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d004      	beq.n	8001b0c <HAL_DMA_Abort_IT+0xc8>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a46      	ldr	r2, [pc, #280]	; (8001c20 <HAL_DMA_Abort_IT+0x1dc>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d101      	bne.n	8001b10 <HAL_DMA_Abort_IT+0xcc>
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e000      	b.n	8001b12 <HAL_DMA_Abort_IT+0xce>
 8001b10:	2300      	movs	r3, #0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f000 8086 	beq.w	8001c24 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2204      	movs	r2, #4
 8001b1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a2f      	ldr	r2, [pc, #188]	; (8001be4 <HAL_DMA_Abort_IT+0x1a0>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d04a      	beq.n	8001bc0 <HAL_DMA_Abort_IT+0x17c>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a2e      	ldr	r2, [pc, #184]	; (8001be8 <HAL_DMA_Abort_IT+0x1a4>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d045      	beq.n	8001bc0 <HAL_DMA_Abort_IT+0x17c>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a2c      	ldr	r2, [pc, #176]	; (8001bec <HAL_DMA_Abort_IT+0x1a8>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d040      	beq.n	8001bc0 <HAL_DMA_Abort_IT+0x17c>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a2b      	ldr	r2, [pc, #172]	; (8001bf0 <HAL_DMA_Abort_IT+0x1ac>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d03b      	beq.n	8001bc0 <HAL_DMA_Abort_IT+0x17c>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a29      	ldr	r2, [pc, #164]	; (8001bf4 <HAL_DMA_Abort_IT+0x1b0>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d036      	beq.n	8001bc0 <HAL_DMA_Abort_IT+0x17c>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a28      	ldr	r2, [pc, #160]	; (8001bf8 <HAL_DMA_Abort_IT+0x1b4>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d031      	beq.n	8001bc0 <HAL_DMA_Abort_IT+0x17c>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a26      	ldr	r2, [pc, #152]	; (8001bfc <HAL_DMA_Abort_IT+0x1b8>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d02c      	beq.n	8001bc0 <HAL_DMA_Abort_IT+0x17c>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a25      	ldr	r2, [pc, #148]	; (8001c00 <HAL_DMA_Abort_IT+0x1bc>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d027      	beq.n	8001bc0 <HAL_DMA_Abort_IT+0x17c>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a23      	ldr	r2, [pc, #140]	; (8001c04 <HAL_DMA_Abort_IT+0x1c0>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d022      	beq.n	8001bc0 <HAL_DMA_Abort_IT+0x17c>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a22      	ldr	r2, [pc, #136]	; (8001c08 <HAL_DMA_Abort_IT+0x1c4>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d01d      	beq.n	8001bc0 <HAL_DMA_Abort_IT+0x17c>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a20      	ldr	r2, [pc, #128]	; (8001c0c <HAL_DMA_Abort_IT+0x1c8>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d018      	beq.n	8001bc0 <HAL_DMA_Abort_IT+0x17c>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a1f      	ldr	r2, [pc, #124]	; (8001c10 <HAL_DMA_Abort_IT+0x1cc>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d013      	beq.n	8001bc0 <HAL_DMA_Abort_IT+0x17c>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a1d      	ldr	r2, [pc, #116]	; (8001c14 <HAL_DMA_Abort_IT+0x1d0>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d00e      	beq.n	8001bc0 <HAL_DMA_Abort_IT+0x17c>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a1c      	ldr	r2, [pc, #112]	; (8001c18 <HAL_DMA_Abort_IT+0x1d4>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d009      	beq.n	8001bc0 <HAL_DMA_Abort_IT+0x17c>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a1a      	ldr	r2, [pc, #104]	; (8001c1c <HAL_DMA_Abort_IT+0x1d8>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d004      	beq.n	8001bc0 <HAL_DMA_Abort_IT+0x17c>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a19      	ldr	r2, [pc, #100]	; (8001c20 <HAL_DMA_Abort_IT+0x1dc>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d108      	bne.n	8001bd2 <HAL_DMA_Abort_IT+0x18e>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 0201 	bic.w	r2, r2, #1
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	e178      	b.n	8001ec4 <HAL_DMA_Abort_IT+0x480>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 0201 	bic.w	r2, r2, #1
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	e16f      	b.n	8001ec4 <HAL_DMA_Abort_IT+0x480>
 8001be4:	40020010 	.word	0x40020010
 8001be8:	40020028 	.word	0x40020028
 8001bec:	40020040 	.word	0x40020040
 8001bf0:	40020058 	.word	0x40020058
 8001bf4:	40020070 	.word	0x40020070
 8001bf8:	40020088 	.word	0x40020088
 8001bfc:	400200a0 	.word	0x400200a0
 8001c00:	400200b8 	.word	0x400200b8
 8001c04:	40020410 	.word	0x40020410
 8001c08:	40020428 	.word	0x40020428
 8001c0c:	40020440 	.word	0x40020440
 8001c10:	40020458 	.word	0x40020458
 8001c14:	40020470 	.word	0x40020470
 8001c18:	40020488 	.word	0x40020488
 8001c1c:	400204a0 	.word	0x400204a0
 8001c20:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 020e 	bic.w	r2, r2, #14
 8001c32:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a6c      	ldr	r2, [pc, #432]	; (8001dec <HAL_DMA_Abort_IT+0x3a8>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d04a      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x290>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a6b      	ldr	r2, [pc, #428]	; (8001df0 <HAL_DMA_Abort_IT+0x3ac>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d045      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x290>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a69      	ldr	r2, [pc, #420]	; (8001df4 <HAL_DMA_Abort_IT+0x3b0>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d040      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x290>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a68      	ldr	r2, [pc, #416]	; (8001df8 <HAL_DMA_Abort_IT+0x3b4>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d03b      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x290>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a66      	ldr	r2, [pc, #408]	; (8001dfc <HAL_DMA_Abort_IT+0x3b8>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d036      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x290>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a65      	ldr	r2, [pc, #404]	; (8001e00 <HAL_DMA_Abort_IT+0x3bc>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d031      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x290>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a63      	ldr	r2, [pc, #396]	; (8001e04 <HAL_DMA_Abort_IT+0x3c0>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d02c      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x290>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a62      	ldr	r2, [pc, #392]	; (8001e08 <HAL_DMA_Abort_IT+0x3c4>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d027      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x290>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a60      	ldr	r2, [pc, #384]	; (8001e0c <HAL_DMA_Abort_IT+0x3c8>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d022      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x290>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a5f      	ldr	r2, [pc, #380]	; (8001e10 <HAL_DMA_Abort_IT+0x3cc>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d01d      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x290>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a5d      	ldr	r2, [pc, #372]	; (8001e14 <HAL_DMA_Abort_IT+0x3d0>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d018      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x290>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a5c      	ldr	r2, [pc, #368]	; (8001e18 <HAL_DMA_Abort_IT+0x3d4>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d013      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x290>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a5a      	ldr	r2, [pc, #360]	; (8001e1c <HAL_DMA_Abort_IT+0x3d8>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d00e      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x290>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a59      	ldr	r2, [pc, #356]	; (8001e20 <HAL_DMA_Abort_IT+0x3dc>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d009      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x290>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a57      	ldr	r2, [pc, #348]	; (8001e24 <HAL_DMA_Abort_IT+0x3e0>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d004      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x290>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a56      	ldr	r2, [pc, #344]	; (8001e28 <HAL_DMA_Abort_IT+0x3e4>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d108      	bne.n	8001ce6 <HAL_DMA_Abort_IT+0x2a2>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 0201 	bic.w	r2, r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	e007      	b.n	8001cf6 <HAL_DMA_Abort_IT+0x2b2>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 0201 	bic.w	r2, r2, #1
 8001cf4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a3c      	ldr	r2, [pc, #240]	; (8001dec <HAL_DMA_Abort_IT+0x3a8>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d072      	beq.n	8001de6 <HAL_DMA_Abort_IT+0x3a2>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a3a      	ldr	r2, [pc, #232]	; (8001df0 <HAL_DMA_Abort_IT+0x3ac>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d06d      	beq.n	8001de6 <HAL_DMA_Abort_IT+0x3a2>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a39      	ldr	r2, [pc, #228]	; (8001df4 <HAL_DMA_Abort_IT+0x3b0>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d068      	beq.n	8001de6 <HAL_DMA_Abort_IT+0x3a2>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a37      	ldr	r2, [pc, #220]	; (8001df8 <HAL_DMA_Abort_IT+0x3b4>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d063      	beq.n	8001de6 <HAL_DMA_Abort_IT+0x3a2>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a36      	ldr	r2, [pc, #216]	; (8001dfc <HAL_DMA_Abort_IT+0x3b8>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d05e      	beq.n	8001de6 <HAL_DMA_Abort_IT+0x3a2>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a34      	ldr	r2, [pc, #208]	; (8001e00 <HAL_DMA_Abort_IT+0x3bc>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d059      	beq.n	8001de6 <HAL_DMA_Abort_IT+0x3a2>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a33      	ldr	r2, [pc, #204]	; (8001e04 <HAL_DMA_Abort_IT+0x3c0>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d054      	beq.n	8001de6 <HAL_DMA_Abort_IT+0x3a2>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a31      	ldr	r2, [pc, #196]	; (8001e08 <HAL_DMA_Abort_IT+0x3c4>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d04f      	beq.n	8001de6 <HAL_DMA_Abort_IT+0x3a2>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a30      	ldr	r2, [pc, #192]	; (8001e0c <HAL_DMA_Abort_IT+0x3c8>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d04a      	beq.n	8001de6 <HAL_DMA_Abort_IT+0x3a2>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a2e      	ldr	r2, [pc, #184]	; (8001e10 <HAL_DMA_Abort_IT+0x3cc>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d045      	beq.n	8001de6 <HAL_DMA_Abort_IT+0x3a2>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a2d      	ldr	r2, [pc, #180]	; (8001e14 <HAL_DMA_Abort_IT+0x3d0>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d040      	beq.n	8001de6 <HAL_DMA_Abort_IT+0x3a2>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a2b      	ldr	r2, [pc, #172]	; (8001e18 <HAL_DMA_Abort_IT+0x3d4>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d03b      	beq.n	8001de6 <HAL_DMA_Abort_IT+0x3a2>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a2a      	ldr	r2, [pc, #168]	; (8001e1c <HAL_DMA_Abort_IT+0x3d8>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d036      	beq.n	8001de6 <HAL_DMA_Abort_IT+0x3a2>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a28      	ldr	r2, [pc, #160]	; (8001e20 <HAL_DMA_Abort_IT+0x3dc>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d031      	beq.n	8001de6 <HAL_DMA_Abort_IT+0x3a2>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a27      	ldr	r2, [pc, #156]	; (8001e24 <HAL_DMA_Abort_IT+0x3e0>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d02c      	beq.n	8001de6 <HAL_DMA_Abort_IT+0x3a2>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a25      	ldr	r2, [pc, #148]	; (8001e28 <HAL_DMA_Abort_IT+0x3e4>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d027      	beq.n	8001de6 <HAL_DMA_Abort_IT+0x3a2>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a24      	ldr	r2, [pc, #144]	; (8001e2c <HAL_DMA_Abort_IT+0x3e8>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d022      	beq.n	8001de6 <HAL_DMA_Abort_IT+0x3a2>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a22      	ldr	r2, [pc, #136]	; (8001e30 <HAL_DMA_Abort_IT+0x3ec>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d01d      	beq.n	8001de6 <HAL_DMA_Abort_IT+0x3a2>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a21      	ldr	r2, [pc, #132]	; (8001e34 <HAL_DMA_Abort_IT+0x3f0>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d018      	beq.n	8001de6 <HAL_DMA_Abort_IT+0x3a2>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a1f      	ldr	r2, [pc, #124]	; (8001e38 <HAL_DMA_Abort_IT+0x3f4>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d013      	beq.n	8001de6 <HAL_DMA_Abort_IT+0x3a2>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a1e      	ldr	r2, [pc, #120]	; (8001e3c <HAL_DMA_Abort_IT+0x3f8>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d00e      	beq.n	8001de6 <HAL_DMA_Abort_IT+0x3a2>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a1c      	ldr	r2, [pc, #112]	; (8001e40 <HAL_DMA_Abort_IT+0x3fc>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d009      	beq.n	8001de6 <HAL_DMA_Abort_IT+0x3a2>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a1b      	ldr	r2, [pc, #108]	; (8001e44 <HAL_DMA_Abort_IT+0x400>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d004      	beq.n	8001de6 <HAL_DMA_Abort_IT+0x3a2>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a19      	ldr	r2, [pc, #100]	; (8001e48 <HAL_DMA_Abort_IT+0x404>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d132      	bne.n	8001e4c <HAL_DMA_Abort_IT+0x408>
 8001de6:	2301      	movs	r3, #1
 8001de8:	e031      	b.n	8001e4e <HAL_DMA_Abort_IT+0x40a>
 8001dea:	bf00      	nop
 8001dec:	40020010 	.word	0x40020010
 8001df0:	40020028 	.word	0x40020028
 8001df4:	40020040 	.word	0x40020040
 8001df8:	40020058 	.word	0x40020058
 8001dfc:	40020070 	.word	0x40020070
 8001e00:	40020088 	.word	0x40020088
 8001e04:	400200a0 	.word	0x400200a0
 8001e08:	400200b8 	.word	0x400200b8
 8001e0c:	40020410 	.word	0x40020410
 8001e10:	40020428 	.word	0x40020428
 8001e14:	40020440 	.word	0x40020440
 8001e18:	40020458 	.word	0x40020458
 8001e1c:	40020470 	.word	0x40020470
 8001e20:	40020488 	.word	0x40020488
 8001e24:	400204a0 	.word	0x400204a0
 8001e28:	400204b8 	.word	0x400204b8
 8001e2c:	58025408 	.word	0x58025408
 8001e30:	5802541c 	.word	0x5802541c
 8001e34:	58025430 	.word	0x58025430
 8001e38:	58025444 	.word	0x58025444
 8001e3c:	58025458 	.word	0x58025458
 8001e40:	5802546c 	.word	0x5802546c
 8001e44:	58025480 	.word	0x58025480
 8001e48:	58025494 	.word	0x58025494
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d028      	beq.n	8001ea4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e60:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e66:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6c:	f003 031f 	and.w	r3, r3, #31
 8001e70:	2201      	movs	r2, #1
 8001e72:	409a      	lsls	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001e80:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00c      	beq.n	8001ea4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e98:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001ea2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop

08001ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b089      	sub	sp, #36	; 0x24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001ede:	4b89      	ldr	r3, [pc, #548]	; (8002104 <HAL_GPIO_Init+0x234>)
 8001ee0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ee2:	e194      	b.n	800220e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	2101      	movs	r1, #1
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 8186 	beq.w	8002208 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 0303 	and.w	r3, r3, #3
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d005      	beq.n	8001f14 <HAL_GPIO_Init+0x44>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d130      	bne.n	8001f76 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	2203      	movs	r2, #3
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4013      	ands	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	091b      	lsrs	r3, r3, #4
 8001f60:	f003 0201 	and.w	r2, r3, #1
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	2b03      	cmp	r3, #3
 8001f80:	d017      	beq.n	8001fb2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4013      	ands	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d123      	bne.n	8002006 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	08da      	lsrs	r2, r3, #3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	3208      	adds	r2, #8
 8001fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	220f      	movs	r2, #15
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	691a      	ldr	r2, [r3, #16]
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	08da      	lsrs	r2, r3, #3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3208      	adds	r2, #8
 8002000:	69b9      	ldr	r1, [r7, #24]
 8002002:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	2203      	movs	r2, #3
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43db      	mvns	r3, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4013      	ands	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f003 0203 	and.w	r2, r3, #3
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4313      	orrs	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 80e0 	beq.w	8002208 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002048:	4b2f      	ldr	r3, [pc, #188]	; (8002108 <HAL_GPIO_Init+0x238>)
 800204a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800204e:	4a2e      	ldr	r2, [pc, #184]	; (8002108 <HAL_GPIO_Init+0x238>)
 8002050:	f043 0302 	orr.w	r3, r3, #2
 8002054:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002058:	4b2b      	ldr	r3, [pc, #172]	; (8002108 <HAL_GPIO_Init+0x238>)
 800205a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002066:	4a29      	ldr	r2, [pc, #164]	; (800210c <HAL_GPIO_Init+0x23c>)
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	089b      	lsrs	r3, r3, #2
 800206c:	3302      	adds	r3, #2
 800206e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002072:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	220f      	movs	r2, #15
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a20      	ldr	r2, [pc, #128]	; (8002110 <HAL_GPIO_Init+0x240>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d052      	beq.n	8002138 <HAL_GPIO_Init+0x268>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a1f      	ldr	r2, [pc, #124]	; (8002114 <HAL_GPIO_Init+0x244>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d031      	beq.n	80020fe <HAL_GPIO_Init+0x22e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a1e      	ldr	r2, [pc, #120]	; (8002118 <HAL_GPIO_Init+0x248>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d02b      	beq.n	80020fa <HAL_GPIO_Init+0x22a>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a1d      	ldr	r2, [pc, #116]	; (800211c <HAL_GPIO_Init+0x24c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d025      	beq.n	80020f6 <HAL_GPIO_Init+0x226>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a1c      	ldr	r2, [pc, #112]	; (8002120 <HAL_GPIO_Init+0x250>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d01f      	beq.n	80020f2 <HAL_GPIO_Init+0x222>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a1b      	ldr	r2, [pc, #108]	; (8002124 <HAL_GPIO_Init+0x254>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d019      	beq.n	80020ee <HAL_GPIO_Init+0x21e>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a1a      	ldr	r2, [pc, #104]	; (8002128 <HAL_GPIO_Init+0x258>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d013      	beq.n	80020ea <HAL_GPIO_Init+0x21a>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a19      	ldr	r2, [pc, #100]	; (800212c <HAL_GPIO_Init+0x25c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d00d      	beq.n	80020e6 <HAL_GPIO_Init+0x216>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a18      	ldr	r2, [pc, #96]	; (8002130 <HAL_GPIO_Init+0x260>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d007      	beq.n	80020e2 <HAL_GPIO_Init+0x212>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a17      	ldr	r2, [pc, #92]	; (8002134 <HAL_GPIO_Init+0x264>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d101      	bne.n	80020de <HAL_GPIO_Init+0x20e>
 80020da:	2309      	movs	r3, #9
 80020dc:	e02d      	b.n	800213a <HAL_GPIO_Init+0x26a>
 80020de:	230a      	movs	r3, #10
 80020e0:	e02b      	b.n	800213a <HAL_GPIO_Init+0x26a>
 80020e2:	2308      	movs	r3, #8
 80020e4:	e029      	b.n	800213a <HAL_GPIO_Init+0x26a>
 80020e6:	2307      	movs	r3, #7
 80020e8:	e027      	b.n	800213a <HAL_GPIO_Init+0x26a>
 80020ea:	2306      	movs	r3, #6
 80020ec:	e025      	b.n	800213a <HAL_GPIO_Init+0x26a>
 80020ee:	2305      	movs	r3, #5
 80020f0:	e023      	b.n	800213a <HAL_GPIO_Init+0x26a>
 80020f2:	2304      	movs	r3, #4
 80020f4:	e021      	b.n	800213a <HAL_GPIO_Init+0x26a>
 80020f6:	2303      	movs	r3, #3
 80020f8:	e01f      	b.n	800213a <HAL_GPIO_Init+0x26a>
 80020fa:	2302      	movs	r3, #2
 80020fc:	e01d      	b.n	800213a <HAL_GPIO_Init+0x26a>
 80020fe:	2301      	movs	r3, #1
 8002100:	e01b      	b.n	800213a <HAL_GPIO_Init+0x26a>
 8002102:	bf00      	nop
 8002104:	58000080 	.word	0x58000080
 8002108:	58024400 	.word	0x58024400
 800210c:	58000400 	.word	0x58000400
 8002110:	58020000 	.word	0x58020000
 8002114:	58020400 	.word	0x58020400
 8002118:	58020800 	.word	0x58020800
 800211c:	58020c00 	.word	0x58020c00
 8002120:	58021000 	.word	0x58021000
 8002124:	58021400 	.word	0x58021400
 8002128:	58021800 	.word	0x58021800
 800212c:	58021c00 	.word	0x58021c00
 8002130:	58022000 	.word	0x58022000
 8002134:	58022400 	.word	0x58022400
 8002138:	2300      	movs	r3, #0
 800213a:	69fa      	ldr	r2, [r7, #28]
 800213c:	f002 0203 	and.w	r2, r2, #3
 8002140:	0092      	lsls	r2, r2, #2
 8002142:	4093      	lsls	r3, r2
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800214a:	4938      	ldr	r1, [pc, #224]	; (800222c <HAL_GPIO_Init+0x35c>)
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	089b      	lsrs	r3, r3, #2
 8002150:	3302      	adds	r3, #2
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	43db      	mvns	r3, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4013      	ands	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800217e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	43db      	mvns	r3, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80021ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	43db      	mvns	r3, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4013      	ands	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	3301      	adds	r3, #1
 800220c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	fa22 f303 	lsr.w	r3, r2, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	f47f ae63 	bne.w	8001ee4 <HAL_GPIO_Init+0x14>
  }
}
 800221e:	bf00      	nop
 8002220:	bf00      	nop
 8002222:	3724      	adds	r7, #36	; 0x24
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	58000400 	.word	0x58000400

08002230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	807b      	strh	r3, [r7, #2]
 800223c:	4613      	mov	r3, r2
 800223e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002240:	787b      	ldrb	r3, [r7, #1]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002246:	887a      	ldrh	r2, [r7, #2]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800224c:	e003      	b.n	8002256 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800224e:	887b      	ldrh	r3, [r7, #2]
 8002250:	041a      	lsls	r2, r3, #16
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	619a      	str	r2, [r3, #24]
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002262:	b480      	push	{r7}
 8002264:	b085      	sub	sp, #20
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	460b      	mov	r3, r1
 800226c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002274:	887a      	ldrh	r2, [r7, #2]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	4013      	ands	r3, r2
 800227a:	041a      	lsls	r2, r3, #16
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	43d9      	mvns	r1, r3
 8002280:	887b      	ldrh	r3, [r7, #2]
 8002282:	400b      	ands	r3, r1
 8002284:	431a      	orrs	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	619a      	str	r2, [r3, #24]
}
 800228a:	bf00      	nop
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
	...

08002298 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80022a0:	4b19      	ldr	r3, [pc, #100]	; (8002308 <HAL_PWREx_ConfigSupply+0x70>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	d00a      	beq.n	80022c2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80022ac:	4b16      	ldr	r3, [pc, #88]	; (8002308 <HAL_PWREx_ConfigSupply+0x70>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d001      	beq.n	80022be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e01f      	b.n	80022fe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	e01d      	b.n	80022fe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80022c2:	4b11      	ldr	r3, [pc, #68]	; (8002308 <HAL_PWREx_ConfigSupply+0x70>)
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	f023 0207 	bic.w	r2, r3, #7
 80022ca:	490f      	ldr	r1, [pc, #60]	; (8002308 <HAL_PWREx_ConfigSupply+0x70>)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80022d2:	f7fe fed5 	bl	8001080 <HAL_GetTick>
 80022d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022d8:	e009      	b.n	80022ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80022da:	f7fe fed1 	bl	8001080 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022e8:	d901      	bls.n	80022ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e007      	b.n	80022fe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <HAL_PWREx_ConfigSupply+0x70>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022fa:	d1ee      	bne.n	80022da <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	58024800 	.word	0x58024800

0800230c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08c      	sub	sp, #48	; 0x30
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d102      	bne.n	8002320 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	f000 bc48 	b.w	8002bb0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 8088 	beq.w	800243e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800232e:	4b99      	ldr	r3, [pc, #612]	; (8002594 <HAL_RCC_OscConfig+0x288>)
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002336:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002338:	4b96      	ldr	r3, [pc, #600]	; (8002594 <HAL_RCC_OscConfig+0x288>)
 800233a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800233e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002340:	2b10      	cmp	r3, #16
 8002342:	d007      	beq.n	8002354 <HAL_RCC_OscConfig+0x48>
 8002344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002346:	2b18      	cmp	r3, #24
 8002348:	d111      	bne.n	800236e <HAL_RCC_OscConfig+0x62>
 800234a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d10c      	bne.n	800236e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002354:	4b8f      	ldr	r3, [pc, #572]	; (8002594 <HAL_RCC_OscConfig+0x288>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d06d      	beq.n	800243c <HAL_RCC_OscConfig+0x130>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d169      	bne.n	800243c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	f000 bc21 	b.w	8002bb0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002376:	d106      	bne.n	8002386 <HAL_RCC_OscConfig+0x7a>
 8002378:	4b86      	ldr	r3, [pc, #536]	; (8002594 <HAL_RCC_OscConfig+0x288>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a85      	ldr	r2, [pc, #532]	; (8002594 <HAL_RCC_OscConfig+0x288>)
 800237e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	e02e      	b.n	80023e4 <HAL_RCC_OscConfig+0xd8>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10c      	bne.n	80023a8 <HAL_RCC_OscConfig+0x9c>
 800238e:	4b81      	ldr	r3, [pc, #516]	; (8002594 <HAL_RCC_OscConfig+0x288>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a80      	ldr	r2, [pc, #512]	; (8002594 <HAL_RCC_OscConfig+0x288>)
 8002394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	4b7e      	ldr	r3, [pc, #504]	; (8002594 <HAL_RCC_OscConfig+0x288>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a7d      	ldr	r2, [pc, #500]	; (8002594 <HAL_RCC_OscConfig+0x288>)
 80023a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	e01d      	b.n	80023e4 <HAL_RCC_OscConfig+0xd8>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b0:	d10c      	bne.n	80023cc <HAL_RCC_OscConfig+0xc0>
 80023b2:	4b78      	ldr	r3, [pc, #480]	; (8002594 <HAL_RCC_OscConfig+0x288>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a77      	ldr	r2, [pc, #476]	; (8002594 <HAL_RCC_OscConfig+0x288>)
 80023b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	4b75      	ldr	r3, [pc, #468]	; (8002594 <HAL_RCC_OscConfig+0x288>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a74      	ldr	r2, [pc, #464]	; (8002594 <HAL_RCC_OscConfig+0x288>)
 80023c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	e00b      	b.n	80023e4 <HAL_RCC_OscConfig+0xd8>
 80023cc:	4b71      	ldr	r3, [pc, #452]	; (8002594 <HAL_RCC_OscConfig+0x288>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a70      	ldr	r2, [pc, #448]	; (8002594 <HAL_RCC_OscConfig+0x288>)
 80023d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d6:	6013      	str	r3, [r2, #0]
 80023d8:	4b6e      	ldr	r3, [pc, #440]	; (8002594 <HAL_RCC_OscConfig+0x288>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a6d      	ldr	r2, [pc, #436]	; (8002594 <HAL_RCC_OscConfig+0x288>)
 80023de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d013      	beq.n	8002414 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ec:	f7fe fe48 	bl	8001080 <HAL_GetTick>
 80023f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f4:	f7fe fe44 	bl	8001080 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b64      	cmp	r3, #100	; 0x64
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e3d4      	b.n	8002bb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002406:	4b63      	ldr	r3, [pc, #396]	; (8002594 <HAL_RCC_OscConfig+0x288>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0f0      	beq.n	80023f4 <HAL_RCC_OscConfig+0xe8>
 8002412:	e014      	b.n	800243e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002414:	f7fe fe34 	bl	8001080 <HAL_GetTick>
 8002418:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800241c:	f7fe fe30 	bl	8001080 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b64      	cmp	r3, #100	; 0x64
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e3c0      	b.n	8002bb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800242e:	4b59      	ldr	r3, [pc, #356]	; (8002594 <HAL_RCC_OscConfig+0x288>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f0      	bne.n	800241c <HAL_RCC_OscConfig+0x110>
 800243a:	e000      	b.n	800243e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800243c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 80ca 	beq.w	80025e0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800244c:	4b51      	ldr	r3, [pc, #324]	; (8002594 <HAL_RCC_OscConfig+0x288>)
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002454:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002456:	4b4f      	ldr	r3, [pc, #316]	; (8002594 <HAL_RCC_OscConfig+0x288>)
 8002458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800245c:	6a3b      	ldr	r3, [r7, #32]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d007      	beq.n	8002472 <HAL_RCC_OscConfig+0x166>
 8002462:	6a3b      	ldr	r3, [r7, #32]
 8002464:	2b18      	cmp	r3, #24
 8002466:	d156      	bne.n	8002516 <HAL_RCC_OscConfig+0x20a>
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d151      	bne.n	8002516 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002472:	4b48      	ldr	r3, [pc, #288]	; (8002594 <HAL_RCC_OscConfig+0x288>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0304 	and.w	r3, r3, #4
 800247a:	2b00      	cmp	r3, #0
 800247c:	d005      	beq.n	800248a <HAL_RCC_OscConfig+0x17e>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e392      	b.n	8002bb0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800248a:	4b42      	ldr	r3, [pc, #264]	; (8002594 <HAL_RCC_OscConfig+0x288>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 0219 	bic.w	r2, r3, #25
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	493f      	ldr	r1, [pc, #252]	; (8002594 <HAL_RCC_OscConfig+0x288>)
 8002498:	4313      	orrs	r3, r2
 800249a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249c:	f7fe fdf0 	bl	8001080 <HAL_GetTick>
 80024a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a4:	f7fe fdec 	bl	8001080 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e37c      	b.n	8002bb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024b6:	4b37      	ldr	r3, [pc, #220]	; (8002594 <HAL_RCC_OscConfig+0x288>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0304 	and.w	r3, r3, #4
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0f0      	beq.n	80024a4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c2:	f7fe fe0d 	bl	80010e0 <HAL_GetREVID>
 80024c6:	4603      	mov	r3, r0
 80024c8:	f241 0203 	movw	r2, #4099	; 0x1003
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d817      	bhi.n	8002500 <HAL_RCC_OscConfig+0x1f4>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	2b40      	cmp	r3, #64	; 0x40
 80024d6:	d108      	bne.n	80024ea <HAL_RCC_OscConfig+0x1de>
 80024d8:	4b2e      	ldr	r3, [pc, #184]	; (8002594 <HAL_RCC_OscConfig+0x288>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80024e0:	4a2c      	ldr	r2, [pc, #176]	; (8002594 <HAL_RCC_OscConfig+0x288>)
 80024e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024e6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024e8:	e07a      	b.n	80025e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ea:	4b2a      	ldr	r3, [pc, #168]	; (8002594 <HAL_RCC_OscConfig+0x288>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	031b      	lsls	r3, r3, #12
 80024f8:	4926      	ldr	r1, [pc, #152]	; (8002594 <HAL_RCC_OscConfig+0x288>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024fe:	e06f      	b.n	80025e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002500:	4b24      	ldr	r3, [pc, #144]	; (8002594 <HAL_RCC_OscConfig+0x288>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	061b      	lsls	r3, r3, #24
 800250e:	4921      	ldr	r1, [pc, #132]	; (8002594 <HAL_RCC_OscConfig+0x288>)
 8002510:	4313      	orrs	r3, r2
 8002512:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002514:	e064      	b.n	80025e0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d047      	beq.n	80025ae <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800251e:	4b1d      	ldr	r3, [pc, #116]	; (8002594 <HAL_RCC_OscConfig+0x288>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f023 0219 	bic.w	r2, r3, #25
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	491a      	ldr	r1, [pc, #104]	; (8002594 <HAL_RCC_OscConfig+0x288>)
 800252c:	4313      	orrs	r3, r2
 800252e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002530:	f7fe fda6 	bl	8001080 <HAL_GetTick>
 8002534:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002538:	f7fe fda2 	bl	8001080 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e332      	b.n	8002bb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800254a:	4b12      	ldr	r3, [pc, #72]	; (8002594 <HAL_RCC_OscConfig+0x288>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0304 	and.w	r3, r3, #4
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002556:	f7fe fdc3 	bl	80010e0 <HAL_GetREVID>
 800255a:	4603      	mov	r3, r0
 800255c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002560:	4293      	cmp	r3, r2
 8002562:	d819      	bhi.n	8002598 <HAL_RCC_OscConfig+0x28c>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	2b40      	cmp	r3, #64	; 0x40
 800256a:	d108      	bne.n	800257e <HAL_RCC_OscConfig+0x272>
 800256c:	4b09      	ldr	r3, [pc, #36]	; (8002594 <HAL_RCC_OscConfig+0x288>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002574:	4a07      	ldr	r2, [pc, #28]	; (8002594 <HAL_RCC_OscConfig+0x288>)
 8002576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800257a:	6053      	str	r3, [r2, #4]
 800257c:	e030      	b.n	80025e0 <HAL_RCC_OscConfig+0x2d4>
 800257e:	4b05      	ldr	r3, [pc, #20]	; (8002594 <HAL_RCC_OscConfig+0x288>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	031b      	lsls	r3, r3, #12
 800258c:	4901      	ldr	r1, [pc, #4]	; (8002594 <HAL_RCC_OscConfig+0x288>)
 800258e:	4313      	orrs	r3, r2
 8002590:	604b      	str	r3, [r1, #4]
 8002592:	e025      	b.n	80025e0 <HAL_RCC_OscConfig+0x2d4>
 8002594:	58024400 	.word	0x58024400
 8002598:	4b9a      	ldr	r3, [pc, #616]	; (8002804 <HAL_RCC_OscConfig+0x4f8>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	061b      	lsls	r3, r3, #24
 80025a6:	4997      	ldr	r1, [pc, #604]	; (8002804 <HAL_RCC_OscConfig+0x4f8>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	604b      	str	r3, [r1, #4]
 80025ac:	e018      	b.n	80025e0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ae:	4b95      	ldr	r3, [pc, #596]	; (8002804 <HAL_RCC_OscConfig+0x4f8>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a94      	ldr	r2, [pc, #592]	; (8002804 <HAL_RCC_OscConfig+0x4f8>)
 80025b4:	f023 0301 	bic.w	r3, r3, #1
 80025b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ba:	f7fe fd61 	bl	8001080 <HAL_GetTick>
 80025be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c2:	f7fe fd5d 	bl	8001080 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e2ed      	b.n	8002bb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025d4:	4b8b      	ldr	r3, [pc, #556]	; (8002804 <HAL_RCC_OscConfig+0x4f8>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f0      	bne.n	80025c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0310 	and.w	r3, r3, #16
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 80a9 	beq.w	8002740 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025ee:	4b85      	ldr	r3, [pc, #532]	; (8002804 <HAL_RCC_OscConfig+0x4f8>)
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025f6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025f8:	4b82      	ldr	r3, [pc, #520]	; (8002804 <HAL_RCC_OscConfig+0x4f8>)
 80025fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	2b08      	cmp	r3, #8
 8002602:	d007      	beq.n	8002614 <HAL_RCC_OscConfig+0x308>
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	2b18      	cmp	r3, #24
 8002608:	d13a      	bne.n	8002680 <HAL_RCC_OscConfig+0x374>
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	2b01      	cmp	r3, #1
 8002612:	d135      	bne.n	8002680 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002614:	4b7b      	ldr	r3, [pc, #492]	; (8002804 <HAL_RCC_OscConfig+0x4f8>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_RCC_OscConfig+0x320>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	2b80      	cmp	r3, #128	; 0x80
 8002626:	d001      	beq.n	800262c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e2c1      	b.n	8002bb0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800262c:	f7fe fd58 	bl	80010e0 <HAL_GetREVID>
 8002630:	4603      	mov	r3, r0
 8002632:	f241 0203 	movw	r2, #4099	; 0x1003
 8002636:	4293      	cmp	r3, r2
 8002638:	d817      	bhi.n	800266a <HAL_RCC_OscConfig+0x35e>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	2b20      	cmp	r3, #32
 8002640:	d108      	bne.n	8002654 <HAL_RCC_OscConfig+0x348>
 8002642:	4b70      	ldr	r3, [pc, #448]	; (8002804 <HAL_RCC_OscConfig+0x4f8>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800264a:	4a6e      	ldr	r2, [pc, #440]	; (8002804 <HAL_RCC_OscConfig+0x4f8>)
 800264c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002650:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002652:	e075      	b.n	8002740 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002654:	4b6b      	ldr	r3, [pc, #428]	; (8002804 <HAL_RCC_OscConfig+0x4f8>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	069b      	lsls	r3, r3, #26
 8002662:	4968      	ldr	r1, [pc, #416]	; (8002804 <HAL_RCC_OscConfig+0x4f8>)
 8002664:	4313      	orrs	r3, r2
 8002666:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002668:	e06a      	b.n	8002740 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800266a:	4b66      	ldr	r3, [pc, #408]	; (8002804 <HAL_RCC_OscConfig+0x4f8>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	061b      	lsls	r3, r3, #24
 8002678:	4962      	ldr	r1, [pc, #392]	; (8002804 <HAL_RCC_OscConfig+0x4f8>)
 800267a:	4313      	orrs	r3, r2
 800267c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800267e:	e05f      	b.n	8002740 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	69db      	ldr	r3, [r3, #28]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d042      	beq.n	800270e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002688:	4b5e      	ldr	r3, [pc, #376]	; (8002804 <HAL_RCC_OscConfig+0x4f8>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a5d      	ldr	r2, [pc, #372]	; (8002804 <HAL_RCC_OscConfig+0x4f8>)
 800268e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002692:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002694:	f7fe fcf4 	bl	8001080 <HAL_GetTick>
 8002698:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800269c:	f7fe fcf0 	bl	8001080 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e280      	b.n	8002bb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026ae:	4b55      	ldr	r3, [pc, #340]	; (8002804 <HAL_RCC_OscConfig+0x4f8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0f0      	beq.n	800269c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026ba:	f7fe fd11 	bl	80010e0 <HAL_GetREVID>
 80026be:	4603      	mov	r3, r0
 80026c0:	f241 0203 	movw	r2, #4099	; 0x1003
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d817      	bhi.n	80026f8 <HAL_RCC_OscConfig+0x3ec>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	2b20      	cmp	r3, #32
 80026ce:	d108      	bne.n	80026e2 <HAL_RCC_OscConfig+0x3d6>
 80026d0:	4b4c      	ldr	r3, [pc, #304]	; (8002804 <HAL_RCC_OscConfig+0x4f8>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80026d8:	4a4a      	ldr	r2, [pc, #296]	; (8002804 <HAL_RCC_OscConfig+0x4f8>)
 80026da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80026de:	6053      	str	r3, [r2, #4]
 80026e0:	e02e      	b.n	8002740 <HAL_RCC_OscConfig+0x434>
 80026e2:	4b48      	ldr	r3, [pc, #288]	; (8002804 <HAL_RCC_OscConfig+0x4f8>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	069b      	lsls	r3, r3, #26
 80026f0:	4944      	ldr	r1, [pc, #272]	; (8002804 <HAL_RCC_OscConfig+0x4f8>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	604b      	str	r3, [r1, #4]
 80026f6:	e023      	b.n	8002740 <HAL_RCC_OscConfig+0x434>
 80026f8:	4b42      	ldr	r3, [pc, #264]	; (8002804 <HAL_RCC_OscConfig+0x4f8>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	061b      	lsls	r3, r3, #24
 8002706:	493f      	ldr	r1, [pc, #252]	; (8002804 <HAL_RCC_OscConfig+0x4f8>)
 8002708:	4313      	orrs	r3, r2
 800270a:	60cb      	str	r3, [r1, #12]
 800270c:	e018      	b.n	8002740 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800270e:	4b3d      	ldr	r3, [pc, #244]	; (8002804 <HAL_RCC_OscConfig+0x4f8>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a3c      	ldr	r2, [pc, #240]	; (8002804 <HAL_RCC_OscConfig+0x4f8>)
 8002714:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002718:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271a:	f7fe fcb1 	bl	8001080 <HAL_GetTick>
 800271e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002722:	f7fe fcad 	bl	8001080 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e23d      	b.n	8002bb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002734:	4b33      	ldr	r3, [pc, #204]	; (8002804 <HAL_RCC_OscConfig+0x4f8>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1f0      	bne.n	8002722 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0308 	and.w	r3, r3, #8
 8002748:	2b00      	cmp	r3, #0
 800274a:	d036      	beq.n	80027ba <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d019      	beq.n	8002788 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002754:	4b2b      	ldr	r3, [pc, #172]	; (8002804 <HAL_RCC_OscConfig+0x4f8>)
 8002756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002758:	4a2a      	ldr	r2, [pc, #168]	; (8002804 <HAL_RCC_OscConfig+0x4f8>)
 800275a:	f043 0301 	orr.w	r3, r3, #1
 800275e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002760:	f7fe fc8e 	bl	8001080 <HAL_GetTick>
 8002764:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002768:	f7fe fc8a 	bl	8001080 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e21a      	b.n	8002bb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800277a:	4b22      	ldr	r3, [pc, #136]	; (8002804 <HAL_RCC_OscConfig+0x4f8>)
 800277c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0f0      	beq.n	8002768 <HAL_RCC_OscConfig+0x45c>
 8002786:	e018      	b.n	80027ba <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002788:	4b1e      	ldr	r3, [pc, #120]	; (8002804 <HAL_RCC_OscConfig+0x4f8>)
 800278a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800278c:	4a1d      	ldr	r2, [pc, #116]	; (8002804 <HAL_RCC_OscConfig+0x4f8>)
 800278e:	f023 0301 	bic.w	r3, r3, #1
 8002792:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002794:	f7fe fc74 	bl	8001080 <HAL_GetTick>
 8002798:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800279c:	f7fe fc70 	bl	8001080 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e200      	b.n	8002bb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027ae:	4b15      	ldr	r3, [pc, #84]	; (8002804 <HAL_RCC_OscConfig+0x4f8>)
 80027b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0320 	and.w	r3, r3, #32
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d039      	beq.n	800283a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d01c      	beq.n	8002808 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027ce:	4b0d      	ldr	r3, [pc, #52]	; (8002804 <HAL_RCC_OscConfig+0x4f8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a0c      	ldr	r2, [pc, #48]	; (8002804 <HAL_RCC_OscConfig+0x4f8>)
 80027d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027da:	f7fe fc51 	bl	8001080 <HAL_GetTick>
 80027de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027e2:	f7fe fc4d 	bl	8001080 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e1dd      	b.n	8002bb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027f4:	4b03      	ldr	r3, [pc, #12]	; (8002804 <HAL_RCC_OscConfig+0x4f8>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0f0      	beq.n	80027e2 <HAL_RCC_OscConfig+0x4d6>
 8002800:	e01b      	b.n	800283a <HAL_RCC_OscConfig+0x52e>
 8002802:	bf00      	nop
 8002804:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002808:	4b9b      	ldr	r3, [pc, #620]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a9a      	ldr	r2, [pc, #616]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 800280e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002812:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002814:	f7fe fc34 	bl	8001080 <HAL_GetTick>
 8002818:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800281c:	f7fe fc30 	bl	8001080 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e1c0      	b.n	8002bb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800282e:	4b92      	ldr	r3, [pc, #584]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0304 	and.w	r3, r3, #4
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 8081 	beq.w	800294a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002848:	4b8c      	ldr	r3, [pc, #560]	; (8002a7c <HAL_RCC_OscConfig+0x770>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a8b      	ldr	r2, [pc, #556]	; (8002a7c <HAL_RCC_OscConfig+0x770>)
 800284e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002852:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002854:	f7fe fc14 	bl	8001080 <HAL_GetTick>
 8002858:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800285c:	f7fe fc10 	bl	8001080 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b64      	cmp	r3, #100	; 0x64
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e1a0      	b.n	8002bb0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800286e:	4b83      	ldr	r3, [pc, #524]	; (8002a7c <HAL_RCC_OscConfig+0x770>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0f0      	beq.n	800285c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d106      	bne.n	8002890 <HAL_RCC_OscConfig+0x584>
 8002882:	4b7d      	ldr	r3, [pc, #500]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 8002884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002886:	4a7c      	ldr	r2, [pc, #496]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	6713      	str	r3, [r2, #112]	; 0x70
 800288e:	e02d      	b.n	80028ec <HAL_RCC_OscConfig+0x5e0>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10c      	bne.n	80028b2 <HAL_RCC_OscConfig+0x5a6>
 8002898:	4b77      	ldr	r3, [pc, #476]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 800289a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289c:	4a76      	ldr	r2, [pc, #472]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 800289e:	f023 0301 	bic.w	r3, r3, #1
 80028a2:	6713      	str	r3, [r2, #112]	; 0x70
 80028a4:	4b74      	ldr	r3, [pc, #464]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 80028a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a8:	4a73      	ldr	r2, [pc, #460]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 80028aa:	f023 0304 	bic.w	r3, r3, #4
 80028ae:	6713      	str	r3, [r2, #112]	; 0x70
 80028b0:	e01c      	b.n	80028ec <HAL_RCC_OscConfig+0x5e0>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	2b05      	cmp	r3, #5
 80028b8:	d10c      	bne.n	80028d4 <HAL_RCC_OscConfig+0x5c8>
 80028ba:	4b6f      	ldr	r3, [pc, #444]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 80028bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028be:	4a6e      	ldr	r2, [pc, #440]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 80028c0:	f043 0304 	orr.w	r3, r3, #4
 80028c4:	6713      	str	r3, [r2, #112]	; 0x70
 80028c6:	4b6c      	ldr	r3, [pc, #432]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 80028c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ca:	4a6b      	ldr	r2, [pc, #428]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	6713      	str	r3, [r2, #112]	; 0x70
 80028d2:	e00b      	b.n	80028ec <HAL_RCC_OscConfig+0x5e0>
 80028d4:	4b68      	ldr	r3, [pc, #416]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 80028d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d8:	4a67      	ldr	r2, [pc, #412]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 80028da:	f023 0301 	bic.w	r3, r3, #1
 80028de:	6713      	str	r3, [r2, #112]	; 0x70
 80028e0:	4b65      	ldr	r3, [pc, #404]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 80028e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e4:	4a64      	ldr	r2, [pc, #400]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 80028e6:	f023 0304 	bic.w	r3, r3, #4
 80028ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d015      	beq.n	8002920 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f4:	f7fe fbc4 	bl	8001080 <HAL_GetTick>
 80028f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028fa:	e00a      	b.n	8002912 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028fc:	f7fe fbc0 	bl	8001080 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	f241 3288 	movw	r2, #5000	; 0x1388
 800290a:	4293      	cmp	r3, r2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e14e      	b.n	8002bb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002912:	4b59      	ldr	r3, [pc, #356]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 8002914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0ee      	beq.n	80028fc <HAL_RCC_OscConfig+0x5f0>
 800291e:	e014      	b.n	800294a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002920:	f7fe fbae 	bl	8001080 <HAL_GetTick>
 8002924:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002926:	e00a      	b.n	800293e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002928:	f7fe fbaa 	bl	8001080 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	f241 3288 	movw	r2, #5000	; 0x1388
 8002936:	4293      	cmp	r3, r2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e138      	b.n	8002bb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800293e:	4b4e      	ldr	r3, [pc, #312]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 8002940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1ee      	bne.n	8002928 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 812d 	beq.w	8002bae <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002954:	4b48      	ldr	r3, [pc, #288]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800295c:	2b18      	cmp	r3, #24
 800295e:	f000 80bd 	beq.w	8002adc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	2b02      	cmp	r3, #2
 8002968:	f040 809e 	bne.w	8002aa8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800296c:	4b42      	ldr	r3, [pc, #264]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a41      	ldr	r2, [pc, #260]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 8002972:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002976:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002978:	f7fe fb82 	bl	8001080 <HAL_GetTick>
 800297c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002980:	f7fe fb7e 	bl	8001080 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e10e      	b.n	8002bb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002992:	4b39      	ldr	r3, [pc, #228]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800299e:	4b36      	ldr	r3, [pc, #216]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 80029a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029a2:	4b37      	ldr	r3, [pc, #220]	; (8002a80 <HAL_RCC_OscConfig+0x774>)
 80029a4:	4013      	ands	r3, r2
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80029ae:	0112      	lsls	r2, r2, #4
 80029b0:	430a      	orrs	r2, r1
 80029b2:	4931      	ldr	r1, [pc, #196]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	628b      	str	r3, [r1, #40]	; 0x28
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029bc:	3b01      	subs	r3, #1
 80029be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c6:	3b01      	subs	r3, #1
 80029c8:	025b      	lsls	r3, r3, #9
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	431a      	orrs	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d2:	3b01      	subs	r3, #1
 80029d4:	041b      	lsls	r3, r3, #16
 80029d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e0:	3b01      	subs	r3, #1
 80029e2:	061b      	lsls	r3, r3, #24
 80029e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80029e8:	4923      	ldr	r1, [pc, #140]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80029ee:	4b22      	ldr	r3, [pc, #136]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 80029f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f2:	4a21      	ldr	r2, [pc, #132]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 80029f4:	f023 0301 	bic.w	r3, r3, #1
 80029f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80029fa:	4b1f      	ldr	r3, [pc, #124]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 80029fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029fe:	4b21      	ldr	r3, [pc, #132]	; (8002a84 <HAL_RCC_OscConfig+0x778>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a06:	00d2      	lsls	r2, r2, #3
 8002a08:	491b      	ldr	r1, [pc, #108]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002a0e:	4b1a      	ldr	r3, [pc, #104]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 8002a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a12:	f023 020c 	bic.w	r2, r3, #12
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	4917      	ldr	r1, [pc, #92]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002a20:	4b15      	ldr	r3, [pc, #84]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 8002a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a24:	f023 0202 	bic.w	r2, r3, #2
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2c:	4912      	ldr	r1, [pc, #72]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a32:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 8002a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a36:	4a10      	ldr	r2, [pc, #64]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 8002a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a3e:	4b0e      	ldr	r3, [pc, #56]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 8002a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a42:	4a0d      	ldr	r2, [pc, #52]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 8002a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002a4a:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 8002a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4e:	4a0a      	ldr	r2, [pc, #40]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 8002a50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002a56:	4b08      	ldr	r3, [pc, #32]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 8002a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5a:	4a07      	ldr	r2, [pc, #28]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a62:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a04      	ldr	r2, [pc, #16]	; (8002a78 <HAL_RCC_OscConfig+0x76c>)
 8002a68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6e:	f7fe fb07 	bl	8001080 <HAL_GetTick>
 8002a72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a74:	e011      	b.n	8002a9a <HAL_RCC_OscConfig+0x78e>
 8002a76:	bf00      	nop
 8002a78:	58024400 	.word	0x58024400
 8002a7c:	58024800 	.word	0x58024800
 8002a80:	fffffc0c 	.word	0xfffffc0c
 8002a84:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a88:	f7fe fafa 	bl	8001080 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e08a      	b.n	8002bb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a9a:	4b47      	ldr	r3, [pc, #284]	; (8002bb8 <HAL_RCC_OscConfig+0x8ac>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0f0      	beq.n	8002a88 <HAL_RCC_OscConfig+0x77c>
 8002aa6:	e082      	b.n	8002bae <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa8:	4b43      	ldr	r3, [pc, #268]	; (8002bb8 <HAL_RCC_OscConfig+0x8ac>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a42      	ldr	r2, [pc, #264]	; (8002bb8 <HAL_RCC_OscConfig+0x8ac>)
 8002aae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab4:	f7fe fae4 	bl	8001080 <HAL_GetTick>
 8002ab8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002abc:	f7fe fae0 	bl	8001080 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e070      	b.n	8002bb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ace:	4b3a      	ldr	r3, [pc, #232]	; (8002bb8 <HAL_RCC_OscConfig+0x8ac>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f0      	bne.n	8002abc <HAL_RCC_OscConfig+0x7b0>
 8002ada:	e068      	b.n	8002bae <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002adc:	4b36      	ldr	r3, [pc, #216]	; (8002bb8 <HAL_RCC_OscConfig+0x8ac>)
 8002ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002ae2:	4b35      	ldr	r3, [pc, #212]	; (8002bb8 <HAL_RCC_OscConfig+0x8ac>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d031      	beq.n	8002b54 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f003 0203 	and.w	r2, r3, #3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d12a      	bne.n	8002b54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	091b      	lsrs	r3, r3, #4
 8002b02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d122      	bne.n	8002b54 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d11a      	bne.n	8002b54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	0a5b      	lsrs	r3, r3, #9
 8002b22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b2a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d111      	bne.n	8002b54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	0c1b      	lsrs	r3, r3, #16
 8002b34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d108      	bne.n	8002b54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	0e1b      	lsrs	r3, r3, #24
 8002b46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d001      	beq.n	8002b58 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e02b      	b.n	8002bb0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002b58:	4b17      	ldr	r3, [pc, #92]	; (8002bb8 <HAL_RCC_OscConfig+0x8ac>)
 8002b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b5c:	08db      	lsrs	r3, r3, #3
 8002b5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b62:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d01f      	beq.n	8002bae <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002b6e:	4b12      	ldr	r3, [pc, #72]	; (8002bb8 <HAL_RCC_OscConfig+0x8ac>)
 8002b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b72:	4a11      	ldr	r2, [pc, #68]	; (8002bb8 <HAL_RCC_OscConfig+0x8ac>)
 8002b74:	f023 0301 	bic.w	r3, r3, #1
 8002b78:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b7a:	f7fe fa81 	bl	8001080 <HAL_GetTick>
 8002b7e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002b80:	bf00      	nop
 8002b82:	f7fe fa7d 	bl	8001080 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d0f9      	beq.n	8002b82 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b8e:	4b0a      	ldr	r3, [pc, #40]	; (8002bb8 <HAL_RCC_OscConfig+0x8ac>)
 8002b90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b92:	4b0a      	ldr	r3, [pc, #40]	; (8002bbc <HAL_RCC_OscConfig+0x8b0>)
 8002b94:	4013      	ands	r3, r2
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b9a:	00d2      	lsls	r2, r2, #3
 8002b9c:	4906      	ldr	r1, [pc, #24]	; (8002bb8 <HAL_RCC_OscConfig+0x8ac>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002ba2:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <HAL_RCC_OscConfig+0x8ac>)
 8002ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba6:	4a04      	ldr	r2, [pc, #16]	; (8002bb8 <HAL_RCC_OscConfig+0x8ac>)
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3730      	adds	r7, #48	; 0x30
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	58024400 	.word	0x58024400
 8002bbc:	ffff0007 	.word	0xffff0007

08002bc0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e19c      	b.n	8002f0e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd4:	4b8a      	ldr	r3, [pc, #552]	; (8002e00 <HAL_RCC_ClockConfig+0x240>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 030f 	and.w	r3, r3, #15
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d910      	bls.n	8002c04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be2:	4b87      	ldr	r3, [pc, #540]	; (8002e00 <HAL_RCC_ClockConfig+0x240>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f023 020f 	bic.w	r2, r3, #15
 8002bea:	4985      	ldr	r1, [pc, #532]	; (8002e00 <HAL_RCC_ClockConfig+0x240>)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf2:	4b83      	ldr	r3, [pc, #524]	; (8002e00 <HAL_RCC_ClockConfig+0x240>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d001      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e184      	b.n	8002f0e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d010      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691a      	ldr	r2, [r3, #16]
 8002c14:	4b7b      	ldr	r3, [pc, #492]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d908      	bls.n	8002c32 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c20:	4b78      	ldr	r3, [pc, #480]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	4975      	ldr	r1, [pc, #468]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d010      	beq.n	8002c60 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	695a      	ldr	r2, [r3, #20]
 8002c42:	4b70      	ldr	r3, [pc, #448]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d908      	bls.n	8002c60 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c4e:	4b6d      	ldr	r3, [pc, #436]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	496a      	ldr	r1, [pc, #424]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0310 	and.w	r3, r3, #16
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d010      	beq.n	8002c8e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	699a      	ldr	r2, [r3, #24]
 8002c70:	4b64      	ldr	r3, [pc, #400]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002c72:	69db      	ldr	r3, [r3, #28]
 8002c74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d908      	bls.n	8002c8e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c7c:	4b61      	ldr	r3, [pc, #388]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002c7e:	69db      	ldr	r3, [r3, #28]
 8002c80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	495e      	ldr	r1, [pc, #376]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0320 	and.w	r3, r3, #32
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d010      	beq.n	8002cbc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69da      	ldr	r2, [r3, #28]
 8002c9e:	4b59      	ldr	r3, [pc, #356]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d908      	bls.n	8002cbc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002caa:	4b56      	ldr	r3, [pc, #344]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	4953      	ldr	r1, [pc, #332]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d010      	beq.n	8002cea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68da      	ldr	r2, [r3, #12]
 8002ccc:	4b4d      	ldr	r3, [pc, #308]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	f003 030f 	and.w	r3, r3, #15
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d908      	bls.n	8002cea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd8:	4b4a      	ldr	r3, [pc, #296]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	f023 020f 	bic.w	r2, r3, #15
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	4947      	ldr	r1, [pc, #284]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d055      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002cf6:	4b43      	ldr	r3, [pc, #268]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	4940      	ldr	r1, [pc, #256]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d107      	bne.n	8002d20 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d10:	4b3c      	ldr	r3, [pc, #240]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d121      	bne.n	8002d60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e0f6      	b.n	8002f0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	d107      	bne.n	8002d38 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d28:	4b36      	ldr	r3, [pc, #216]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d115      	bne.n	8002d60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e0ea      	b.n	8002f0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d107      	bne.n	8002d50 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d40:	4b30      	ldr	r3, [pc, #192]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d109      	bne.n	8002d60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e0de      	b.n	8002f0e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d50:	4b2c      	ldr	r3, [pc, #176]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e0d6      	b.n	8002f0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d60:	4b28      	ldr	r3, [pc, #160]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	f023 0207 	bic.w	r2, r3, #7
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	4925      	ldr	r1, [pc, #148]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d72:	f7fe f985 	bl	8001080 <HAL_GetTick>
 8002d76:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d78:	e00a      	b.n	8002d90 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d7a:	f7fe f981 	bl	8001080 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e0be      	b.n	8002f0e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d90:	4b1c      	ldr	r3, [pc, #112]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d1eb      	bne.n	8002d7a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d010      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	4b14      	ldr	r3, [pc, #80]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d208      	bcs.n	8002dd0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dbe:	4b11      	ldr	r3, [pc, #68]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	f023 020f 	bic.w	r2, r3, #15
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	490e      	ldr	r1, [pc, #56]	; (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <HAL_RCC_ClockConfig+0x240>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 030f 	and.w	r3, r3, #15
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d214      	bcs.n	8002e08 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dde:	4b08      	ldr	r3, [pc, #32]	; (8002e00 <HAL_RCC_ClockConfig+0x240>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f023 020f 	bic.w	r2, r3, #15
 8002de6:	4906      	ldr	r1, [pc, #24]	; (8002e00 <HAL_RCC_ClockConfig+0x240>)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dee:	4b04      	ldr	r3, [pc, #16]	; (8002e00 <HAL_RCC_ClockConfig+0x240>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d005      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e086      	b.n	8002f0e <HAL_RCC_ClockConfig+0x34e>
 8002e00:	52002000 	.word	0x52002000
 8002e04:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d010      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691a      	ldr	r2, [r3, #16]
 8002e18:	4b3f      	ldr	r3, [pc, #252]	; (8002f18 <HAL_RCC_ClockConfig+0x358>)
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d208      	bcs.n	8002e36 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e24:	4b3c      	ldr	r3, [pc, #240]	; (8002f18 <HAL_RCC_ClockConfig+0x358>)
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	4939      	ldr	r1, [pc, #228]	; (8002f18 <HAL_RCC_ClockConfig+0x358>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d010      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	695a      	ldr	r2, [r3, #20]
 8002e46:	4b34      	ldr	r3, [pc, #208]	; (8002f18 <HAL_RCC_ClockConfig+0x358>)
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d208      	bcs.n	8002e64 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e52:	4b31      	ldr	r3, [pc, #196]	; (8002f18 <HAL_RCC_ClockConfig+0x358>)
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	492e      	ldr	r1, [pc, #184]	; (8002f18 <HAL_RCC_ClockConfig+0x358>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0310 	and.w	r3, r3, #16
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d010      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	699a      	ldr	r2, [r3, #24]
 8002e74:	4b28      	ldr	r3, [pc, #160]	; (8002f18 <HAL_RCC_ClockConfig+0x358>)
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d208      	bcs.n	8002e92 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e80:	4b25      	ldr	r3, [pc, #148]	; (8002f18 <HAL_RCC_ClockConfig+0x358>)
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	4922      	ldr	r1, [pc, #136]	; (8002f18 <HAL_RCC_ClockConfig+0x358>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d010      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69da      	ldr	r2, [r3, #28]
 8002ea2:	4b1d      	ldr	r3, [pc, #116]	; (8002f18 <HAL_RCC_ClockConfig+0x358>)
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d208      	bcs.n	8002ec0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002eae:	4b1a      	ldr	r3, [pc, #104]	; (8002f18 <HAL_RCC_ClockConfig+0x358>)
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	4917      	ldr	r1, [pc, #92]	; (8002f18 <HAL_RCC_ClockConfig+0x358>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ec0:	f000 f834 	bl	8002f2c <HAL_RCC_GetSysClockFreq>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	4b14      	ldr	r3, [pc, #80]	; (8002f18 <HAL_RCC_ClockConfig+0x358>)
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	0a1b      	lsrs	r3, r3, #8
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	4912      	ldr	r1, [pc, #72]	; (8002f1c <HAL_RCC_ClockConfig+0x35c>)
 8002ed2:	5ccb      	ldrb	r3, [r1, r3]
 8002ed4:	f003 031f 	and.w	r3, r3, #31
 8002ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8002edc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ede:	4b0e      	ldr	r3, [pc, #56]	; (8002f18 <HAL_RCC_ClockConfig+0x358>)
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	4a0d      	ldr	r2, [pc, #52]	; (8002f1c <HAL_RCC_ClockConfig+0x35c>)
 8002ee8:	5cd3      	ldrb	r3, [r2, r3]
 8002eea:	f003 031f 	and.w	r3, r3, #31
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef4:	4a0a      	ldr	r2, [pc, #40]	; (8002f20 <HAL_RCC_ClockConfig+0x360>)
 8002ef6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ef8:	4a0a      	ldr	r2, [pc, #40]	; (8002f24 <HAL_RCC_ClockConfig+0x364>)
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002efe:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <HAL_RCC_ClockConfig+0x368>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fe f872 	bl	8000fec <HAL_InitTick>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	58024400 	.word	0x58024400
 8002f1c:	080088b8 	.word	0x080088b8
 8002f20:	24000004 	.word	0x24000004
 8002f24:	24000000 	.word	0x24000000
 8002f28:	24000008 	.word	0x24000008

08002f2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b089      	sub	sp, #36	; 0x24
 8002f30:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f32:	4bb3      	ldr	r3, [pc, #716]	; (8003200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f3a:	2b18      	cmp	r3, #24
 8002f3c:	f200 8155 	bhi.w	80031ea <HAL_RCC_GetSysClockFreq+0x2be>
 8002f40:	a201      	add	r2, pc, #4	; (adr r2, 8002f48 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f46:	bf00      	nop
 8002f48:	08002fad 	.word	0x08002fad
 8002f4c:	080031eb 	.word	0x080031eb
 8002f50:	080031eb 	.word	0x080031eb
 8002f54:	080031eb 	.word	0x080031eb
 8002f58:	080031eb 	.word	0x080031eb
 8002f5c:	080031eb 	.word	0x080031eb
 8002f60:	080031eb 	.word	0x080031eb
 8002f64:	080031eb 	.word	0x080031eb
 8002f68:	08002fd3 	.word	0x08002fd3
 8002f6c:	080031eb 	.word	0x080031eb
 8002f70:	080031eb 	.word	0x080031eb
 8002f74:	080031eb 	.word	0x080031eb
 8002f78:	080031eb 	.word	0x080031eb
 8002f7c:	080031eb 	.word	0x080031eb
 8002f80:	080031eb 	.word	0x080031eb
 8002f84:	080031eb 	.word	0x080031eb
 8002f88:	08002fd9 	.word	0x08002fd9
 8002f8c:	080031eb 	.word	0x080031eb
 8002f90:	080031eb 	.word	0x080031eb
 8002f94:	080031eb 	.word	0x080031eb
 8002f98:	080031eb 	.word	0x080031eb
 8002f9c:	080031eb 	.word	0x080031eb
 8002fa0:	080031eb 	.word	0x080031eb
 8002fa4:	080031eb 	.word	0x080031eb
 8002fa8:	08002fdf 	.word	0x08002fdf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fac:	4b94      	ldr	r3, [pc, #592]	; (8003200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0320 	and.w	r3, r3, #32
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d009      	beq.n	8002fcc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002fb8:	4b91      	ldr	r3, [pc, #580]	; (8003200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	08db      	lsrs	r3, r3, #3
 8002fbe:	f003 0303 	and.w	r3, r3, #3
 8002fc2:	4a90      	ldr	r2, [pc, #576]	; (8003204 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002fca:	e111      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002fcc:	4b8d      	ldr	r3, [pc, #564]	; (8003204 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fce:	61bb      	str	r3, [r7, #24]
      break;
 8002fd0:	e10e      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002fd2:	4b8d      	ldr	r3, [pc, #564]	; (8003208 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002fd4:	61bb      	str	r3, [r7, #24]
      break;
 8002fd6:	e10b      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002fd8:	4b8c      	ldr	r3, [pc, #560]	; (800320c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002fda:	61bb      	str	r3, [r7, #24]
      break;
 8002fdc:	e108      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002fde:	4b88      	ldr	r3, [pc, #544]	; (8003200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002fe8:	4b85      	ldr	r3, [pc, #532]	; (8003200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fec:	091b      	lsrs	r3, r3, #4
 8002fee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ff2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002ff4:	4b82      	ldr	r3, [pc, #520]	; (8003200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002ffe:	4b80      	ldr	r3, [pc, #512]	; (8003200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003002:	08db      	lsrs	r3, r3, #3
 8003004:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	fb02 f303 	mul.w	r3, r2, r3
 800300e:	ee07 3a90 	vmov	s15, r3
 8003012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003016:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 80e1 	beq.w	80031e4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2b02      	cmp	r3, #2
 8003026:	f000 8083 	beq.w	8003130 <HAL_RCC_GetSysClockFreq+0x204>
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	2b02      	cmp	r3, #2
 800302e:	f200 80a1 	bhi.w	8003174 <HAL_RCC_GetSysClockFreq+0x248>
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_RCC_GetSysClockFreq+0x114>
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d056      	beq.n	80030ec <HAL_RCC_GetSysClockFreq+0x1c0>
 800303e:	e099      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003040:	4b6f      	ldr	r3, [pc, #444]	; (8003200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0320 	and.w	r3, r3, #32
 8003048:	2b00      	cmp	r3, #0
 800304a:	d02d      	beq.n	80030a8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800304c:	4b6c      	ldr	r3, [pc, #432]	; (8003200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	08db      	lsrs	r3, r3, #3
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	4a6b      	ldr	r2, [pc, #428]	; (8003204 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003058:	fa22 f303 	lsr.w	r3, r2, r3
 800305c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	ee07 3a90 	vmov	s15, r3
 8003064:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	ee07 3a90 	vmov	s15, r3
 800306e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003076:	4b62      	ldr	r3, [pc, #392]	; (8003200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800307e:	ee07 3a90 	vmov	s15, r3
 8003082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003086:	ed97 6a02 	vldr	s12, [r7, #8]
 800308a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003210 <HAL_RCC_GetSysClockFreq+0x2e4>
 800308e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800309a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800309e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030a2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80030a6:	e087      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	ee07 3a90 	vmov	s15, r3
 80030ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030b2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003214 <HAL_RCC_GetSysClockFreq+0x2e8>
 80030b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030ba:	4b51      	ldr	r3, [pc, #324]	; (8003200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030c2:	ee07 3a90 	vmov	s15, r3
 80030c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80030ce:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003210 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030ea:	e065      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	ee07 3a90 	vmov	s15, r3
 80030f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030f6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003218 <HAL_RCC_GetSysClockFreq+0x2ec>
 80030fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030fe:	4b40      	ldr	r3, [pc, #256]	; (8003200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003106:	ee07 3a90 	vmov	s15, r3
 800310a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800310e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003112:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003210 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800311a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800311e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800312a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800312e:	e043      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	ee07 3a90 	vmov	s15, r3
 8003136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800313a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800321c <HAL_RCC_GetSysClockFreq+0x2f0>
 800313e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003142:	4b2f      	ldr	r3, [pc, #188]	; (8003200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800314a:	ee07 3a90 	vmov	s15, r3
 800314e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003152:	ed97 6a02 	vldr	s12, [r7, #8]
 8003156:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003210 <HAL_RCC_GetSysClockFreq+0x2e4>
 800315a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800315e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800316a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800316e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003172:	e021      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	ee07 3a90 	vmov	s15, r3
 800317a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800317e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003218 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003186:	4b1e      	ldr	r3, [pc, #120]	; (8003200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800318e:	ee07 3a90 	vmov	s15, r3
 8003192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003196:	ed97 6a02 	vldr	s12, [r7, #8]
 800319a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003210 <HAL_RCC_GetSysClockFreq+0x2e4>
 800319e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031b6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80031b8:	4b11      	ldr	r3, [pc, #68]	; (8003200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031bc:	0a5b      	lsrs	r3, r3, #9
 80031be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031c2:	3301      	adds	r3, #1
 80031c4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	ee07 3a90 	vmov	s15, r3
 80031cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80031d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031dc:	ee17 3a90 	vmov	r3, s15
 80031e0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80031e2:	e005      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	61bb      	str	r3, [r7, #24]
      break;
 80031e8:	e002      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80031ea:	4b07      	ldr	r3, [pc, #28]	; (8003208 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031ec:	61bb      	str	r3, [r7, #24]
      break;
 80031ee:	bf00      	nop
  }

  return sysclockfreq;
 80031f0:	69bb      	ldr	r3, [r7, #24]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3724      	adds	r7, #36	; 0x24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	58024400 	.word	0x58024400
 8003204:	03d09000 	.word	0x03d09000
 8003208:	003d0900 	.word	0x003d0900
 800320c:	017d7840 	.word	0x017d7840
 8003210:	46000000 	.word	0x46000000
 8003214:	4c742400 	.word	0x4c742400
 8003218:	4a742400 	.word	0x4a742400
 800321c:	4bbebc20 	.word	0x4bbebc20

08003220 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003226:	f7ff fe81 	bl	8002f2c <HAL_RCC_GetSysClockFreq>
 800322a:	4602      	mov	r2, r0
 800322c:	4b10      	ldr	r3, [pc, #64]	; (8003270 <HAL_RCC_GetHCLKFreq+0x50>)
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	0a1b      	lsrs	r3, r3, #8
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	490f      	ldr	r1, [pc, #60]	; (8003274 <HAL_RCC_GetHCLKFreq+0x54>)
 8003238:	5ccb      	ldrb	r3, [r1, r3]
 800323a:	f003 031f 	and.w	r3, r3, #31
 800323e:	fa22 f303 	lsr.w	r3, r2, r3
 8003242:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003244:	4b0a      	ldr	r3, [pc, #40]	; (8003270 <HAL_RCC_GetHCLKFreq+0x50>)
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	4a09      	ldr	r2, [pc, #36]	; (8003274 <HAL_RCC_GetHCLKFreq+0x54>)
 800324e:	5cd3      	ldrb	r3, [r2, r3]
 8003250:	f003 031f 	and.w	r3, r3, #31
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	fa22 f303 	lsr.w	r3, r2, r3
 800325a:	4a07      	ldr	r2, [pc, #28]	; (8003278 <HAL_RCC_GetHCLKFreq+0x58>)
 800325c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800325e:	4a07      	ldr	r2, [pc, #28]	; (800327c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003264:	4b04      	ldr	r3, [pc, #16]	; (8003278 <HAL_RCC_GetHCLKFreq+0x58>)
 8003266:	681b      	ldr	r3, [r3, #0]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	58024400 	.word	0x58024400
 8003274:	080088b8 	.word	0x080088b8
 8003278:	24000004 	.word	0x24000004
 800327c:	24000000 	.word	0x24000000

08003280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003284:	f7ff ffcc 	bl	8003220 <HAL_RCC_GetHCLKFreq>
 8003288:	4602      	mov	r2, r0
 800328a:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	091b      	lsrs	r3, r3, #4
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	4904      	ldr	r1, [pc, #16]	; (80032a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003296:	5ccb      	ldrb	r3, [r1, r3]
 8003298:	f003 031f 	and.w	r3, r3, #31
 800329c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	58024400 	.word	0x58024400
 80032a8:	080088b8 	.word	0x080088b8

080032ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80032b0:	f7ff ffb6 	bl	8003220 <HAL_RCC_GetHCLKFreq>
 80032b4:	4602      	mov	r2, r0
 80032b6:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	0a1b      	lsrs	r3, r3, #8
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	4904      	ldr	r1, [pc, #16]	; (80032d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032c2:	5ccb      	ldrb	r3, [r1, r3]
 80032c4:	f003 031f 	and.w	r3, r3, #31
 80032c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	58024400 	.word	0x58024400
 80032d4:	080088b8 	.word	0x080088b8

080032d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032dc:	b0ca      	sub	sp, #296	; 0x128
 80032de:	af00      	add	r7, sp, #0
 80032e0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032e4:	2300      	movs	r3, #0
 80032e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032ea:	2300      	movs	r3, #0
 80032ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80032fc:	2500      	movs	r5, #0
 80032fe:	ea54 0305 	orrs.w	r3, r4, r5
 8003302:	d049      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003304:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003308:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800330a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800330e:	d02f      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003310:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003314:	d828      	bhi.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003316:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800331a:	d01a      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800331c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003320:	d822      	bhi.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003326:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800332a:	d007      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800332c:	e01c      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800332e:	4bb8      	ldr	r3, [pc, #736]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003332:	4ab7      	ldr	r2, [pc, #732]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003338:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800333a:	e01a      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800333c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003340:	3308      	adds	r3, #8
 8003342:	2102      	movs	r1, #2
 8003344:	4618      	mov	r0, r3
 8003346:	f001 fc8f 	bl	8004c68 <RCCEx_PLL2_Config>
 800334a:	4603      	mov	r3, r0
 800334c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003350:	e00f      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003356:	3328      	adds	r3, #40	; 0x28
 8003358:	2102      	movs	r1, #2
 800335a:	4618      	mov	r0, r3
 800335c:	f001 fd36 	bl	8004dcc <RCCEx_PLL3_Config>
 8003360:	4603      	mov	r3, r0
 8003362:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003366:	e004      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800336e:	e000      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003370:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003372:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10a      	bne.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800337a:	4ba5      	ldr	r3, [pc, #660]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800337c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800337e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003386:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003388:	4aa1      	ldr	r2, [pc, #644]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800338a:	430b      	orrs	r3, r1
 800338c:	6513      	str	r3, [r2, #80]	; 0x50
 800338e:	e003      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003390:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003394:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003398:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800339c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80033a4:	f04f 0900 	mov.w	r9, #0
 80033a8:	ea58 0309 	orrs.w	r3, r8, r9
 80033ac:	d047      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80033ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b4:	2b04      	cmp	r3, #4
 80033b6:	d82a      	bhi.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80033b8:	a201      	add	r2, pc, #4	; (adr r2, 80033c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80033ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033be:	bf00      	nop
 80033c0:	080033d5 	.word	0x080033d5
 80033c4:	080033e3 	.word	0x080033e3
 80033c8:	080033f9 	.word	0x080033f9
 80033cc:	08003417 	.word	0x08003417
 80033d0:	08003417 	.word	0x08003417
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033d4:	4b8e      	ldr	r3, [pc, #568]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d8:	4a8d      	ldr	r2, [pc, #564]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033e0:	e01a      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033e6:	3308      	adds	r3, #8
 80033e8:	2100      	movs	r1, #0
 80033ea:	4618      	mov	r0, r3
 80033ec:	f001 fc3c 	bl	8004c68 <RCCEx_PLL2_Config>
 80033f0:	4603      	mov	r3, r0
 80033f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033f6:	e00f      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033fc:	3328      	adds	r3, #40	; 0x28
 80033fe:	2100      	movs	r1, #0
 8003400:	4618      	mov	r0, r3
 8003402:	f001 fce3 	bl	8004dcc <RCCEx_PLL3_Config>
 8003406:	4603      	mov	r3, r0
 8003408:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800340c:	e004      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003414:	e000      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003416:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003418:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10a      	bne.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003420:	4b7b      	ldr	r3, [pc, #492]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003424:	f023 0107 	bic.w	r1, r3, #7
 8003428:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800342c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342e:	4a78      	ldr	r2, [pc, #480]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003430:	430b      	orrs	r3, r1
 8003432:	6513      	str	r3, [r2, #80]	; 0x50
 8003434:	e003      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003436:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800343a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800343e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003446:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800344a:	f04f 0b00 	mov.w	fp, #0
 800344e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003452:	d04c      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003454:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800345e:	d030      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003460:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003464:	d829      	bhi.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003466:	2bc0      	cmp	r3, #192	; 0xc0
 8003468:	d02d      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800346a:	2bc0      	cmp	r3, #192	; 0xc0
 800346c:	d825      	bhi.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800346e:	2b80      	cmp	r3, #128	; 0x80
 8003470:	d018      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003472:	2b80      	cmp	r3, #128	; 0x80
 8003474:	d821      	bhi.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003476:	2b00      	cmp	r3, #0
 8003478:	d002      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800347a:	2b40      	cmp	r3, #64	; 0x40
 800347c:	d007      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800347e:	e01c      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003480:	4b63      	ldr	r3, [pc, #396]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003484:	4a62      	ldr	r2, [pc, #392]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003486:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800348a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800348c:	e01c      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800348e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003492:	3308      	adds	r3, #8
 8003494:	2100      	movs	r1, #0
 8003496:	4618      	mov	r0, r3
 8003498:	f001 fbe6 	bl	8004c68 <RCCEx_PLL2_Config>
 800349c:	4603      	mov	r3, r0
 800349e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80034a2:	e011      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034a8:	3328      	adds	r3, #40	; 0x28
 80034aa:	2100      	movs	r1, #0
 80034ac:	4618      	mov	r0, r3
 80034ae:	f001 fc8d 	bl	8004dcc <RCCEx_PLL3_Config>
 80034b2:	4603      	mov	r3, r0
 80034b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80034b8:	e006      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80034c0:	e002      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80034c2:	bf00      	nop
 80034c4:	e000      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80034c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10a      	bne.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80034d0:	4b4f      	ldr	r3, [pc, #316]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80034d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034de:	4a4c      	ldr	r2, [pc, #304]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034e0:	430b      	orrs	r3, r1
 80034e2:	6513      	str	r3, [r2, #80]	; 0x50
 80034e4:	e003      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80034ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80034fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80034fe:	2300      	movs	r3, #0
 8003500:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003504:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003508:	460b      	mov	r3, r1
 800350a:	4313      	orrs	r3, r2
 800350c:	d053      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800350e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003512:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003516:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800351a:	d035      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800351c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003520:	d82e      	bhi.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003522:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003526:	d031      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003528:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800352c:	d828      	bhi.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800352e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003532:	d01a      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003534:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003538:	d822      	bhi.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800353e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003542:	d007      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003544:	e01c      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003546:	4b32      	ldr	r3, [pc, #200]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354a:	4a31      	ldr	r2, [pc, #196]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800354c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003550:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003552:	e01c      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003554:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003558:	3308      	adds	r3, #8
 800355a:	2100      	movs	r1, #0
 800355c:	4618      	mov	r0, r3
 800355e:	f001 fb83 	bl	8004c68 <RCCEx_PLL2_Config>
 8003562:	4603      	mov	r3, r0
 8003564:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003568:	e011      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800356a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800356e:	3328      	adds	r3, #40	; 0x28
 8003570:	2100      	movs	r1, #0
 8003572:	4618      	mov	r0, r3
 8003574:	f001 fc2a 	bl	8004dcc <RCCEx_PLL3_Config>
 8003578:	4603      	mov	r3, r0
 800357a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800357e:	e006      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003586:	e002      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003588:	bf00      	nop
 800358a:	e000      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800358c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800358e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10b      	bne.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003596:	4b1e      	ldr	r3, [pc, #120]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800359e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80035a6:	4a1a      	ldr	r2, [pc, #104]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035a8:	430b      	orrs	r3, r1
 80035aa:	6593      	str	r3, [r2, #88]	; 0x58
 80035ac:	e003      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80035b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035be:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80035c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80035c6:	2300      	movs	r3, #0
 80035c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80035cc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80035d0:	460b      	mov	r3, r1
 80035d2:	4313      	orrs	r3, r2
 80035d4:	d056      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80035d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80035de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035e2:	d038      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80035e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035e8:	d831      	bhi.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035ee:	d034      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80035f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035f4:	d82b      	bhi.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035fa:	d01d      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80035fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003600:	d825      	bhi.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003602:	2b00      	cmp	r3, #0
 8003604:	d006      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003606:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800360a:	d00a      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800360c:	e01f      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800360e:	bf00      	nop
 8003610:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003614:	4ba2      	ldr	r3, [pc, #648]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003618:	4aa1      	ldr	r2, [pc, #644]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800361a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800361e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003620:	e01c      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003626:	3308      	adds	r3, #8
 8003628:	2100      	movs	r1, #0
 800362a:	4618      	mov	r0, r3
 800362c:	f001 fb1c 	bl	8004c68 <RCCEx_PLL2_Config>
 8003630:	4603      	mov	r3, r0
 8003632:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003636:	e011      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800363c:	3328      	adds	r3, #40	; 0x28
 800363e:	2100      	movs	r1, #0
 8003640:	4618      	mov	r0, r3
 8003642:	f001 fbc3 	bl	8004dcc <RCCEx_PLL3_Config>
 8003646:	4603      	mov	r3, r0
 8003648:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800364c:	e006      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003654:	e002      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003656:	bf00      	nop
 8003658:	e000      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800365a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800365c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10b      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003664:	4b8e      	ldr	r3, [pc, #568]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003668:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800366c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003670:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003674:	4a8a      	ldr	r2, [pc, #552]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003676:	430b      	orrs	r3, r1
 8003678:	6593      	str	r3, [r2, #88]	; 0x58
 800367a:	e003      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800367c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003680:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003684:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003690:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003694:	2300      	movs	r3, #0
 8003696:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800369a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800369e:	460b      	mov	r3, r1
 80036a0:	4313      	orrs	r3, r2
 80036a2:	d03a      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80036a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036aa:	2b30      	cmp	r3, #48	; 0x30
 80036ac:	d01f      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x416>
 80036ae:	2b30      	cmp	r3, #48	; 0x30
 80036b0:	d819      	bhi.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80036b2:	2b20      	cmp	r3, #32
 80036b4:	d00c      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80036b6:	2b20      	cmp	r3, #32
 80036b8:	d815      	bhi.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d019      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80036be:	2b10      	cmp	r3, #16
 80036c0:	d111      	bne.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036c2:	4b77      	ldr	r3, [pc, #476]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c6:	4a76      	ldr	r2, [pc, #472]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80036ce:	e011      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036d4:	3308      	adds	r3, #8
 80036d6:	2102      	movs	r1, #2
 80036d8:	4618      	mov	r0, r3
 80036da:	f001 fac5 	bl	8004c68 <RCCEx_PLL2_Config>
 80036de:	4603      	mov	r3, r0
 80036e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80036e4:	e006      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036ec:	e002      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80036ee:	bf00      	nop
 80036f0:	e000      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80036f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10a      	bne.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80036fc:	4b68      	ldr	r3, [pc, #416]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003700:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800370a:	4a65      	ldr	r2, [pc, #404]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800370c:	430b      	orrs	r3, r1
 800370e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003710:	e003      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003712:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003716:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800371a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800371e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003722:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003726:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800372a:	2300      	movs	r3, #0
 800372c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003730:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003734:	460b      	mov	r3, r1
 8003736:	4313      	orrs	r3, r2
 8003738:	d051      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800373a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800373e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003740:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003744:	d035      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003746:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800374a:	d82e      	bhi.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800374c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003750:	d031      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003752:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003756:	d828      	bhi.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800375c:	d01a      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800375e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003762:	d822      	bhi.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800376c:	d007      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800376e:	e01c      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003770:	4b4b      	ldr	r3, [pc, #300]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003774:	4a4a      	ldr	r2, [pc, #296]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800377a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800377c:	e01c      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800377e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003782:	3308      	adds	r3, #8
 8003784:	2100      	movs	r1, #0
 8003786:	4618      	mov	r0, r3
 8003788:	f001 fa6e 	bl	8004c68 <RCCEx_PLL2_Config>
 800378c:	4603      	mov	r3, r0
 800378e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003792:	e011      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003794:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003798:	3328      	adds	r3, #40	; 0x28
 800379a:	2100      	movs	r1, #0
 800379c:	4618      	mov	r0, r3
 800379e:	f001 fb15 	bl	8004dcc <RCCEx_PLL3_Config>
 80037a2:	4603      	mov	r3, r0
 80037a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037a8:	e006      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037b0:	e002      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80037b2:	bf00      	nop
 80037b4:	e000      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80037b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10a      	bne.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80037c0:	4b37      	ldr	r3, [pc, #220]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037c4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80037c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ce:	4a34      	ldr	r2, [pc, #208]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037d0:	430b      	orrs	r3, r1
 80037d2:	6513      	str	r3, [r2, #80]	; 0x50
 80037d4:	e003      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80037de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80037ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80037ee:	2300      	movs	r3, #0
 80037f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80037f4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80037f8:	460b      	mov	r3, r1
 80037fa:	4313      	orrs	r3, r2
 80037fc:	d056      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80037fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003802:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003804:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003808:	d033      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800380a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800380e:	d82c      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003810:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003814:	d02f      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003816:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800381a:	d826      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800381c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003820:	d02b      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003822:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003826:	d820      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003828:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800382c:	d012      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800382e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003832:	d81a      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003834:	2b00      	cmp	r3, #0
 8003836:	d022      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800383c:	d115      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800383e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003842:	3308      	adds	r3, #8
 8003844:	2101      	movs	r1, #1
 8003846:	4618      	mov	r0, r3
 8003848:	f001 fa0e 	bl	8004c68 <RCCEx_PLL2_Config>
 800384c:	4603      	mov	r3, r0
 800384e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003852:	e015      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003854:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003858:	3328      	adds	r3, #40	; 0x28
 800385a:	2101      	movs	r1, #1
 800385c:	4618      	mov	r0, r3
 800385e:	f001 fab5 	bl	8004dcc <RCCEx_PLL3_Config>
 8003862:	4603      	mov	r3, r0
 8003864:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003868:	e00a      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003870:	e006      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003872:	bf00      	nop
 8003874:	e004      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003876:	bf00      	nop
 8003878:	e002      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800387a:	bf00      	nop
 800387c:	e000      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800387e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003880:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10d      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003888:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800388a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800388c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003894:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003896:	4a02      	ldr	r2, [pc, #8]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003898:	430b      	orrs	r3, r1
 800389a:	6513      	str	r3, [r2, #80]	; 0x50
 800389c:	e006      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800389e:	bf00      	nop
 80038a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80038ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80038b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80038bc:	2300      	movs	r3, #0
 80038be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80038c2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80038c6:	460b      	mov	r3, r1
 80038c8:	4313      	orrs	r3, r2
 80038ca:	d055      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80038cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038d8:	d033      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80038da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038de:	d82c      	bhi.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e4:	d02f      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80038e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ea:	d826      	bhi.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038f0:	d02b      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80038f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038f6:	d820      	bhi.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038fc:	d012      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80038fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003902:	d81a      	bhi.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003904:	2b00      	cmp	r3, #0
 8003906:	d022      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003908:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800390c:	d115      	bne.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800390e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003912:	3308      	adds	r3, #8
 8003914:	2101      	movs	r1, #1
 8003916:	4618      	mov	r0, r3
 8003918:	f001 f9a6 	bl	8004c68 <RCCEx_PLL2_Config>
 800391c:	4603      	mov	r3, r0
 800391e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003922:	e015      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003928:	3328      	adds	r3, #40	; 0x28
 800392a:	2101      	movs	r1, #1
 800392c:	4618      	mov	r0, r3
 800392e:	f001 fa4d 	bl	8004dcc <RCCEx_PLL3_Config>
 8003932:	4603      	mov	r3, r0
 8003934:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003938:	e00a      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003940:	e006      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003942:	bf00      	nop
 8003944:	e004      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003946:	bf00      	nop
 8003948:	e002      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800394a:	bf00      	nop
 800394c:	e000      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800394e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003950:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10b      	bne.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003958:	4ba3      	ldr	r3, [pc, #652]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800395a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003964:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003968:	4a9f      	ldr	r2, [pc, #636]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800396a:	430b      	orrs	r3, r1
 800396c:	6593      	str	r3, [r2, #88]	; 0x58
 800396e:	e003      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003970:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003974:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003978:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800397c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003980:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003984:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003988:	2300      	movs	r3, #0
 800398a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800398e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003992:	460b      	mov	r3, r1
 8003994:	4313      	orrs	r3, r2
 8003996:	d037      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800399c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039a2:	d00e      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80039a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039a8:	d816      	bhi.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d018      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80039ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039b2:	d111      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039b4:	4b8c      	ldr	r3, [pc, #560]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b8:	4a8b      	ldr	r2, [pc, #556]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039c0:	e00f      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039c6:	3308      	adds	r3, #8
 80039c8:	2101      	movs	r1, #1
 80039ca:	4618      	mov	r0, r3
 80039cc:	f001 f94c 	bl	8004c68 <RCCEx_PLL2_Config>
 80039d0:	4603      	mov	r3, r0
 80039d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039d6:	e004      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80039de:	e000      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80039e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10a      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039ea:	4b7f      	ldr	r3, [pc, #508]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ee:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80039f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f8:	4a7b      	ldr	r2, [pc, #492]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039fa:	430b      	orrs	r3, r1
 80039fc:	6513      	str	r3, [r2, #80]	; 0x50
 80039fe:	e003      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a10:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003a14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003a1e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003a22:	460b      	mov	r3, r1
 8003a24:	4313      	orrs	r3, r2
 8003a26:	d039      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a2e:	2b03      	cmp	r3, #3
 8003a30:	d81c      	bhi.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003a32:	a201      	add	r2, pc, #4	; (adr r2, 8003a38 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a38:	08003a75 	.word	0x08003a75
 8003a3c:	08003a49 	.word	0x08003a49
 8003a40:	08003a57 	.word	0x08003a57
 8003a44:	08003a75 	.word	0x08003a75
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a48:	4b67      	ldr	r3, [pc, #412]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	4a66      	ldr	r2, [pc, #408]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a54:	e00f      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a5a:	3308      	adds	r3, #8
 8003a5c:	2102      	movs	r1, #2
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f001 f902 	bl	8004c68 <RCCEx_PLL2_Config>
 8003a64:	4603      	mov	r3, r0
 8003a66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a6a:	e004      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a72:	e000      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003a74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10a      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a7e:	4b5a      	ldr	r3, [pc, #360]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a82:	f023 0103 	bic.w	r1, r3, #3
 8003a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a8c:	4a56      	ldr	r2, [pc, #344]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a8e:	430b      	orrs	r3, r1
 8003a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a92:	e003      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003aa8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003aac:	2300      	movs	r3, #0
 8003aae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ab2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	f000 809f 	beq.w	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003abe:	4b4b      	ldr	r3, [pc, #300]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a4a      	ldr	r2, [pc, #296]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003aca:	f7fd fad9 	bl	8001080 <HAL_GetTick>
 8003ace:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ad2:	e00b      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad4:	f7fd fad4 	bl	8001080 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b64      	cmp	r3, #100	; 0x64
 8003ae2:	d903      	bls.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003aea:	e005      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003aec:	4b3f      	ldr	r3, [pc, #252]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0ed      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003af8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d179      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b00:	4b39      	ldr	r3, [pc, #228]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b0c:	4053      	eors	r3, r2
 8003b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d015      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b16:	4b34      	ldr	r3, [pc, #208]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b1e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b22:	4b31      	ldr	r3, [pc, #196]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b26:	4a30      	ldr	r2, [pc, #192]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b2c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b2e:	4b2e      	ldr	r3, [pc, #184]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b32:	4a2d      	ldr	r2, [pc, #180]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b38:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b3a:	4a2b      	ldr	r2, [pc, #172]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b40:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b4e:	d118      	bne.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b50:	f7fd fa96 	bl	8001080 <HAL_GetTick>
 8003b54:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b58:	e00d      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b5a:	f7fd fa91 	bl	8001080 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003b64:	1ad2      	subs	r2, r2, r3
 8003b66:	f241 3388 	movw	r3, #5000	; 0x1388
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d903      	bls.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003b74:	e005      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b76:	4b1c      	ldr	r3, [pc, #112]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0eb      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003b82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d129      	bne.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b9a:	d10e      	bne.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003b9c:	4b12      	ldr	r3, [pc, #72]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ba8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003bac:	091a      	lsrs	r2, r3, #4
 8003bae:	4b10      	ldr	r3, [pc, #64]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	4a0d      	ldr	r2, [pc, #52]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bb4:	430b      	orrs	r3, r1
 8003bb6:	6113      	str	r3, [r2, #16]
 8003bb8:	e005      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003bba:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	4a0a      	ldr	r2, [pc, #40]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bc0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003bc4:	6113      	str	r3, [r2, #16]
 8003bc6:	4b08      	ldr	r3, [pc, #32]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bc8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003bd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd6:	4a04      	ldr	r2, [pc, #16]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bd8:	430b      	orrs	r3, r1
 8003bda:	6713      	str	r3, [r2, #112]	; 0x70
 8003bdc:	e00e      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003be2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003be6:	e009      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003be8:	58024400 	.word	0x58024400
 8003bec:	58024800 	.word	0x58024800
 8003bf0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bf8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c04:	f002 0301 	and.w	r3, r2, #1
 8003c08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c12:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c16:	460b      	mov	r3, r1
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	f000 8089 	beq.w	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c24:	2b28      	cmp	r3, #40	; 0x28
 8003c26:	d86b      	bhi.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003c28:	a201      	add	r2, pc, #4	; (adr r2, 8003c30 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2e:	bf00      	nop
 8003c30:	08003d09 	.word	0x08003d09
 8003c34:	08003d01 	.word	0x08003d01
 8003c38:	08003d01 	.word	0x08003d01
 8003c3c:	08003d01 	.word	0x08003d01
 8003c40:	08003d01 	.word	0x08003d01
 8003c44:	08003d01 	.word	0x08003d01
 8003c48:	08003d01 	.word	0x08003d01
 8003c4c:	08003d01 	.word	0x08003d01
 8003c50:	08003cd5 	.word	0x08003cd5
 8003c54:	08003d01 	.word	0x08003d01
 8003c58:	08003d01 	.word	0x08003d01
 8003c5c:	08003d01 	.word	0x08003d01
 8003c60:	08003d01 	.word	0x08003d01
 8003c64:	08003d01 	.word	0x08003d01
 8003c68:	08003d01 	.word	0x08003d01
 8003c6c:	08003d01 	.word	0x08003d01
 8003c70:	08003ceb 	.word	0x08003ceb
 8003c74:	08003d01 	.word	0x08003d01
 8003c78:	08003d01 	.word	0x08003d01
 8003c7c:	08003d01 	.word	0x08003d01
 8003c80:	08003d01 	.word	0x08003d01
 8003c84:	08003d01 	.word	0x08003d01
 8003c88:	08003d01 	.word	0x08003d01
 8003c8c:	08003d01 	.word	0x08003d01
 8003c90:	08003d09 	.word	0x08003d09
 8003c94:	08003d01 	.word	0x08003d01
 8003c98:	08003d01 	.word	0x08003d01
 8003c9c:	08003d01 	.word	0x08003d01
 8003ca0:	08003d01 	.word	0x08003d01
 8003ca4:	08003d01 	.word	0x08003d01
 8003ca8:	08003d01 	.word	0x08003d01
 8003cac:	08003d01 	.word	0x08003d01
 8003cb0:	08003d09 	.word	0x08003d09
 8003cb4:	08003d01 	.word	0x08003d01
 8003cb8:	08003d01 	.word	0x08003d01
 8003cbc:	08003d01 	.word	0x08003d01
 8003cc0:	08003d01 	.word	0x08003d01
 8003cc4:	08003d01 	.word	0x08003d01
 8003cc8:	08003d01 	.word	0x08003d01
 8003ccc:	08003d01 	.word	0x08003d01
 8003cd0:	08003d09 	.word	0x08003d09
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cd8:	3308      	adds	r3, #8
 8003cda:	2101      	movs	r1, #1
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 ffc3 	bl	8004c68 <RCCEx_PLL2_Config>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ce8:	e00f      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cee:	3328      	adds	r3, #40	; 0x28
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f001 f86a 	bl	8004dcc <RCCEx_PLL3_Config>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003cfe:	e004      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d06:	e000      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003d08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10a      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d12:	4bbf      	ldr	r3, [pc, #764]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d16:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d20:	4abb      	ldr	r2, [pc, #748]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d22:	430b      	orrs	r3, r1
 8003d24:	6553      	str	r3, [r2, #84]	; 0x54
 8003d26:	e003      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d38:	f002 0302 	and.w	r3, r2, #2
 8003d3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d40:	2300      	movs	r3, #0
 8003d42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003d46:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	d041      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d56:	2b05      	cmp	r3, #5
 8003d58:	d824      	bhi.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003d5a:	a201      	add	r2, pc, #4	; (adr r2, 8003d60 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d60:	08003dad 	.word	0x08003dad
 8003d64:	08003d79 	.word	0x08003d79
 8003d68:	08003d8f 	.word	0x08003d8f
 8003d6c:	08003dad 	.word	0x08003dad
 8003d70:	08003dad 	.word	0x08003dad
 8003d74:	08003dad 	.word	0x08003dad
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d7c:	3308      	adds	r3, #8
 8003d7e:	2101      	movs	r1, #1
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 ff71 	bl	8004c68 <RCCEx_PLL2_Config>
 8003d86:	4603      	mov	r3, r0
 8003d88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d8c:	e00f      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d92:	3328      	adds	r3, #40	; 0x28
 8003d94:	2101      	movs	r1, #1
 8003d96:	4618      	mov	r0, r3
 8003d98:	f001 f818 	bl	8004dcc <RCCEx_PLL3_Config>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003da2:	e004      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003daa:	e000      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003dac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10a      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003db6:	4b96      	ldr	r3, [pc, #600]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dba:	f023 0107 	bic.w	r1, r3, #7
 8003dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dc4:	4a92      	ldr	r2, [pc, #584]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003dc6:	430b      	orrs	r3, r1
 8003dc8:	6553      	str	r3, [r2, #84]	; 0x54
 8003dca:	e003      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dcc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dd0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ddc:	f002 0304 	and.w	r3, r2, #4
 8003de0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003de4:	2300      	movs	r3, #0
 8003de6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003dea:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003dee:	460b      	mov	r3, r1
 8003df0:	4313      	orrs	r3, r2
 8003df2:	d044      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dfc:	2b05      	cmp	r3, #5
 8003dfe:	d825      	bhi.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003e00:	a201      	add	r2, pc, #4	; (adr r2, 8003e08 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e06:	bf00      	nop
 8003e08:	08003e55 	.word	0x08003e55
 8003e0c:	08003e21 	.word	0x08003e21
 8003e10:	08003e37 	.word	0x08003e37
 8003e14:	08003e55 	.word	0x08003e55
 8003e18:	08003e55 	.word	0x08003e55
 8003e1c:	08003e55 	.word	0x08003e55
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e24:	3308      	adds	r3, #8
 8003e26:	2101      	movs	r1, #1
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 ff1d 	bl	8004c68 <RCCEx_PLL2_Config>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e34:	e00f      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e3a:	3328      	adds	r3, #40	; 0x28
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 ffc4 	bl	8004dcc <RCCEx_PLL3_Config>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e4a:	e004      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e52:	e000      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003e54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10b      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e5e:	4b6c      	ldr	r3, [pc, #432]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e62:	f023 0107 	bic.w	r1, r3, #7
 8003e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e6e:	4a68      	ldr	r2, [pc, #416]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e70:	430b      	orrs	r3, r1
 8003e72:	6593      	str	r3, [r2, #88]	; 0x58
 8003e74:	e003      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e86:	f002 0320 	and.w	r3, r2, #32
 8003e8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e8e:	2300      	movs	r3, #0
 8003e90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	d055      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eaa:	d033      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003eac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eb0:	d82c      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb6:	d02f      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ebc:	d826      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003ebe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ec2:	d02b      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003ec4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ec8:	d820      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003eca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ece:	d012      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ed4:	d81a      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d022      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003eda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ede:	d115      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ee4:	3308      	adds	r3, #8
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 febd 	bl	8004c68 <RCCEx_PLL2_Config>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003ef4:	e015      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003efa:	3328      	adds	r3, #40	; 0x28
 8003efc:	2102      	movs	r1, #2
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 ff64 	bl	8004dcc <RCCEx_PLL3_Config>
 8003f04:	4603      	mov	r3, r0
 8003f06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f0a:	e00a      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f12:	e006      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f14:	bf00      	nop
 8003f16:	e004      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f18:	bf00      	nop
 8003f1a:	e002      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f1c:	bf00      	nop
 8003f1e:	e000      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10b      	bne.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f2a:	4b39      	ldr	r3, [pc, #228]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f3a:	4a35      	ldr	r2, [pc, #212]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	6553      	str	r3, [r2, #84]	; 0x54
 8003f40:	e003      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f52:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003f56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003f60:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003f64:	460b      	mov	r3, r1
 8003f66:	4313      	orrs	r3, r2
 8003f68:	d058      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f72:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f76:	d033      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003f78:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f7c:	d82c      	bhi.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f82:	d02f      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f88:	d826      	bhi.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f8e:	d02b      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003f90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f94:	d820      	bhi.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f9a:	d012      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003f9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fa0:	d81a      	bhi.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d022      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003faa:	d115      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fb0:	3308      	adds	r3, #8
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 fe57 	bl	8004c68 <RCCEx_PLL2_Config>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003fc0:	e015      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fc6:	3328      	adds	r3, #40	; 0x28
 8003fc8:	2102      	movs	r1, #2
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 fefe 	bl	8004dcc <RCCEx_PLL3_Config>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003fd6:	e00a      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fde:	e006      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fe0:	bf00      	nop
 8003fe2:	e004      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fe4:	bf00      	nop
 8003fe6:	e002      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fe8:	bf00      	nop
 8003fea:	e000      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10e      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ff6:	4b06      	ldr	r3, [pc, #24]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffa:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004002:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004006:	4a02      	ldr	r2, [pc, #8]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004008:	430b      	orrs	r3, r1
 800400a:	6593      	str	r3, [r2, #88]	; 0x58
 800400c:	e006      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800400e:	bf00      	nop
 8004010:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004014:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004018:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800401c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004024:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004028:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800402c:	2300      	movs	r3, #0
 800402e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004032:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004036:	460b      	mov	r3, r1
 8004038:	4313      	orrs	r3, r2
 800403a:	d055      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800403c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004040:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004044:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004048:	d033      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800404a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800404e:	d82c      	bhi.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004050:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004054:	d02f      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800405a:	d826      	bhi.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800405c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004060:	d02b      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004062:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004066:	d820      	bhi.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004068:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800406c:	d012      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800406e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004072:	d81a      	bhi.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004074:	2b00      	cmp	r3, #0
 8004076:	d022      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004078:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800407c:	d115      	bne.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800407e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004082:	3308      	adds	r3, #8
 8004084:	2100      	movs	r1, #0
 8004086:	4618      	mov	r0, r3
 8004088:	f000 fdee 	bl	8004c68 <RCCEx_PLL2_Config>
 800408c:	4603      	mov	r3, r0
 800408e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004092:	e015      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004094:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004098:	3328      	adds	r3, #40	; 0x28
 800409a:	2102      	movs	r1, #2
 800409c:	4618      	mov	r0, r3
 800409e:	f000 fe95 	bl	8004dcc <RCCEx_PLL3_Config>
 80040a2:	4603      	mov	r3, r0
 80040a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040a8:	e00a      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040b0:	e006      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040b2:	bf00      	nop
 80040b4:	e004      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040b6:	bf00      	nop
 80040b8:	e002      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040ba:	bf00      	nop
 80040bc:	e000      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10b      	bne.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80040c8:	4ba1      	ldr	r3, [pc, #644]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040cc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80040d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040d8:	4a9d      	ldr	r2, [pc, #628]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040da:	430b      	orrs	r3, r1
 80040dc:	6593      	str	r3, [r2, #88]	; 0x58
 80040de:	e003      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80040e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f0:	f002 0308 	and.w	r3, r2, #8
 80040f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80040f8:	2300      	movs	r3, #0
 80040fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80040fe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004102:	460b      	mov	r3, r1
 8004104:	4313      	orrs	r3, r2
 8004106:	d01e      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004108:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800410c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004114:	d10c      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004116:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800411a:	3328      	adds	r3, #40	; 0x28
 800411c:	2102      	movs	r1, #2
 800411e:	4618      	mov	r0, r3
 8004120:	f000 fe54 	bl	8004dcc <RCCEx_PLL3_Config>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d002      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004130:	4b87      	ldr	r3, [pc, #540]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004134:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004138:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800413c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004140:	4a83      	ldr	r2, [pc, #524]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004142:	430b      	orrs	r3, r1
 8004144:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800414a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414e:	f002 0310 	and.w	r3, r2, #16
 8004152:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004156:	2300      	movs	r3, #0
 8004158:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800415c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004160:	460b      	mov	r3, r1
 8004162:	4313      	orrs	r3, r2
 8004164:	d01e      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004166:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800416a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800416e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004172:	d10c      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004174:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004178:	3328      	adds	r3, #40	; 0x28
 800417a:	2102      	movs	r1, #2
 800417c:	4618      	mov	r0, r3
 800417e:	f000 fe25 	bl	8004dcc <RCCEx_PLL3_Config>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d002      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800418e:	4b70      	ldr	r3, [pc, #448]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004192:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800419a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800419e:	4a6c      	ldr	r2, [pc, #432]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041a0:	430b      	orrs	r3, r1
 80041a2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ac:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80041b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041b4:	2300      	movs	r3, #0
 80041b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80041ba:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80041be:	460b      	mov	r3, r1
 80041c0:	4313      	orrs	r3, r2
 80041c2:	d03e      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80041c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80041cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041d0:	d022      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80041d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041d6:	d81b      	bhi.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80041dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e0:	d00b      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80041e2:	e015      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041e8:	3308      	adds	r3, #8
 80041ea:	2100      	movs	r1, #0
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 fd3b 	bl	8004c68 <RCCEx_PLL2_Config>
 80041f2:	4603      	mov	r3, r0
 80041f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80041f8:	e00f      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041fe:	3328      	adds	r3, #40	; 0x28
 8004200:	2102      	movs	r1, #2
 8004202:	4618      	mov	r0, r3
 8004204:	f000 fde2 	bl	8004dcc <RCCEx_PLL3_Config>
 8004208:	4603      	mov	r3, r0
 800420a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800420e:	e004      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004216:	e000      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004218:	bf00      	nop
    }

    if (ret == HAL_OK)
 800421a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10b      	bne.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004222:	4b4b      	ldr	r3, [pc, #300]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004226:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800422a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800422e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004232:	4a47      	ldr	r2, [pc, #284]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004234:	430b      	orrs	r3, r1
 8004236:	6593      	str	r3, [r2, #88]	; 0x58
 8004238:	e003      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800423a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800423e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800424e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004250:	2300      	movs	r3, #0
 8004252:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004254:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004258:	460b      	mov	r3, r1
 800425a:	4313      	orrs	r3, r2
 800425c:	d03b      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800425e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004266:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800426a:	d01f      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800426c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004270:	d818      	bhi.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004272:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004276:	d003      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004278:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800427c:	d007      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800427e:	e011      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004280:	4b33      	ldr	r3, [pc, #204]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004284:	4a32      	ldr	r2, [pc, #200]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800428a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800428c:	e00f      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800428e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004292:	3328      	adds	r3, #40	; 0x28
 8004294:	2101      	movs	r1, #1
 8004296:	4618      	mov	r0, r3
 8004298:	f000 fd98 	bl	8004dcc <RCCEx_PLL3_Config>
 800429c:	4603      	mov	r3, r0
 800429e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80042a2:	e004      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042aa:	e000      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80042ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10b      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042b6:	4b26      	ldr	r3, [pc, #152]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ba:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80042be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c6:	4a22      	ldr	r2, [pc, #136]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042c8:	430b      	orrs	r3, r1
 80042ca:	6553      	str	r3, [r2, #84]	; 0x54
 80042cc:	e003      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80042d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042de:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80042e2:	673b      	str	r3, [r7, #112]	; 0x70
 80042e4:	2300      	movs	r3, #0
 80042e6:	677b      	str	r3, [r7, #116]	; 0x74
 80042e8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80042ec:	460b      	mov	r3, r1
 80042ee:	4313      	orrs	r3, r2
 80042f0:	d034      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80042f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d003      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80042fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004300:	d007      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004302:	e011      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004304:	4b12      	ldr	r3, [pc, #72]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004308:	4a11      	ldr	r2, [pc, #68]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800430a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800430e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004310:	e00e      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004316:	3308      	adds	r3, #8
 8004318:	2102      	movs	r1, #2
 800431a:	4618      	mov	r0, r3
 800431c:	f000 fca4 	bl	8004c68 <RCCEx_PLL2_Config>
 8004320:	4603      	mov	r3, r0
 8004322:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004326:	e003      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800432e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004330:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10d      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004338:	4b05      	ldr	r3, [pc, #20]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800433a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800433c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004340:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004346:	4a02      	ldr	r2, [pc, #8]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004348:	430b      	orrs	r3, r1
 800434a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800434c:	e006      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800434e:	bf00      	nop
 8004350:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004354:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004358:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800435c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004364:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004368:	66bb      	str	r3, [r7, #104]	; 0x68
 800436a:	2300      	movs	r3, #0
 800436c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800436e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004372:	460b      	mov	r3, r1
 8004374:	4313      	orrs	r3, r2
 8004376:	d00c      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004378:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800437c:	3328      	adds	r3, #40	; 0x28
 800437e:	2102      	movs	r1, #2
 8004380:	4618      	mov	r0, r3
 8004382:	f000 fd23 	bl	8004dcc <RCCEx_PLL3_Config>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d002      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004392:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800439e:	663b      	str	r3, [r7, #96]	; 0x60
 80043a0:	2300      	movs	r3, #0
 80043a2:	667b      	str	r3, [r7, #100]	; 0x64
 80043a4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80043a8:	460b      	mov	r3, r1
 80043aa:	4313      	orrs	r3, r2
 80043ac:	d038      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80043ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043ba:	d018      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80043bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043c0:	d811      	bhi.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80043c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043c6:	d014      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80043c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043cc:	d80b      	bhi.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d011      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80043d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043d6:	d106      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043d8:	4bc3      	ldr	r3, [pc, #780]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043dc:	4ac2      	ldr	r2, [pc, #776]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80043e4:	e008      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80043ec:	e004      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80043ee:	bf00      	nop
 80043f0:	e002      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80043f2:	bf00      	nop
 80043f4:	e000      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80043f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10b      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004400:	4bb9      	ldr	r3, [pc, #740]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004404:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004408:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800440c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004410:	4ab5      	ldr	r2, [pc, #724]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004412:	430b      	orrs	r3, r1
 8004414:	6553      	str	r3, [r2, #84]	; 0x54
 8004416:	e003      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004418:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800441c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004428:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800442c:	65bb      	str	r3, [r7, #88]	; 0x58
 800442e:	2300      	movs	r3, #0
 8004430:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004432:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004436:	460b      	mov	r3, r1
 8004438:	4313      	orrs	r3, r2
 800443a:	d009      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800443c:	4baa      	ldr	r3, [pc, #680]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800443e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004440:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004444:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800444a:	4aa7      	ldr	r2, [pc, #668]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800444c:	430b      	orrs	r3, r1
 800444e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004458:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800445c:	653b      	str	r3, [r7, #80]	; 0x50
 800445e:	2300      	movs	r3, #0
 8004460:	657b      	str	r3, [r7, #84]	; 0x54
 8004462:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004466:	460b      	mov	r3, r1
 8004468:	4313      	orrs	r3, r2
 800446a:	d00a      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800446c:	4b9e      	ldr	r3, [pc, #632]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004474:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004478:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800447c:	4a9a      	ldr	r2, [pc, #616]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800447e:	430b      	orrs	r3, r1
 8004480:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004482:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800448e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004490:	2300      	movs	r3, #0
 8004492:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004494:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004498:	460b      	mov	r3, r1
 800449a:	4313      	orrs	r3, r2
 800449c:	d009      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800449e:	4b92      	ldr	r3, [pc, #584]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044a2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80044a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044ac:	4a8e      	ldr	r2, [pc, #568]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044ae:	430b      	orrs	r3, r1
 80044b0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80044b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ba:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80044be:	643b      	str	r3, [r7, #64]	; 0x40
 80044c0:	2300      	movs	r3, #0
 80044c2:	647b      	str	r3, [r7, #68]	; 0x44
 80044c4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80044c8:	460b      	mov	r3, r1
 80044ca:	4313      	orrs	r3, r2
 80044cc:	d00e      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044ce:	4b86      	ldr	r3, [pc, #536]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	4a85      	ldr	r2, [pc, #532]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80044d8:	6113      	str	r3, [r2, #16]
 80044da:	4b83      	ldr	r3, [pc, #524]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044dc:	6919      	ldr	r1, [r3, #16]
 80044de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80044e6:	4a80      	ldr	r2, [pc, #512]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044e8:	430b      	orrs	r3, r1
 80044ea:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80044ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80044f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80044fa:	2300      	movs	r3, #0
 80044fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044fe:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004502:	460b      	mov	r3, r1
 8004504:	4313      	orrs	r3, r2
 8004506:	d009      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004508:	4b77      	ldr	r3, [pc, #476]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800450a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800450c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004510:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004516:	4a74      	ldr	r2, [pc, #464]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004518:	430b      	orrs	r3, r1
 800451a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800451c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004524:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004528:	633b      	str	r3, [r7, #48]	; 0x30
 800452a:	2300      	movs	r3, #0
 800452c:	637b      	str	r3, [r7, #52]	; 0x34
 800452e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004532:	460b      	mov	r3, r1
 8004534:	4313      	orrs	r3, r2
 8004536:	d00a      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004538:	4b6b      	ldr	r3, [pc, #428]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800453a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004548:	4a67      	ldr	r2, [pc, #412]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800454a:	430b      	orrs	r3, r1
 800454c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800454e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004556:	2100      	movs	r1, #0
 8004558:	62b9      	str	r1, [r7, #40]	; 0x28
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004560:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004564:	460b      	mov	r3, r1
 8004566:	4313      	orrs	r3, r2
 8004568:	d011      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800456a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800456e:	3308      	adds	r3, #8
 8004570:	2100      	movs	r1, #0
 8004572:	4618      	mov	r0, r3
 8004574:	f000 fb78 	bl	8004c68 <RCCEx_PLL2_Config>
 8004578:	4603      	mov	r3, r0
 800457a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800457e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004586:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800458a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800458e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004596:	2100      	movs	r1, #0
 8004598:	6239      	str	r1, [r7, #32]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	627b      	str	r3, [r7, #36]	; 0x24
 80045a0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80045a4:	460b      	mov	r3, r1
 80045a6:	4313      	orrs	r3, r2
 80045a8:	d011      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ae:	3308      	adds	r3, #8
 80045b0:	2101      	movs	r1, #1
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 fb58 	bl	8004c68 <RCCEx_PLL2_Config>
 80045b8:	4603      	mov	r3, r0
 80045ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80045be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80045ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d6:	2100      	movs	r1, #0
 80045d8:	61b9      	str	r1, [r7, #24]
 80045da:	f003 0304 	and.w	r3, r3, #4
 80045de:	61fb      	str	r3, [r7, #28]
 80045e0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80045e4:	460b      	mov	r3, r1
 80045e6:	4313      	orrs	r3, r2
 80045e8:	d011      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ee:	3308      	adds	r3, #8
 80045f0:	2102      	movs	r1, #2
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 fb38 	bl	8004c68 <RCCEx_PLL2_Config>
 80045f8:	4603      	mov	r3, r0
 80045fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80045fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004606:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800460a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800460e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004616:	2100      	movs	r1, #0
 8004618:	6139      	str	r1, [r7, #16]
 800461a:	f003 0308 	and.w	r3, r3, #8
 800461e:	617b      	str	r3, [r7, #20]
 8004620:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004624:	460b      	mov	r3, r1
 8004626:	4313      	orrs	r3, r2
 8004628:	d011      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800462a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800462e:	3328      	adds	r3, #40	; 0x28
 8004630:	2100      	movs	r1, #0
 8004632:	4618      	mov	r0, r3
 8004634:	f000 fbca 	bl	8004dcc <RCCEx_PLL3_Config>
 8004638:	4603      	mov	r3, r0
 800463a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800463e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004646:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800464a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800464e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004656:	2100      	movs	r1, #0
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	f003 0310 	and.w	r3, r3, #16
 800465e:	60fb      	str	r3, [r7, #12]
 8004660:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004664:	460b      	mov	r3, r1
 8004666:	4313      	orrs	r3, r2
 8004668:	d011      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800466a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800466e:	3328      	adds	r3, #40	; 0x28
 8004670:	2101      	movs	r1, #1
 8004672:	4618      	mov	r0, r3
 8004674:	f000 fbaa 	bl	8004dcc <RCCEx_PLL3_Config>
 8004678:	4603      	mov	r3, r0
 800467a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800467e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004686:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800468a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800468e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004696:	2100      	movs	r1, #0
 8004698:	6039      	str	r1, [r7, #0]
 800469a:	f003 0320 	and.w	r3, r3, #32
 800469e:	607b      	str	r3, [r7, #4]
 80046a0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80046a4:	460b      	mov	r3, r1
 80046a6:	4313      	orrs	r3, r2
 80046a8:	d011      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ae:	3328      	adds	r3, #40	; 0x28
 80046b0:	2102      	movs	r1, #2
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 fb8a 	bl	8004dcc <RCCEx_PLL3_Config>
 80046b8:	4603      	mov	r3, r0
 80046ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80046be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80046ce:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80046d6:	2300      	movs	r3, #0
 80046d8:	e000      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
}
 80046dc:	4618      	mov	r0, r3
 80046de:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80046e2:	46bd      	mov	sp, r7
 80046e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046e8:	58024400 	.word	0x58024400

080046ec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80046f0:	f7fe fd96 	bl	8003220 <HAL_RCC_GetHCLKFreq>
 80046f4:	4602      	mov	r2, r0
 80046f6:	4b06      	ldr	r3, [pc, #24]	; (8004710 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	091b      	lsrs	r3, r3, #4
 80046fc:	f003 0307 	and.w	r3, r3, #7
 8004700:	4904      	ldr	r1, [pc, #16]	; (8004714 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004702:	5ccb      	ldrb	r3, [r1, r3]
 8004704:	f003 031f 	and.w	r3, r3, #31
 8004708:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800470c:	4618      	mov	r0, r3
 800470e:	bd80      	pop	{r7, pc}
 8004710:	58024400 	.word	0x58024400
 8004714:	080088b8 	.word	0x080088b8

08004718 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004718:	b480      	push	{r7}
 800471a:	b089      	sub	sp, #36	; 0x24
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004720:	4ba1      	ldr	r3, [pc, #644]	; (80049a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004724:	f003 0303 	and.w	r3, r3, #3
 8004728:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800472a:	4b9f      	ldr	r3, [pc, #636]	; (80049a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800472c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472e:	0b1b      	lsrs	r3, r3, #12
 8004730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004734:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004736:	4b9c      	ldr	r3, [pc, #624]	; (80049a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473a:	091b      	lsrs	r3, r3, #4
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004742:	4b99      	ldr	r3, [pc, #612]	; (80049a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004746:	08db      	lsrs	r3, r3, #3
 8004748:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	fb02 f303 	mul.w	r3, r2, r3
 8004752:	ee07 3a90 	vmov	s15, r3
 8004756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800475a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	2b00      	cmp	r3, #0
 8004762:	f000 8111 	beq.w	8004988 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	2b02      	cmp	r3, #2
 800476a:	f000 8083 	beq.w	8004874 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	2b02      	cmp	r3, #2
 8004772:	f200 80a1 	bhi.w	80048b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d056      	beq.n	8004830 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004782:	e099      	b.n	80048b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004784:	4b88      	ldr	r3, [pc, #544]	; (80049a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0320 	and.w	r3, r3, #32
 800478c:	2b00      	cmp	r3, #0
 800478e:	d02d      	beq.n	80047ec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004790:	4b85      	ldr	r3, [pc, #532]	; (80049a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	08db      	lsrs	r3, r3, #3
 8004796:	f003 0303 	and.w	r3, r3, #3
 800479a:	4a84      	ldr	r2, [pc, #528]	; (80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800479c:	fa22 f303 	lsr.w	r3, r2, r3
 80047a0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	ee07 3a90 	vmov	s15, r3
 80047a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	ee07 3a90 	vmov	s15, r3
 80047b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ba:	4b7b      	ldr	r3, [pc, #492]	; (80049a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c2:	ee07 3a90 	vmov	s15, r3
 80047c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80047ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 80049b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80047ea:	e087      	b.n	80048fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	ee07 3a90 	vmov	s15, r3
 80047f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80047fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047fe:	4b6a      	ldr	r3, [pc, #424]	; (80049a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004806:	ee07 3a90 	vmov	s15, r3
 800480a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800480e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004812:	eddf 5a67 	vldr	s11, [pc, #412]	; 80049b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800481a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800481e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800482a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800482e:	e065      	b.n	80048fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	ee07 3a90 	vmov	s15, r3
 8004836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800483a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80049b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800483e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004842:	4b59      	ldr	r3, [pc, #356]	; (80049a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800484a:	ee07 3a90 	vmov	s15, r3
 800484e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004852:	ed97 6a03 	vldr	s12, [r7, #12]
 8004856:	eddf 5a56 	vldr	s11, [pc, #344]	; 80049b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800485a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800485e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800486a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800486e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004872:	e043      	b.n	80048fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	ee07 3a90 	vmov	s15, r3
 800487a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800487e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004886:	4b48      	ldr	r3, [pc, #288]	; (80049a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800488e:	ee07 3a90 	vmov	s15, r3
 8004892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004896:	ed97 6a03 	vldr	s12, [r7, #12]
 800489a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80049b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800489e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048b6:	e021      	b.n	80048fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	ee07 3a90 	vmov	s15, r3
 80048be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80049b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80048c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ca:	4b37      	ldr	r3, [pc, #220]	; (80049a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048d2:	ee07 3a90 	vmov	s15, r3
 80048d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048da:	ed97 6a03 	vldr	s12, [r7, #12]
 80048de:	eddf 5a34 	vldr	s11, [pc, #208]	; 80049b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048fa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80048fc:	4b2a      	ldr	r3, [pc, #168]	; (80049a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004900:	0a5b      	lsrs	r3, r3, #9
 8004902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004906:	ee07 3a90 	vmov	s15, r3
 800490a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800490e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004912:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004916:	edd7 6a07 	vldr	s13, [r7, #28]
 800491a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800491e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004922:	ee17 2a90 	vmov	r2, s15
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800492a:	4b1f      	ldr	r3, [pc, #124]	; (80049a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800492c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492e:	0c1b      	lsrs	r3, r3, #16
 8004930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004934:	ee07 3a90 	vmov	s15, r3
 8004938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800493c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004940:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004944:	edd7 6a07 	vldr	s13, [r7, #28]
 8004948:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800494c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004950:	ee17 2a90 	vmov	r2, s15
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004958:	4b13      	ldr	r3, [pc, #76]	; (80049a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800495a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495c:	0e1b      	lsrs	r3, r3, #24
 800495e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004962:	ee07 3a90 	vmov	s15, r3
 8004966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800496a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800496e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004972:	edd7 6a07 	vldr	s13, [r7, #28]
 8004976:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800497a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800497e:	ee17 2a90 	vmov	r2, s15
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004986:	e008      	b.n	800499a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	609a      	str	r2, [r3, #8]
}
 800499a:	bf00      	nop
 800499c:	3724      	adds	r7, #36	; 0x24
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	58024400 	.word	0x58024400
 80049ac:	03d09000 	.word	0x03d09000
 80049b0:	46000000 	.word	0x46000000
 80049b4:	4c742400 	.word	0x4c742400
 80049b8:	4a742400 	.word	0x4a742400
 80049bc:	4bbebc20 	.word	0x4bbebc20

080049c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b089      	sub	sp, #36	; 0x24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049c8:	4ba1      	ldr	r3, [pc, #644]	; (8004c50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049cc:	f003 0303 	and.w	r3, r3, #3
 80049d0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80049d2:	4b9f      	ldr	r3, [pc, #636]	; (8004c50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d6:	0d1b      	lsrs	r3, r3, #20
 80049d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049dc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80049de:	4b9c      	ldr	r3, [pc, #624]	; (8004c50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e2:	0a1b      	lsrs	r3, r3, #8
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80049ea:	4b99      	ldr	r3, [pc, #612]	; (8004c50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ee:	08db      	lsrs	r3, r3, #3
 80049f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	fb02 f303 	mul.w	r3, r2, r3
 80049fa:	ee07 3a90 	vmov	s15, r3
 80049fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 8111 	beq.w	8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	f000 8083 	beq.w	8004b1c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	f200 80a1 	bhi.w	8004b60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d003      	beq.n	8004a2c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d056      	beq.n	8004ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004a2a:	e099      	b.n	8004b60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a2c:	4b88      	ldr	r3, [pc, #544]	; (8004c50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0320 	and.w	r3, r3, #32
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d02d      	beq.n	8004a94 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a38:	4b85      	ldr	r3, [pc, #532]	; (8004c50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	08db      	lsrs	r3, r3, #3
 8004a3e:	f003 0303 	and.w	r3, r3, #3
 8004a42:	4a84      	ldr	r2, [pc, #528]	; (8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004a44:	fa22 f303 	lsr.w	r3, r2, r3
 8004a48:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	ee07 3a90 	vmov	s15, r3
 8004a50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	ee07 3a90 	vmov	s15, r3
 8004a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a62:	4b7b      	ldr	r3, [pc, #492]	; (8004c50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a6a:	ee07 3a90 	vmov	s15, r3
 8004a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a72:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a76:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004c58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a8e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004a92:	e087      	b.n	8004ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	ee07 3a90 	vmov	s15, r3
 8004a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a9e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aa6:	4b6a      	ldr	r3, [pc, #424]	; (8004c50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aae:	ee07 3a90 	vmov	s15, r3
 8004ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ab6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004c58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ac6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ad2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ad6:	e065      	b.n	8004ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	ee07 3a90 	vmov	s15, r3
 8004ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004c60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aea:	4b59      	ldr	r3, [pc, #356]	; (8004c50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af2:	ee07 3a90 	vmov	s15, r3
 8004af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004afa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004afe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004c58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b1a:	e043      	b.n	8004ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	ee07 3a90 	vmov	s15, r3
 8004b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b26:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b2e:	4b48      	ldr	r3, [pc, #288]	; (8004c50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b36:	ee07 3a90 	vmov	s15, r3
 8004b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b42:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004c58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b5e:	e021      	b.n	8004ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	ee07 3a90 	vmov	s15, r3
 8004b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b6a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004c60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b72:	4b37      	ldr	r3, [pc, #220]	; (8004c50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b7a:	ee07 3a90 	vmov	s15, r3
 8004b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b82:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b86:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004c58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ba2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004ba4:	4b2a      	ldr	r3, [pc, #168]	; (8004c50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba8:	0a5b      	lsrs	r3, r3, #9
 8004baa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bae:	ee07 3a90 	vmov	s15, r3
 8004bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bca:	ee17 2a90 	vmov	r2, s15
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004bd2:	4b1f      	ldr	r3, [pc, #124]	; (8004c50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd6:	0c1b      	lsrs	r3, r3, #16
 8004bd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bdc:	ee07 3a90 	vmov	s15, r3
 8004be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004be4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004be8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bec:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bf8:	ee17 2a90 	vmov	r2, s15
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004c00:	4b13      	ldr	r3, [pc, #76]	; (8004c50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c04:	0e1b      	lsrs	r3, r3, #24
 8004c06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c0a:	ee07 3a90 	vmov	s15, r3
 8004c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c26:	ee17 2a90 	vmov	r2, s15
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004c2e:	e008      	b.n	8004c42 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	609a      	str	r2, [r3, #8]
}
 8004c42:	bf00      	nop
 8004c44:	3724      	adds	r7, #36	; 0x24
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	58024400 	.word	0x58024400
 8004c54:	03d09000 	.word	0x03d09000
 8004c58:	46000000 	.word	0x46000000
 8004c5c:	4c742400 	.word	0x4c742400
 8004c60:	4a742400 	.word	0x4a742400
 8004c64:	4bbebc20 	.word	0x4bbebc20

08004c68 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c72:	2300      	movs	r3, #0
 8004c74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c76:	4b53      	ldr	r3, [pc, #332]	; (8004dc4 <RCCEx_PLL2_Config+0x15c>)
 8004c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7a:	f003 0303 	and.w	r3, r3, #3
 8004c7e:	2b03      	cmp	r3, #3
 8004c80:	d101      	bne.n	8004c86 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e099      	b.n	8004dba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004c86:	4b4f      	ldr	r3, [pc, #316]	; (8004dc4 <RCCEx_PLL2_Config+0x15c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a4e      	ldr	r2, [pc, #312]	; (8004dc4 <RCCEx_PLL2_Config+0x15c>)
 8004c8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c92:	f7fc f9f5 	bl	8001080 <HAL_GetTick>
 8004c96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c98:	e008      	b.n	8004cac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c9a:	f7fc f9f1 	bl	8001080 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d901      	bls.n	8004cac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e086      	b.n	8004dba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cac:	4b45      	ldr	r3, [pc, #276]	; (8004dc4 <RCCEx_PLL2_Config+0x15c>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1f0      	bne.n	8004c9a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004cb8:	4b42      	ldr	r3, [pc, #264]	; (8004dc4 <RCCEx_PLL2_Config+0x15c>)
 8004cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cbc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	031b      	lsls	r3, r3, #12
 8004cc6:	493f      	ldr	r1, [pc, #252]	; (8004dc4 <RCCEx_PLL2_Config+0x15c>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	628b      	str	r3, [r1, #40]	; 0x28
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	025b      	lsls	r3, r3, #9
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	041b      	lsls	r3, r3, #16
 8004cea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	061b      	lsls	r3, r3, #24
 8004cf8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004cfc:	4931      	ldr	r1, [pc, #196]	; (8004dc4 <RCCEx_PLL2_Config+0x15c>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004d02:	4b30      	ldr	r3, [pc, #192]	; (8004dc4 <RCCEx_PLL2_Config+0x15c>)
 8004d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d06:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	492d      	ldr	r1, [pc, #180]	; (8004dc4 <RCCEx_PLL2_Config+0x15c>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d14:	4b2b      	ldr	r3, [pc, #172]	; (8004dc4 <RCCEx_PLL2_Config+0x15c>)
 8004d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d18:	f023 0220 	bic.w	r2, r3, #32
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	4928      	ldr	r1, [pc, #160]	; (8004dc4 <RCCEx_PLL2_Config+0x15c>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004d26:	4b27      	ldr	r3, [pc, #156]	; (8004dc4 <RCCEx_PLL2_Config+0x15c>)
 8004d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2a:	4a26      	ldr	r2, [pc, #152]	; (8004dc4 <RCCEx_PLL2_Config+0x15c>)
 8004d2c:	f023 0310 	bic.w	r3, r3, #16
 8004d30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d32:	4b24      	ldr	r3, [pc, #144]	; (8004dc4 <RCCEx_PLL2_Config+0x15c>)
 8004d34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d36:	4b24      	ldr	r3, [pc, #144]	; (8004dc8 <RCCEx_PLL2_Config+0x160>)
 8004d38:	4013      	ands	r3, r2
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	69d2      	ldr	r2, [r2, #28]
 8004d3e:	00d2      	lsls	r2, r2, #3
 8004d40:	4920      	ldr	r1, [pc, #128]	; (8004dc4 <RCCEx_PLL2_Config+0x15c>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d46:	4b1f      	ldr	r3, [pc, #124]	; (8004dc4 <RCCEx_PLL2_Config+0x15c>)
 8004d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4a:	4a1e      	ldr	r2, [pc, #120]	; (8004dc4 <RCCEx_PLL2_Config+0x15c>)
 8004d4c:	f043 0310 	orr.w	r3, r3, #16
 8004d50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d106      	bne.n	8004d66 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d58:	4b1a      	ldr	r3, [pc, #104]	; (8004dc4 <RCCEx_PLL2_Config+0x15c>)
 8004d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5c:	4a19      	ldr	r2, [pc, #100]	; (8004dc4 <RCCEx_PLL2_Config+0x15c>)
 8004d5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d64:	e00f      	b.n	8004d86 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d106      	bne.n	8004d7a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d6c:	4b15      	ldr	r3, [pc, #84]	; (8004dc4 <RCCEx_PLL2_Config+0x15c>)
 8004d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d70:	4a14      	ldr	r2, [pc, #80]	; (8004dc4 <RCCEx_PLL2_Config+0x15c>)
 8004d72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d78:	e005      	b.n	8004d86 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d7a:	4b12      	ldr	r3, [pc, #72]	; (8004dc4 <RCCEx_PLL2_Config+0x15c>)
 8004d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7e:	4a11      	ldr	r2, [pc, #68]	; (8004dc4 <RCCEx_PLL2_Config+0x15c>)
 8004d80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d84:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004d86:	4b0f      	ldr	r3, [pc, #60]	; (8004dc4 <RCCEx_PLL2_Config+0x15c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a0e      	ldr	r2, [pc, #56]	; (8004dc4 <RCCEx_PLL2_Config+0x15c>)
 8004d8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d92:	f7fc f975 	bl	8001080 <HAL_GetTick>
 8004d96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d98:	e008      	b.n	8004dac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d9a:	f7fc f971 	bl	8001080 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d901      	bls.n	8004dac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e006      	b.n	8004dba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004dac:	4b05      	ldr	r3, [pc, #20]	; (8004dc4 <RCCEx_PLL2_Config+0x15c>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0f0      	beq.n	8004d9a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	58024400 	.word	0x58024400
 8004dc8:	ffff0007 	.word	0xffff0007

08004dcc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004dda:	4b53      	ldr	r3, [pc, #332]	; (8004f28 <RCCEx_PLL3_Config+0x15c>)
 8004ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dde:	f003 0303 	and.w	r3, r3, #3
 8004de2:	2b03      	cmp	r3, #3
 8004de4:	d101      	bne.n	8004dea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e099      	b.n	8004f1e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004dea:	4b4f      	ldr	r3, [pc, #316]	; (8004f28 <RCCEx_PLL3_Config+0x15c>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a4e      	ldr	r2, [pc, #312]	; (8004f28 <RCCEx_PLL3_Config+0x15c>)
 8004df0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004df4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004df6:	f7fc f943 	bl	8001080 <HAL_GetTick>
 8004dfa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004dfc:	e008      	b.n	8004e10 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004dfe:	f7fc f93f 	bl	8001080 <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d901      	bls.n	8004e10 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e086      	b.n	8004f1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e10:	4b45      	ldr	r3, [pc, #276]	; (8004f28 <RCCEx_PLL3_Config+0x15c>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1f0      	bne.n	8004dfe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004e1c:	4b42      	ldr	r3, [pc, #264]	; (8004f28 <RCCEx_PLL3_Config+0x15c>)
 8004e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e20:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	051b      	lsls	r3, r3, #20
 8004e2a:	493f      	ldr	r1, [pc, #252]	; (8004f28 <RCCEx_PLL3_Config+0x15c>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	628b      	str	r3, [r1, #40]	; 0x28
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	3b01      	subs	r3, #1
 8004e36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	025b      	lsls	r3, r3, #9
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	431a      	orrs	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	041b      	lsls	r3, r3, #16
 8004e4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004e52:	431a      	orrs	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	061b      	lsls	r3, r3, #24
 8004e5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004e60:	4931      	ldr	r1, [pc, #196]	; (8004f28 <RCCEx_PLL3_Config+0x15c>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004e66:	4b30      	ldr	r3, [pc, #192]	; (8004f28 <RCCEx_PLL3_Config+0x15c>)
 8004e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	492d      	ldr	r1, [pc, #180]	; (8004f28 <RCCEx_PLL3_Config+0x15c>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e78:	4b2b      	ldr	r3, [pc, #172]	; (8004f28 <RCCEx_PLL3_Config+0x15c>)
 8004e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	4928      	ldr	r1, [pc, #160]	; (8004f28 <RCCEx_PLL3_Config+0x15c>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e8a:	4b27      	ldr	r3, [pc, #156]	; (8004f28 <RCCEx_PLL3_Config+0x15c>)
 8004e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8e:	4a26      	ldr	r2, [pc, #152]	; (8004f28 <RCCEx_PLL3_Config+0x15c>)
 8004e90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004e96:	4b24      	ldr	r3, [pc, #144]	; (8004f28 <RCCEx_PLL3_Config+0x15c>)
 8004e98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e9a:	4b24      	ldr	r3, [pc, #144]	; (8004f2c <RCCEx_PLL3_Config+0x160>)
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	69d2      	ldr	r2, [r2, #28]
 8004ea2:	00d2      	lsls	r2, r2, #3
 8004ea4:	4920      	ldr	r1, [pc, #128]	; (8004f28 <RCCEx_PLL3_Config+0x15c>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004eaa:	4b1f      	ldr	r3, [pc, #124]	; (8004f28 <RCCEx_PLL3_Config+0x15c>)
 8004eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eae:	4a1e      	ldr	r2, [pc, #120]	; (8004f28 <RCCEx_PLL3_Config+0x15c>)
 8004eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d106      	bne.n	8004eca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004ebc:	4b1a      	ldr	r3, [pc, #104]	; (8004f28 <RCCEx_PLL3_Config+0x15c>)
 8004ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec0:	4a19      	ldr	r2, [pc, #100]	; (8004f28 <RCCEx_PLL3_Config+0x15c>)
 8004ec2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ec6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ec8:	e00f      	b.n	8004eea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d106      	bne.n	8004ede <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004ed0:	4b15      	ldr	r3, [pc, #84]	; (8004f28 <RCCEx_PLL3_Config+0x15c>)
 8004ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed4:	4a14      	ldr	r2, [pc, #80]	; (8004f28 <RCCEx_PLL3_Config+0x15c>)
 8004ed6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004eda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004edc:	e005      	b.n	8004eea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004ede:	4b12      	ldr	r3, [pc, #72]	; (8004f28 <RCCEx_PLL3_Config+0x15c>)
 8004ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee2:	4a11      	ldr	r2, [pc, #68]	; (8004f28 <RCCEx_PLL3_Config+0x15c>)
 8004ee4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ee8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004eea:	4b0f      	ldr	r3, [pc, #60]	; (8004f28 <RCCEx_PLL3_Config+0x15c>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a0e      	ldr	r2, [pc, #56]	; (8004f28 <RCCEx_PLL3_Config+0x15c>)
 8004ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ef4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ef6:	f7fc f8c3 	bl	8001080 <HAL_GetTick>
 8004efa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004efc:	e008      	b.n	8004f10 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004efe:	f7fc f8bf 	bl	8001080 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d901      	bls.n	8004f10 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e006      	b.n	8004f1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f10:	4b05      	ldr	r3, [pc, #20]	; (8004f28 <RCCEx_PLL3_Config+0x15c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d0f0      	beq.n	8004efe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	58024400 	.word	0x58024400
 8004f2c:	ffff0007 	.word	0xffff0007

08004f30 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e049      	b.n	8004fd6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d106      	bne.n	8004f5c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7fb fdf4 	bl	8000b44 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	3304      	adds	r3, #4
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	4610      	mov	r0, r2
 8004f70:	f000 fad2 	bl	8005518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
	...

08004fe0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d109      	bne.n	8005004 <HAL_TIM_PWM_Start+0x24>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	bf14      	ite	ne
 8004ffc:	2301      	movne	r3, #1
 8004ffe:	2300      	moveq	r3, #0
 8005000:	b2db      	uxtb	r3, r3
 8005002:	e03c      	b.n	800507e <HAL_TIM_PWM_Start+0x9e>
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	2b04      	cmp	r3, #4
 8005008:	d109      	bne.n	800501e <HAL_TIM_PWM_Start+0x3e>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b01      	cmp	r3, #1
 8005014:	bf14      	ite	ne
 8005016:	2301      	movne	r3, #1
 8005018:	2300      	moveq	r3, #0
 800501a:	b2db      	uxtb	r3, r3
 800501c:	e02f      	b.n	800507e <HAL_TIM_PWM_Start+0x9e>
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	2b08      	cmp	r3, #8
 8005022:	d109      	bne.n	8005038 <HAL_TIM_PWM_Start+0x58>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b01      	cmp	r3, #1
 800502e:	bf14      	ite	ne
 8005030:	2301      	movne	r3, #1
 8005032:	2300      	moveq	r3, #0
 8005034:	b2db      	uxtb	r3, r3
 8005036:	e022      	b.n	800507e <HAL_TIM_PWM_Start+0x9e>
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	2b0c      	cmp	r3, #12
 800503c:	d109      	bne.n	8005052 <HAL_TIM_PWM_Start+0x72>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b01      	cmp	r3, #1
 8005048:	bf14      	ite	ne
 800504a:	2301      	movne	r3, #1
 800504c:	2300      	moveq	r3, #0
 800504e:	b2db      	uxtb	r3, r3
 8005050:	e015      	b.n	800507e <HAL_TIM_PWM_Start+0x9e>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2b10      	cmp	r3, #16
 8005056:	d109      	bne.n	800506c <HAL_TIM_PWM_Start+0x8c>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b01      	cmp	r3, #1
 8005062:	bf14      	ite	ne
 8005064:	2301      	movne	r3, #1
 8005066:	2300      	moveq	r3, #0
 8005068:	b2db      	uxtb	r3, r3
 800506a:	e008      	b.n	800507e <HAL_TIM_PWM_Start+0x9e>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b01      	cmp	r3, #1
 8005076:	bf14      	ite	ne
 8005078:	2301      	movne	r3, #1
 800507a:	2300      	moveq	r3, #0
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e0a1      	b.n	80051ca <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d104      	bne.n	8005096 <HAL_TIM_PWM_Start+0xb6>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005094:	e023      	b.n	80050de <HAL_TIM_PWM_Start+0xfe>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2b04      	cmp	r3, #4
 800509a:	d104      	bne.n	80050a6 <HAL_TIM_PWM_Start+0xc6>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2202      	movs	r2, #2
 80050a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050a4:	e01b      	b.n	80050de <HAL_TIM_PWM_Start+0xfe>
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	d104      	bne.n	80050b6 <HAL_TIM_PWM_Start+0xd6>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050b4:	e013      	b.n	80050de <HAL_TIM_PWM_Start+0xfe>
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	2b0c      	cmp	r3, #12
 80050ba:	d104      	bne.n	80050c6 <HAL_TIM_PWM_Start+0xe6>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050c4:	e00b      	b.n	80050de <HAL_TIM_PWM_Start+0xfe>
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	2b10      	cmp	r3, #16
 80050ca:	d104      	bne.n	80050d6 <HAL_TIM_PWM_Start+0xf6>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2202      	movs	r2, #2
 80050d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050d4:	e003      	b.n	80050de <HAL_TIM_PWM_Start+0xfe>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2202      	movs	r2, #2
 80050da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2201      	movs	r2, #1
 80050e4:	6839      	ldr	r1, [r7, #0]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 fd92 	bl	8005c10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a38      	ldr	r2, [pc, #224]	; (80051d4 <HAL_TIM_PWM_Start+0x1f4>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d013      	beq.n	800511e <HAL_TIM_PWM_Start+0x13e>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a37      	ldr	r2, [pc, #220]	; (80051d8 <HAL_TIM_PWM_Start+0x1f8>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d00e      	beq.n	800511e <HAL_TIM_PWM_Start+0x13e>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a35      	ldr	r2, [pc, #212]	; (80051dc <HAL_TIM_PWM_Start+0x1fc>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d009      	beq.n	800511e <HAL_TIM_PWM_Start+0x13e>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a34      	ldr	r2, [pc, #208]	; (80051e0 <HAL_TIM_PWM_Start+0x200>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d004      	beq.n	800511e <HAL_TIM_PWM_Start+0x13e>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a32      	ldr	r2, [pc, #200]	; (80051e4 <HAL_TIM_PWM_Start+0x204>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d101      	bne.n	8005122 <HAL_TIM_PWM_Start+0x142>
 800511e:	2301      	movs	r3, #1
 8005120:	e000      	b.n	8005124 <HAL_TIM_PWM_Start+0x144>
 8005122:	2300      	movs	r3, #0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d007      	beq.n	8005138 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005136:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a25      	ldr	r2, [pc, #148]	; (80051d4 <HAL_TIM_PWM_Start+0x1f4>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d022      	beq.n	8005188 <HAL_TIM_PWM_Start+0x1a8>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800514a:	d01d      	beq.n	8005188 <HAL_TIM_PWM_Start+0x1a8>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a25      	ldr	r2, [pc, #148]	; (80051e8 <HAL_TIM_PWM_Start+0x208>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d018      	beq.n	8005188 <HAL_TIM_PWM_Start+0x1a8>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a24      	ldr	r2, [pc, #144]	; (80051ec <HAL_TIM_PWM_Start+0x20c>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d013      	beq.n	8005188 <HAL_TIM_PWM_Start+0x1a8>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a22      	ldr	r2, [pc, #136]	; (80051f0 <HAL_TIM_PWM_Start+0x210>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d00e      	beq.n	8005188 <HAL_TIM_PWM_Start+0x1a8>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a1a      	ldr	r2, [pc, #104]	; (80051d8 <HAL_TIM_PWM_Start+0x1f8>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d009      	beq.n	8005188 <HAL_TIM_PWM_Start+0x1a8>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a1e      	ldr	r2, [pc, #120]	; (80051f4 <HAL_TIM_PWM_Start+0x214>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d004      	beq.n	8005188 <HAL_TIM_PWM_Start+0x1a8>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a16      	ldr	r2, [pc, #88]	; (80051dc <HAL_TIM_PWM_Start+0x1fc>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d115      	bne.n	80051b4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	4b1a      	ldr	r3, [pc, #104]	; (80051f8 <HAL_TIM_PWM_Start+0x218>)
 8005190:	4013      	ands	r3, r2
 8005192:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2b06      	cmp	r3, #6
 8005198:	d015      	beq.n	80051c6 <HAL_TIM_PWM_Start+0x1e6>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051a0:	d011      	beq.n	80051c6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f042 0201 	orr.w	r2, r2, #1
 80051b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051b2:	e008      	b.n	80051c6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 0201 	orr.w	r2, r2, #1
 80051c2:	601a      	str	r2, [r3, #0]
 80051c4:	e000      	b.n	80051c8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	40010000 	.word	0x40010000
 80051d8:	40010400 	.word	0x40010400
 80051dc:	40014000 	.word	0x40014000
 80051e0:	40014400 	.word	0x40014400
 80051e4:	40014800 	.word	0x40014800
 80051e8:	40000400 	.word	0x40000400
 80051ec:	40000800 	.word	0x40000800
 80051f0:	40000c00 	.word	0x40000c00
 80051f4:	40001800 	.word	0x40001800
 80051f8:	00010007 	.word	0x00010007

080051fc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005208:	2300      	movs	r3, #0
 800520a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005212:	2b01      	cmp	r3, #1
 8005214:	d101      	bne.n	800521a <HAL_TIM_OC_ConfigChannel+0x1e>
 8005216:	2302      	movs	r3, #2
 8005218:	e066      	b.n	80052e8 <HAL_TIM_OC_ConfigChannel+0xec>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2b14      	cmp	r3, #20
 8005226:	d857      	bhi.n	80052d8 <HAL_TIM_OC_ConfigChannel+0xdc>
 8005228:	a201      	add	r2, pc, #4	; (adr r2, 8005230 <HAL_TIM_OC_ConfigChannel+0x34>)
 800522a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800522e:	bf00      	nop
 8005230:	08005285 	.word	0x08005285
 8005234:	080052d9 	.word	0x080052d9
 8005238:	080052d9 	.word	0x080052d9
 800523c:	080052d9 	.word	0x080052d9
 8005240:	08005293 	.word	0x08005293
 8005244:	080052d9 	.word	0x080052d9
 8005248:	080052d9 	.word	0x080052d9
 800524c:	080052d9 	.word	0x080052d9
 8005250:	080052a1 	.word	0x080052a1
 8005254:	080052d9 	.word	0x080052d9
 8005258:	080052d9 	.word	0x080052d9
 800525c:	080052d9 	.word	0x080052d9
 8005260:	080052af 	.word	0x080052af
 8005264:	080052d9 	.word	0x080052d9
 8005268:	080052d9 	.word	0x080052d9
 800526c:	080052d9 	.word	0x080052d9
 8005270:	080052bd 	.word	0x080052bd
 8005274:	080052d9 	.word	0x080052d9
 8005278:	080052d9 	.word	0x080052d9
 800527c:	080052d9 	.word	0x080052d9
 8005280:	080052cb 	.word	0x080052cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68b9      	ldr	r1, [r7, #8]
 800528a:	4618      	mov	r0, r3
 800528c:	f000 f9ea 	bl	8005664 <TIM_OC1_SetConfig>
      break;
 8005290:	e025      	b.n	80052de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68b9      	ldr	r1, [r7, #8]
 8005298:	4618      	mov	r0, r3
 800529a:	f000 fa73 	bl	8005784 <TIM_OC2_SetConfig>
      break;
 800529e:	e01e      	b.n	80052de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68b9      	ldr	r1, [r7, #8]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 faf6 	bl	8005898 <TIM_OC3_SetConfig>
      break;
 80052ac:	e017      	b.n	80052de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68b9      	ldr	r1, [r7, #8]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f000 fb77 	bl	80059a8 <TIM_OC4_SetConfig>
      break;
 80052ba:	e010      	b.n	80052de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68b9      	ldr	r1, [r7, #8]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 fbda 	bl	8005a7c <TIM_OC5_SetConfig>
      break;
 80052c8:	e009      	b.n	80052de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68b9      	ldr	r1, [r7, #8]
 80052d0:	4618      	mov	r0, r3
 80052d2:	f000 fc37 	bl	8005b44 <TIM_OC6_SetConfig>
      break;
 80052d6:	e002      	b.n	80052de <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	75fb      	strb	r3, [r7, #23]
      break;
 80052dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3718      	adds	r7, #24
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052fc:	2300      	movs	r3, #0
 80052fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005306:	2b01      	cmp	r3, #1
 8005308:	d101      	bne.n	800530e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800530a:	2302      	movs	r3, #2
 800530c:	e0ff      	b.n	800550e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2b14      	cmp	r3, #20
 800531a:	f200 80f0 	bhi.w	80054fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800531e:	a201      	add	r2, pc, #4	; (adr r2, 8005324 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005324:	08005379 	.word	0x08005379
 8005328:	080054ff 	.word	0x080054ff
 800532c:	080054ff 	.word	0x080054ff
 8005330:	080054ff 	.word	0x080054ff
 8005334:	080053b9 	.word	0x080053b9
 8005338:	080054ff 	.word	0x080054ff
 800533c:	080054ff 	.word	0x080054ff
 8005340:	080054ff 	.word	0x080054ff
 8005344:	080053fb 	.word	0x080053fb
 8005348:	080054ff 	.word	0x080054ff
 800534c:	080054ff 	.word	0x080054ff
 8005350:	080054ff 	.word	0x080054ff
 8005354:	0800543b 	.word	0x0800543b
 8005358:	080054ff 	.word	0x080054ff
 800535c:	080054ff 	.word	0x080054ff
 8005360:	080054ff 	.word	0x080054ff
 8005364:	0800547d 	.word	0x0800547d
 8005368:	080054ff 	.word	0x080054ff
 800536c:	080054ff 	.word	0x080054ff
 8005370:	080054ff 	.word	0x080054ff
 8005374:	080054bd 	.word	0x080054bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68b9      	ldr	r1, [r7, #8]
 800537e:	4618      	mov	r0, r3
 8005380:	f000 f970 	bl	8005664 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	699a      	ldr	r2, [r3, #24]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f042 0208 	orr.w	r2, r2, #8
 8005392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	699a      	ldr	r2, [r3, #24]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f022 0204 	bic.w	r2, r2, #4
 80053a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6999      	ldr	r1, [r3, #24]
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	691a      	ldr	r2, [r3, #16]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	619a      	str	r2, [r3, #24]
      break;
 80053b6:	e0a5      	b.n	8005504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68b9      	ldr	r1, [r7, #8]
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 f9e0 	bl	8005784 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	699a      	ldr	r2, [r3, #24]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699a      	ldr	r2, [r3, #24]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6999      	ldr	r1, [r3, #24]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	021a      	lsls	r2, r3, #8
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	430a      	orrs	r2, r1
 80053f6:	619a      	str	r2, [r3, #24]
      break;
 80053f8:	e084      	b.n	8005504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68b9      	ldr	r1, [r7, #8]
 8005400:	4618      	mov	r0, r3
 8005402:	f000 fa49 	bl	8005898 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	69da      	ldr	r2, [r3, #28]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f042 0208 	orr.w	r2, r2, #8
 8005414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	69da      	ldr	r2, [r3, #28]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0204 	bic.w	r2, r2, #4
 8005424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	69d9      	ldr	r1, [r3, #28]
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	691a      	ldr	r2, [r3, #16]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	430a      	orrs	r2, r1
 8005436:	61da      	str	r2, [r3, #28]
      break;
 8005438:	e064      	b.n	8005504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68b9      	ldr	r1, [r7, #8]
 8005440:	4618      	mov	r0, r3
 8005442:	f000 fab1 	bl	80059a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	69da      	ldr	r2, [r3, #28]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	69da      	ldr	r2, [r3, #28]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	69d9      	ldr	r1, [r3, #28]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	021a      	lsls	r2, r3, #8
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	61da      	str	r2, [r3, #28]
      break;
 800547a:	e043      	b.n	8005504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68b9      	ldr	r1, [r7, #8]
 8005482:	4618      	mov	r0, r3
 8005484:	f000 fafa 	bl	8005a7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f042 0208 	orr.w	r2, r2, #8
 8005496:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 0204 	bic.w	r2, r2, #4
 80054a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	691a      	ldr	r2, [r3, #16]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80054ba:	e023      	b.n	8005504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68b9      	ldr	r1, [r7, #8]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 fb3e 	bl	8005b44 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	021a      	lsls	r2, r3, #8
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80054fc:	e002      	b.n	8005504 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	75fb      	strb	r3, [r7, #23]
      break;
 8005502:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800550c:	7dfb      	ldrb	r3, [r7, #23]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3718      	adds	r7, #24
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop

08005518 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a46      	ldr	r2, [pc, #280]	; (8005644 <TIM_Base_SetConfig+0x12c>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d013      	beq.n	8005558 <TIM_Base_SetConfig+0x40>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005536:	d00f      	beq.n	8005558 <TIM_Base_SetConfig+0x40>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a43      	ldr	r2, [pc, #268]	; (8005648 <TIM_Base_SetConfig+0x130>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d00b      	beq.n	8005558 <TIM_Base_SetConfig+0x40>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a42      	ldr	r2, [pc, #264]	; (800564c <TIM_Base_SetConfig+0x134>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d007      	beq.n	8005558 <TIM_Base_SetConfig+0x40>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a41      	ldr	r2, [pc, #260]	; (8005650 <TIM_Base_SetConfig+0x138>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d003      	beq.n	8005558 <TIM_Base_SetConfig+0x40>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a40      	ldr	r2, [pc, #256]	; (8005654 <TIM_Base_SetConfig+0x13c>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d108      	bne.n	800556a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	4313      	orrs	r3, r2
 8005568:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a35      	ldr	r2, [pc, #212]	; (8005644 <TIM_Base_SetConfig+0x12c>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d01f      	beq.n	80055b2 <TIM_Base_SetConfig+0x9a>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005578:	d01b      	beq.n	80055b2 <TIM_Base_SetConfig+0x9a>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a32      	ldr	r2, [pc, #200]	; (8005648 <TIM_Base_SetConfig+0x130>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d017      	beq.n	80055b2 <TIM_Base_SetConfig+0x9a>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a31      	ldr	r2, [pc, #196]	; (800564c <TIM_Base_SetConfig+0x134>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d013      	beq.n	80055b2 <TIM_Base_SetConfig+0x9a>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a30      	ldr	r2, [pc, #192]	; (8005650 <TIM_Base_SetConfig+0x138>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d00f      	beq.n	80055b2 <TIM_Base_SetConfig+0x9a>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a2f      	ldr	r2, [pc, #188]	; (8005654 <TIM_Base_SetConfig+0x13c>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d00b      	beq.n	80055b2 <TIM_Base_SetConfig+0x9a>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a2e      	ldr	r2, [pc, #184]	; (8005658 <TIM_Base_SetConfig+0x140>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d007      	beq.n	80055b2 <TIM_Base_SetConfig+0x9a>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a2d      	ldr	r2, [pc, #180]	; (800565c <TIM_Base_SetConfig+0x144>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d003      	beq.n	80055b2 <TIM_Base_SetConfig+0x9a>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a2c      	ldr	r2, [pc, #176]	; (8005660 <TIM_Base_SetConfig+0x148>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d108      	bne.n	80055c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a16      	ldr	r2, [pc, #88]	; (8005644 <TIM_Base_SetConfig+0x12c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d00f      	beq.n	8005610 <TIM_Base_SetConfig+0xf8>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a18      	ldr	r2, [pc, #96]	; (8005654 <TIM_Base_SetConfig+0x13c>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d00b      	beq.n	8005610 <TIM_Base_SetConfig+0xf8>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a17      	ldr	r2, [pc, #92]	; (8005658 <TIM_Base_SetConfig+0x140>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d007      	beq.n	8005610 <TIM_Base_SetConfig+0xf8>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a16      	ldr	r2, [pc, #88]	; (800565c <TIM_Base_SetConfig+0x144>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d003      	beq.n	8005610 <TIM_Base_SetConfig+0xf8>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a15      	ldr	r2, [pc, #84]	; (8005660 <TIM_Base_SetConfig+0x148>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d103      	bne.n	8005618 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	691a      	ldr	r2, [r3, #16]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	2b01      	cmp	r3, #1
 8005628:	d105      	bne.n	8005636 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	f023 0201 	bic.w	r2, r3, #1
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	611a      	str	r2, [r3, #16]
  }
}
 8005636:	bf00      	nop
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	40010000 	.word	0x40010000
 8005648:	40000400 	.word	0x40000400
 800564c:	40000800 	.word	0x40000800
 8005650:	40000c00 	.word	0x40000c00
 8005654:	40010400 	.word	0x40010400
 8005658:	40014000 	.word	0x40014000
 800565c:	40014400 	.word	0x40014400
 8005660:	40014800 	.word	0x40014800

08005664 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005664:	b480      	push	{r7}
 8005666:	b087      	sub	sp, #28
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	f023 0201 	bic.w	r2, r3, #1
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	4b37      	ldr	r3, [pc, #220]	; (800576c <TIM_OC1_SetConfig+0x108>)
 8005690:	4013      	ands	r3, r2
 8005692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f023 0303 	bic.w	r3, r3, #3
 800569a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f023 0302 	bic.w	r3, r3, #2
 80056ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a2d      	ldr	r2, [pc, #180]	; (8005770 <TIM_OC1_SetConfig+0x10c>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d00f      	beq.n	80056e0 <TIM_OC1_SetConfig+0x7c>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a2c      	ldr	r2, [pc, #176]	; (8005774 <TIM_OC1_SetConfig+0x110>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d00b      	beq.n	80056e0 <TIM_OC1_SetConfig+0x7c>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a2b      	ldr	r2, [pc, #172]	; (8005778 <TIM_OC1_SetConfig+0x114>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d007      	beq.n	80056e0 <TIM_OC1_SetConfig+0x7c>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a2a      	ldr	r2, [pc, #168]	; (800577c <TIM_OC1_SetConfig+0x118>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d003      	beq.n	80056e0 <TIM_OC1_SetConfig+0x7c>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a29      	ldr	r2, [pc, #164]	; (8005780 <TIM_OC1_SetConfig+0x11c>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d10c      	bne.n	80056fa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	f023 0308 	bic.w	r3, r3, #8
 80056e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f023 0304 	bic.w	r3, r3, #4
 80056f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a1c      	ldr	r2, [pc, #112]	; (8005770 <TIM_OC1_SetConfig+0x10c>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d00f      	beq.n	8005722 <TIM_OC1_SetConfig+0xbe>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a1b      	ldr	r2, [pc, #108]	; (8005774 <TIM_OC1_SetConfig+0x110>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d00b      	beq.n	8005722 <TIM_OC1_SetConfig+0xbe>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a1a      	ldr	r2, [pc, #104]	; (8005778 <TIM_OC1_SetConfig+0x114>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d007      	beq.n	8005722 <TIM_OC1_SetConfig+0xbe>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a19      	ldr	r2, [pc, #100]	; (800577c <TIM_OC1_SetConfig+0x118>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d003      	beq.n	8005722 <TIM_OC1_SetConfig+0xbe>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a18      	ldr	r2, [pc, #96]	; (8005780 <TIM_OC1_SetConfig+0x11c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d111      	bne.n	8005746 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005728:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005730:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	4313      	orrs	r3, r2
 800573a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	4313      	orrs	r3, r2
 8005744:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	621a      	str	r2, [r3, #32]
}
 8005760:	bf00      	nop
 8005762:	371c      	adds	r7, #28
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr
 800576c:	fffeff8f 	.word	0xfffeff8f
 8005770:	40010000 	.word	0x40010000
 8005774:	40010400 	.word	0x40010400
 8005778:	40014000 	.word	0x40014000
 800577c:	40014400 	.word	0x40014400
 8005780:	40014800 	.word	0x40014800

08005784 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005784:	b480      	push	{r7}
 8005786:	b087      	sub	sp, #28
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	f023 0210 	bic.w	r2, r3, #16
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	4b34      	ldr	r3, [pc, #208]	; (8005880 <TIM_OC2_SetConfig+0xfc>)
 80057b0:	4013      	ands	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	021b      	lsls	r3, r3, #8
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f023 0320 	bic.w	r3, r3, #32
 80057ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	011b      	lsls	r3, r3, #4
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	4313      	orrs	r3, r2
 80057da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a29      	ldr	r2, [pc, #164]	; (8005884 <TIM_OC2_SetConfig+0x100>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d003      	beq.n	80057ec <TIM_OC2_SetConfig+0x68>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a28      	ldr	r2, [pc, #160]	; (8005888 <TIM_OC2_SetConfig+0x104>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d10d      	bne.n	8005808 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	011b      	lsls	r3, r3, #4
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005806:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a1e      	ldr	r2, [pc, #120]	; (8005884 <TIM_OC2_SetConfig+0x100>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d00f      	beq.n	8005830 <TIM_OC2_SetConfig+0xac>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a1d      	ldr	r2, [pc, #116]	; (8005888 <TIM_OC2_SetConfig+0x104>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d00b      	beq.n	8005830 <TIM_OC2_SetConfig+0xac>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a1c      	ldr	r2, [pc, #112]	; (800588c <TIM_OC2_SetConfig+0x108>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d007      	beq.n	8005830 <TIM_OC2_SetConfig+0xac>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a1b      	ldr	r2, [pc, #108]	; (8005890 <TIM_OC2_SetConfig+0x10c>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d003      	beq.n	8005830 <TIM_OC2_SetConfig+0xac>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a1a      	ldr	r2, [pc, #104]	; (8005894 <TIM_OC2_SetConfig+0x110>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d113      	bne.n	8005858 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005836:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800583e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	4313      	orrs	r3, r2
 800584a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	4313      	orrs	r3, r2
 8005856:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	621a      	str	r2, [r3, #32]
}
 8005872:	bf00      	nop
 8005874:	371c      	adds	r7, #28
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	feff8fff 	.word	0xfeff8fff
 8005884:	40010000 	.word	0x40010000
 8005888:	40010400 	.word	0x40010400
 800588c:	40014000 	.word	0x40014000
 8005890:	40014400 	.word	0x40014400
 8005894:	40014800 	.word	0x40014800

08005898 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a1b      	ldr	r3, [r3, #32]
 80058ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	4b33      	ldr	r3, [pc, #204]	; (8005990 <TIM_OC3_SetConfig+0xf8>)
 80058c4:	4013      	ands	r3, r2
 80058c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f023 0303 	bic.w	r3, r3, #3
 80058ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	021b      	lsls	r3, r3, #8
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a28      	ldr	r2, [pc, #160]	; (8005994 <TIM_OC3_SetConfig+0xfc>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d003      	beq.n	80058fe <TIM_OC3_SetConfig+0x66>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a27      	ldr	r2, [pc, #156]	; (8005998 <TIM_OC3_SetConfig+0x100>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d10d      	bne.n	800591a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005904:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	021b      	lsls	r3, r3, #8
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	4313      	orrs	r3, r2
 8005910:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005918:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a1d      	ldr	r2, [pc, #116]	; (8005994 <TIM_OC3_SetConfig+0xfc>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d00f      	beq.n	8005942 <TIM_OC3_SetConfig+0xaa>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a1c      	ldr	r2, [pc, #112]	; (8005998 <TIM_OC3_SetConfig+0x100>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d00b      	beq.n	8005942 <TIM_OC3_SetConfig+0xaa>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a1b      	ldr	r2, [pc, #108]	; (800599c <TIM_OC3_SetConfig+0x104>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d007      	beq.n	8005942 <TIM_OC3_SetConfig+0xaa>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a1a      	ldr	r2, [pc, #104]	; (80059a0 <TIM_OC3_SetConfig+0x108>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d003      	beq.n	8005942 <TIM_OC3_SetConfig+0xaa>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a19      	ldr	r2, [pc, #100]	; (80059a4 <TIM_OC3_SetConfig+0x10c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d113      	bne.n	800596a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005948:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005950:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	011b      	lsls	r3, r3, #4
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	4313      	orrs	r3, r2
 800595c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	011b      	lsls	r3, r3, #4
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	4313      	orrs	r3, r2
 8005968:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	685a      	ldr	r2, [r3, #4]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	621a      	str	r2, [r3, #32]
}
 8005984:	bf00      	nop
 8005986:	371c      	adds	r7, #28
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	fffeff8f 	.word	0xfffeff8f
 8005994:	40010000 	.word	0x40010000
 8005998:	40010400 	.word	0x40010400
 800599c:	40014000 	.word	0x40014000
 80059a0:	40014400 	.word	0x40014400
 80059a4:	40014800 	.word	0x40014800

080059a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a1b      	ldr	r3, [r3, #32]
 80059bc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	4b24      	ldr	r3, [pc, #144]	; (8005a64 <TIM_OC4_SetConfig+0xbc>)
 80059d4:	4013      	ands	r3, r2
 80059d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	021b      	lsls	r3, r3, #8
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	031b      	lsls	r3, r3, #12
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a19      	ldr	r2, [pc, #100]	; (8005a68 <TIM_OC4_SetConfig+0xc0>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d00f      	beq.n	8005a28 <TIM_OC4_SetConfig+0x80>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a18      	ldr	r2, [pc, #96]	; (8005a6c <TIM_OC4_SetConfig+0xc4>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d00b      	beq.n	8005a28 <TIM_OC4_SetConfig+0x80>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a17      	ldr	r2, [pc, #92]	; (8005a70 <TIM_OC4_SetConfig+0xc8>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d007      	beq.n	8005a28 <TIM_OC4_SetConfig+0x80>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a16      	ldr	r2, [pc, #88]	; (8005a74 <TIM_OC4_SetConfig+0xcc>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d003      	beq.n	8005a28 <TIM_OC4_SetConfig+0x80>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a15      	ldr	r2, [pc, #84]	; (8005a78 <TIM_OC4_SetConfig+0xd0>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d109      	bne.n	8005a3c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	019b      	lsls	r3, r3, #6
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	621a      	str	r2, [r3, #32]
}
 8005a56:	bf00      	nop
 8005a58:	371c      	adds	r7, #28
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	feff8fff 	.word	0xfeff8fff
 8005a68:	40010000 	.word	0x40010000
 8005a6c:	40010400 	.word	0x40010400
 8005a70:	40014000 	.word	0x40014000
 8005a74:	40014400 	.word	0x40014400
 8005a78:	40014800 	.word	0x40014800

08005a7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b087      	sub	sp, #28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a1b      	ldr	r3, [r3, #32]
 8005a90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	4b21      	ldr	r3, [pc, #132]	; (8005b2c <TIM_OC5_SetConfig+0xb0>)
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005abc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	041b      	lsls	r3, r3, #16
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a18      	ldr	r2, [pc, #96]	; (8005b30 <TIM_OC5_SetConfig+0xb4>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d00f      	beq.n	8005af2 <TIM_OC5_SetConfig+0x76>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a17      	ldr	r2, [pc, #92]	; (8005b34 <TIM_OC5_SetConfig+0xb8>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d00b      	beq.n	8005af2 <TIM_OC5_SetConfig+0x76>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a16      	ldr	r2, [pc, #88]	; (8005b38 <TIM_OC5_SetConfig+0xbc>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d007      	beq.n	8005af2 <TIM_OC5_SetConfig+0x76>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a15      	ldr	r2, [pc, #84]	; (8005b3c <TIM_OC5_SetConfig+0xc0>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d003      	beq.n	8005af2 <TIM_OC5_SetConfig+0x76>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a14      	ldr	r2, [pc, #80]	; (8005b40 <TIM_OC5_SetConfig+0xc4>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d109      	bne.n	8005b06 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005af8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	021b      	lsls	r3, r3, #8
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	621a      	str	r2, [r3, #32]
}
 8005b20:	bf00      	nop
 8005b22:	371c      	adds	r7, #28
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr
 8005b2c:	fffeff8f 	.word	0xfffeff8f
 8005b30:	40010000 	.word	0x40010000
 8005b34:	40010400 	.word	0x40010400
 8005b38:	40014000 	.word	0x40014000
 8005b3c:	40014400 	.word	0x40014400
 8005b40:	40014800 	.word	0x40014800

08005b44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b087      	sub	sp, #28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	4b22      	ldr	r3, [pc, #136]	; (8005bf8 <TIM_OC6_SetConfig+0xb4>)
 8005b70:	4013      	ands	r3, r2
 8005b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	021b      	lsls	r3, r3, #8
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	051b      	lsls	r3, r3, #20
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a19      	ldr	r2, [pc, #100]	; (8005bfc <TIM_OC6_SetConfig+0xb8>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d00f      	beq.n	8005bbc <TIM_OC6_SetConfig+0x78>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a18      	ldr	r2, [pc, #96]	; (8005c00 <TIM_OC6_SetConfig+0xbc>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d00b      	beq.n	8005bbc <TIM_OC6_SetConfig+0x78>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a17      	ldr	r2, [pc, #92]	; (8005c04 <TIM_OC6_SetConfig+0xc0>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d007      	beq.n	8005bbc <TIM_OC6_SetConfig+0x78>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a16      	ldr	r2, [pc, #88]	; (8005c08 <TIM_OC6_SetConfig+0xc4>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d003      	beq.n	8005bbc <TIM_OC6_SetConfig+0x78>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a15      	ldr	r2, [pc, #84]	; (8005c0c <TIM_OC6_SetConfig+0xc8>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d109      	bne.n	8005bd0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	029b      	lsls	r3, r3, #10
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	685a      	ldr	r2, [r3, #4]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	621a      	str	r2, [r3, #32]
}
 8005bea:	bf00      	nop
 8005bec:	371c      	adds	r7, #28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	feff8fff 	.word	0xfeff8fff
 8005bfc:	40010000 	.word	0x40010000
 8005c00:	40010400 	.word	0x40010400
 8005c04:	40014000 	.word	0x40014000
 8005c08:	40014400 	.word	0x40014400
 8005c0c:	40014800 	.word	0x40014800

08005c10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	f003 031f 	and.w	r3, r3, #31
 8005c22:	2201      	movs	r2, #1
 8005c24:	fa02 f303 	lsl.w	r3, r2, r3
 8005c28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6a1a      	ldr	r2, [r3, #32]
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	43db      	mvns	r3, r3
 8005c32:	401a      	ands	r2, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6a1a      	ldr	r2, [r3, #32]
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	f003 031f 	and.w	r3, r3, #31
 8005c42:	6879      	ldr	r1, [r7, #4]
 8005c44:	fa01 f303 	lsl.w	r3, r1, r3
 8005c48:	431a      	orrs	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	621a      	str	r2, [r3, #32]
}
 8005c4e:	bf00      	nop
 8005c50:	371c      	adds	r7, #28
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
	...

08005c5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d101      	bne.n	8005c74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c70:	2302      	movs	r3, #2
 8005c72:	e06d      	b.n	8005d50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2202      	movs	r2, #2
 8005c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a30      	ldr	r2, [pc, #192]	; (8005d5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d004      	beq.n	8005ca8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a2f      	ldr	r2, [pc, #188]	; (8005d60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d108      	bne.n	8005cba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005cae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cc0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a20      	ldr	r2, [pc, #128]	; (8005d5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d022      	beq.n	8005d24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ce6:	d01d      	beq.n	8005d24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a1d      	ldr	r2, [pc, #116]	; (8005d64 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d018      	beq.n	8005d24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a1c      	ldr	r2, [pc, #112]	; (8005d68 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d013      	beq.n	8005d24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a1a      	ldr	r2, [pc, #104]	; (8005d6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d00e      	beq.n	8005d24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a15      	ldr	r2, [pc, #84]	; (8005d60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d009      	beq.n	8005d24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a16      	ldr	r2, [pc, #88]	; (8005d70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d004      	beq.n	8005d24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a15      	ldr	r2, [pc, #84]	; (8005d74 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d10c      	bne.n	8005d3e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3714      	adds	r7, #20
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr
 8005d5c:	40010000 	.word	0x40010000
 8005d60:	40010400 	.word	0x40010400
 8005d64:	40000400 	.word	0x40000400
 8005d68:	40000800 	.word	0x40000800
 8005d6c:	40000c00 	.word	0x40000c00
 8005d70:	40001800 	.word	0x40001800
 8005d74:	40014000 	.word	0x40014000

08005d78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d82:	2300      	movs	r3, #0
 8005d84:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d101      	bne.n	8005d94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d90:	2302      	movs	r3, #2
 8005d92:	e065      	b.n	8005e60 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	695b      	ldr	r3, [r3, #20]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	041b      	lsls	r3, r3, #16
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a16      	ldr	r2, [pc, #88]	; (8005e6c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d004      	beq.n	8005e22 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a14      	ldr	r2, [pc, #80]	; (8005e70 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d115      	bne.n	8005e4e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	051b      	lsls	r3, r3, #20
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	69db      	ldr	r3, [r3, #28]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3714      	adds	r7, #20
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr
 8005e6c:	40010000 	.word	0x40010000
 8005e70:	40010400 	.word	0x40010400

08005e74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e050      	b.n	8005f28 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d114      	bne.n	8005eba <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 fd41 	bl	8006920 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d103      	bne.n	8005eb0 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a21      	ldr	r2, [pc, #132]	; (8005f30 <HAL_UART_Init+0xbc>)
 8005eac:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2224      	movs	r2, #36	; 0x24
 8005ebe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f022 0201 	bic.w	r2, r2, #1
 8005ed0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d002      	beq.n	8005ee0 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f001 fada 	bl	8007494 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 fd6f 	bl	80069c4 <UART_SetConfig>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d101      	bne.n	8005ef0 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e01b      	b.n	8005f28 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	685a      	ldr	r2, [r3, #4]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005efe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	689a      	ldr	r2, [r3, #8]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f042 0201 	orr.w	r2, r2, #1
 8005f1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f001 fb59 	bl	80075d8 <UART_CheckIdleState>
 8005f26:	4603      	mov	r3, r0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	08000c01 	.word	0x08000c01

08005f34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b08a      	sub	sp, #40	; 0x28
 8005f38:	af02      	add	r7, sp, #8
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	603b      	str	r3, [r7, #0]
 8005f40:	4613      	mov	r3, r2
 8005f42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f4a:	2b20      	cmp	r3, #32
 8005f4c:	d17b      	bne.n	8006046 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d002      	beq.n	8005f5a <HAL_UART_Transmit+0x26>
 8005f54:	88fb      	ldrh	r3, [r7, #6]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e074      	b.n	8006048 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2221      	movs	r2, #33	; 0x21
 8005f6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f6e:	f7fb f887 	bl	8001080 <HAL_GetTick>
 8005f72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	88fa      	ldrh	r2, [r7, #6]
 8005f78:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	88fa      	ldrh	r2, [r7, #6]
 8005f80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f8c:	d108      	bne.n	8005fa0 <HAL_UART_Transmit+0x6c>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d104      	bne.n	8005fa0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005f96:	2300      	movs	r3, #0
 8005f98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	61bb      	str	r3, [r7, #24]
 8005f9e:	e003      	b.n	8005fa8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005fa8:	e030      	b.n	800600c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	2180      	movs	r1, #128	; 0x80
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f001 fbb9 	bl	800772c <UART_WaitOnFlagUntilTimeout>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d005      	beq.n	8005fcc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2220      	movs	r2, #32
 8005fc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e03d      	b.n	8006048 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10b      	bne.n	8005fea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	881b      	ldrh	r3, [r3, #0]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fe0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	3302      	adds	r3, #2
 8005fe6:	61bb      	str	r3, [r7, #24]
 8005fe8:	e007      	b.n	8005ffa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	781a      	ldrb	r2, [r3, #0]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006000:	b29b      	uxth	r3, r3
 8006002:	3b01      	subs	r3, #1
 8006004:	b29a      	uxth	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006012:	b29b      	uxth	r3, r3
 8006014:	2b00      	cmp	r3, #0
 8006016:	d1c8      	bne.n	8005faa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	2200      	movs	r2, #0
 8006020:	2140      	movs	r1, #64	; 0x40
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f001 fb82 	bl	800772c <UART_WaitOnFlagUntilTimeout>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d005      	beq.n	800603a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2220      	movs	r2, #32
 8006032:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e006      	b.n	8006048 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2220      	movs	r2, #32
 800603e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006042:	2300      	movs	r3, #0
 8006044:	e000      	b.n	8006048 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006046:	2302      	movs	r3, #2
  }
}
 8006048:	4618      	mov	r0, r3
 800604a:	3720      	adds	r7, #32
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b08a      	sub	sp, #40	; 0x28
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	4613      	mov	r3, r2
 800605c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006064:	2b20      	cmp	r3, #32
 8006066:	d137      	bne.n	80060d8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d002      	beq.n	8006074 <HAL_UART_Receive_IT+0x24>
 800606e:	88fb      	ldrh	r3, [r7, #6]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d101      	bne.n	8006078 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e030      	b.n	80060da <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a18      	ldr	r2, [pc, #96]	; (80060e4 <HAL_UART_Receive_IT+0x94>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d01f      	beq.n	80060c8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d018      	beq.n	80060c8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	e853 3f00 	ldrex	r3, [r3]
 80060a2:	613b      	str	r3, [r7, #16]
   return(result);
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060aa:	627b      	str	r3, [r7, #36]	; 0x24
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	461a      	mov	r2, r3
 80060b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b4:	623b      	str	r3, [r7, #32]
 80060b6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b8:	69f9      	ldr	r1, [r7, #28]
 80060ba:	6a3a      	ldr	r2, [r7, #32]
 80060bc:	e841 2300 	strex	r3, r2, [r1]
 80060c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1e6      	bne.n	8006096 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80060c8:	88fb      	ldrh	r3, [r7, #6]
 80060ca:	461a      	mov	r2, r3
 80060cc:	68b9      	ldr	r1, [r7, #8]
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	f001 fb9a 	bl	8007808 <UART_Start_Receive_IT>
 80060d4:	4603      	mov	r3, r0
 80060d6:	e000      	b.n	80060da <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80060d8:	2302      	movs	r3, #2
  }
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3728      	adds	r7, #40	; 0x28
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	58000c00 	.word	0x58000c00

080060e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b0ba      	sub	sp, #232	; 0xe8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800610e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006112:	f640 030f 	movw	r3, #2063	; 0x80f
 8006116:	4013      	ands	r3, r2
 8006118:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800611c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006120:	2b00      	cmp	r3, #0
 8006122:	d11b      	bne.n	800615c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006128:	f003 0320 	and.w	r3, r3, #32
 800612c:	2b00      	cmp	r3, #0
 800612e:	d015      	beq.n	800615c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006134:	f003 0320 	and.w	r3, r3, #32
 8006138:	2b00      	cmp	r3, #0
 800613a:	d105      	bne.n	8006148 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800613c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d009      	beq.n	800615c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800614c:	2b00      	cmp	r3, #0
 800614e:	f000 8387 	beq.w	8006860 <HAL_UART_IRQHandler+0x778>
      {
        huart->RxISR(huart);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	4798      	blx	r3
      }
      return;
 800615a:	e381      	b.n	8006860 <HAL_UART_IRQHandler+0x778>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800615c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 8129 	beq.w	80063b8 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006166:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800616a:	4b90      	ldr	r3, [pc, #576]	; (80063ac <HAL_UART_IRQHandler+0x2c4>)
 800616c:	4013      	ands	r3, r2
 800616e:	2b00      	cmp	r3, #0
 8006170:	d106      	bne.n	8006180 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006172:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006176:	4b8e      	ldr	r3, [pc, #568]	; (80063b0 <HAL_UART_IRQHandler+0x2c8>)
 8006178:	4013      	ands	r3, r2
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 811c 	beq.w	80063b8 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006184:	f003 0301 	and.w	r3, r3, #1
 8006188:	2b00      	cmp	r3, #0
 800618a:	d011      	beq.n	80061b0 <HAL_UART_IRQHandler+0xc8>
 800618c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00b      	beq.n	80061b0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2201      	movs	r2, #1
 800619e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a6:	f043 0201 	orr.w	r2, r3, #1
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061b4:	f003 0302 	and.w	r3, r3, #2
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d011      	beq.n	80061e0 <HAL_UART_IRQHandler+0xf8>
 80061bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061c0:	f003 0301 	and.w	r3, r3, #1
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00b      	beq.n	80061e0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2202      	movs	r2, #2
 80061ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061d6:	f043 0204 	orr.w	r2, r3, #4
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061e4:	f003 0304 	and.w	r3, r3, #4
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d011      	beq.n	8006210 <HAL_UART_IRQHandler+0x128>
 80061ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061f0:	f003 0301 	and.w	r3, r3, #1
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00b      	beq.n	8006210 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2204      	movs	r2, #4
 80061fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006206:	f043 0202 	orr.w	r2, r3, #2
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006214:	f003 0308 	and.w	r3, r3, #8
 8006218:	2b00      	cmp	r3, #0
 800621a:	d017      	beq.n	800624c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800621c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006220:	f003 0320 	and.w	r3, r3, #32
 8006224:	2b00      	cmp	r3, #0
 8006226:	d105      	bne.n	8006234 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006228:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800622c:	4b5f      	ldr	r3, [pc, #380]	; (80063ac <HAL_UART_IRQHandler+0x2c4>)
 800622e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00b      	beq.n	800624c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2208      	movs	r2, #8
 800623a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006242:	f043 0208 	orr.w	r2, r3, #8
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800624c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006250:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006254:	2b00      	cmp	r3, #0
 8006256:	d012      	beq.n	800627e <HAL_UART_IRQHandler+0x196>
 8006258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800625c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00c      	beq.n	800627e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800626c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006274:	f043 0220 	orr.w	r2, r3, #32
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006284:	2b00      	cmp	r3, #0
 8006286:	f000 82ed 	beq.w	8006864 <HAL_UART_IRQHandler+0x77c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800628a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800628e:	f003 0320 	and.w	r3, r3, #32
 8006292:	2b00      	cmp	r3, #0
 8006294:	d013      	beq.n	80062be <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800629a:	f003 0320 	and.w	r3, r3, #32
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d105      	bne.n	80062ae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80062a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d007      	beq.n	80062be <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d003      	beq.n	80062be <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d2:	2b40      	cmp	r3, #64	; 0x40
 80062d4:	d005      	beq.n	80062e2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80062d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d058      	beq.n	8006394 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f001 fbb2 	bl	8007a4c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f2:	2b40      	cmp	r3, #64	; 0x40
 80062f4:	d148      	bne.n	8006388 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	3308      	adds	r3, #8
 80062fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006300:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006304:	e853 3f00 	ldrex	r3, [r3]
 8006308:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800630c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006310:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006314:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	3308      	adds	r3, #8
 800631e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006322:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006326:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800632e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006332:	e841 2300 	strex	r3, r2, [r1]
 8006336:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800633a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1d9      	bne.n	80062f6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006348:	2b00      	cmp	r3, #0
 800634a:	d017      	beq.n	800637c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006352:	4a18      	ldr	r2, [pc, #96]	; (80063b4 <HAL_UART_IRQHandler+0x2cc>)
 8006354:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800635c:	4618      	mov	r0, r3
 800635e:	f7fb fb71 	bl	8001a44 <HAL_DMA_Abort_IT>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d01f      	beq.n	80063a8 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800636e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006376:	4610      	mov	r0, r2
 8006378:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800637a:	e015      	b.n	80063a8 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006386:	e00f      	b.n	80063a8 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006392:	e009      	b.n	80063a8 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80063a6:	e25d      	b.n	8006864 <HAL_UART_IRQHandler+0x77c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a8:	bf00      	nop
    return;
 80063aa:	e25b      	b.n	8006864 <HAL_UART_IRQHandler+0x77c>
 80063ac:	10000001 	.word	0x10000001
 80063b0:	04000120 	.word	0x04000120
 80063b4:	08007b19 	.word	0x08007b19

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063bc:	2b01      	cmp	r3, #1
 80063be:	f040 81eb 	bne.w	8006798 <HAL_UART_IRQHandler+0x6b0>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80063c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063c6:	f003 0310 	and.w	r3, r3, #16
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	f000 81e4 	beq.w	8006798 <HAL_UART_IRQHandler+0x6b0>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80063d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063d4:	f003 0310 	and.w	r3, r3, #16
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 81dd 	beq.w	8006798 <HAL_UART_IRQHandler+0x6b0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2210      	movs	r2, #16
 80063e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f0:	2b40      	cmp	r3, #64	; 0x40
 80063f2:	f040 8153 	bne.w	800669c <HAL_UART_IRQHandler+0x5b4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a97      	ldr	r2, [pc, #604]	; (800665c <HAL_UART_IRQHandler+0x574>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d068      	beq.n	80064d6 <HAL_UART_IRQHandler+0x3ee>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a94      	ldr	r2, [pc, #592]	; (8006660 <HAL_UART_IRQHandler+0x578>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d061      	beq.n	80064d6 <HAL_UART_IRQHandler+0x3ee>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a92      	ldr	r2, [pc, #584]	; (8006664 <HAL_UART_IRQHandler+0x57c>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d05a      	beq.n	80064d6 <HAL_UART_IRQHandler+0x3ee>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a8f      	ldr	r2, [pc, #572]	; (8006668 <HAL_UART_IRQHandler+0x580>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d053      	beq.n	80064d6 <HAL_UART_IRQHandler+0x3ee>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a8d      	ldr	r2, [pc, #564]	; (800666c <HAL_UART_IRQHandler+0x584>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d04c      	beq.n	80064d6 <HAL_UART_IRQHandler+0x3ee>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a8a      	ldr	r2, [pc, #552]	; (8006670 <HAL_UART_IRQHandler+0x588>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d045      	beq.n	80064d6 <HAL_UART_IRQHandler+0x3ee>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a88      	ldr	r2, [pc, #544]	; (8006674 <HAL_UART_IRQHandler+0x58c>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d03e      	beq.n	80064d6 <HAL_UART_IRQHandler+0x3ee>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a85      	ldr	r2, [pc, #532]	; (8006678 <HAL_UART_IRQHandler+0x590>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d037      	beq.n	80064d6 <HAL_UART_IRQHandler+0x3ee>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a83      	ldr	r2, [pc, #524]	; (800667c <HAL_UART_IRQHandler+0x594>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d030      	beq.n	80064d6 <HAL_UART_IRQHandler+0x3ee>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a80      	ldr	r2, [pc, #512]	; (8006680 <HAL_UART_IRQHandler+0x598>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d029      	beq.n	80064d6 <HAL_UART_IRQHandler+0x3ee>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a7e      	ldr	r2, [pc, #504]	; (8006684 <HAL_UART_IRQHandler+0x59c>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d022      	beq.n	80064d6 <HAL_UART_IRQHandler+0x3ee>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a7b      	ldr	r2, [pc, #492]	; (8006688 <HAL_UART_IRQHandler+0x5a0>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d01b      	beq.n	80064d6 <HAL_UART_IRQHandler+0x3ee>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a79      	ldr	r2, [pc, #484]	; (800668c <HAL_UART_IRQHandler+0x5a4>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d014      	beq.n	80064d6 <HAL_UART_IRQHandler+0x3ee>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a76      	ldr	r2, [pc, #472]	; (8006690 <HAL_UART_IRQHandler+0x5a8>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d00d      	beq.n	80064d6 <HAL_UART_IRQHandler+0x3ee>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a74      	ldr	r2, [pc, #464]	; (8006694 <HAL_UART_IRQHandler+0x5ac>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d006      	beq.n	80064d6 <HAL_UART_IRQHandler+0x3ee>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a71      	ldr	r2, [pc, #452]	; (8006698 <HAL_UART_IRQHandler+0x5b0>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d106      	bne.n	80064e4 <HAL_UART_IRQHandler+0x3fc>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	e005      	b.n	80064f0 <HAL_UART_IRQHandler+0x408>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f000 81b5 	beq.w	8006868 <HAL_UART_IRQHandler+0x780>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006504:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006508:	429a      	cmp	r2, r3
 800650a:	f080 81ad 	bcs.w	8006868 <HAL_UART_IRQHandler+0x780>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006514:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800651e:	69db      	ldr	r3, [r3, #28]
 8006520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006524:	f000 8087 	beq.w	8006636 <HAL_UART_IRQHandler+0x54e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006530:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006534:	e853 3f00 	ldrex	r3, [r3]
 8006538:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800653c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006540:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006544:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	461a      	mov	r2, r3
 800654e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006552:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006556:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800655e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006562:	e841 2300 	strex	r3, r2, [r1]
 8006566:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800656a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1da      	bne.n	8006528 <HAL_UART_IRQHandler+0x440>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	3308      	adds	r3, #8
 8006578:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800657c:	e853 3f00 	ldrex	r3, [r3]
 8006580:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006582:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006584:	f023 0301 	bic.w	r3, r3, #1
 8006588:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	3308      	adds	r3, #8
 8006592:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006596:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800659a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800659e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80065a2:	e841 2300 	strex	r3, r2, [r1]
 80065a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80065a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1e1      	bne.n	8006572 <HAL_UART_IRQHandler+0x48a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	3308      	adds	r3, #8
 80065b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065b8:	e853 3f00 	ldrex	r3, [r3]
 80065bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80065be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	3308      	adds	r3, #8
 80065ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80065d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80065d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80065d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80065da:	e841 2300 	strex	r3, r2, [r1]
 80065de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80065e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1e3      	bne.n	80065ae <HAL_UART_IRQHandler+0x4c6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2220      	movs	r2, #32
 80065ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065fc:	e853 3f00 	ldrex	r3, [r3]
 8006600:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006604:	f023 0310 	bic.w	r3, r3, #16
 8006608:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	461a      	mov	r2, r3
 8006612:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006616:	65bb      	str	r3, [r7, #88]	; 0x58
 8006618:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800661c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800661e:	e841 2300 	strex	r3, r2, [r1]
 8006622:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1e4      	bne.n	80065f4 <HAL_UART_IRQHandler+0x50c>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006630:	4618      	mov	r0, r3
 8006632:	f7fa fee9 	bl	8001408 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2202      	movs	r2, #2
 800663a:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 800664e:	b292      	uxth	r2, r2
 8006650:	1a8a      	subs	r2, r1, r2
 8006652:	b292      	uxth	r2, r2
 8006654:	4611      	mov	r1, r2
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800665a:	e105      	b.n	8006868 <HAL_UART_IRQHandler+0x780>
 800665c:	40020010 	.word	0x40020010
 8006660:	40020028 	.word	0x40020028
 8006664:	40020040 	.word	0x40020040
 8006668:	40020058 	.word	0x40020058
 800666c:	40020070 	.word	0x40020070
 8006670:	40020088 	.word	0x40020088
 8006674:	400200a0 	.word	0x400200a0
 8006678:	400200b8 	.word	0x400200b8
 800667c:	40020410 	.word	0x40020410
 8006680:	40020428 	.word	0x40020428
 8006684:	40020440 	.word	0x40020440
 8006688:	40020458 	.word	0x40020458
 800668c:	40020470 	.word	0x40020470
 8006690:	40020488 	.word	0x40020488
 8006694:	400204a0 	.word	0x400204a0
 8006698:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f000 80d7 	beq.w	800686c <HAL_UART_IRQHandler+0x784>
          && (nb_rx_data > 0U))
 80066be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f000 80d2 	beq.w	800686c <HAL_UART_IRQHandler+0x784>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d0:	e853 3f00 	ldrex	r3, [r3]
 80066d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	461a      	mov	r2, r3
 80066e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066ea:	647b      	str	r3, [r7, #68]	; 0x44
 80066ec:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066f2:	e841 2300 	strex	r3, r2, [r1]
 80066f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1e4      	bne.n	80066c8 <HAL_UART_IRQHandler+0x5e0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	3308      	adds	r3, #8
 8006704:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006708:	e853 3f00 	ldrex	r3, [r3]
 800670c:	623b      	str	r3, [r7, #32]
   return(result);
 800670e:	6a3a      	ldr	r2, [r7, #32]
 8006710:	4b59      	ldr	r3, [pc, #356]	; (8006878 <HAL_UART_IRQHandler+0x790>)
 8006712:	4013      	ands	r3, r2
 8006714:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	3308      	adds	r3, #8
 800671e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006722:	633a      	str	r2, [r7, #48]	; 0x30
 8006724:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006726:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800672a:	e841 2300 	strex	r3, r2, [r1]
 800672e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1e3      	bne.n	80066fe <HAL_UART_IRQHandler+0x616>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2220      	movs	r2, #32
 800673a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	e853 3f00 	ldrex	r3, [r3]
 8006756:	60fb      	str	r3, [r7, #12]
   return(result);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f023 0310 	bic.w	r3, r3, #16
 800675e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	461a      	mov	r2, r3
 8006768:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800676c:	61fb      	str	r3, [r7, #28]
 800676e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006770:	69b9      	ldr	r1, [r7, #24]
 8006772:	69fa      	ldr	r2, [r7, #28]
 8006774:	e841 2300 	strex	r3, r2, [r1]
 8006778:	617b      	str	r3, [r7, #20]
   return(result);
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1e4      	bne.n	800674a <HAL_UART_IRQHandler+0x662>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2202      	movs	r2, #2
 8006784:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800678c:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8006790:	4611      	mov	r1, r2
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006796:	e069      	b.n	800686c <HAL_UART_IRQHandler+0x784>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800679c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d010      	beq.n	80067c6 <HAL_UART_IRQHandler+0x6de>
 80067a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00a      	beq.n	80067c6 <HAL_UART_IRQHandler+0x6de>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80067b8:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80067c4:	e055      	b.n	8006872 <HAL_UART_IRQHandler+0x78a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80067c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d014      	beq.n	80067fc <HAL_UART_IRQHandler+0x714>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80067d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d105      	bne.n	80067ea <HAL_UART_IRQHandler+0x702>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80067de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d008      	beq.n	80067fc <HAL_UART_IRQHandler+0x714>
  {
    if (huart->TxISR != NULL)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d03e      	beq.n	8006870 <HAL_UART_IRQHandler+0x788>
    {
      huart->TxISR(huart);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	4798      	blx	r3
    }
    return;
 80067fa:	e039      	b.n	8006870 <HAL_UART_IRQHandler+0x788>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80067fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006804:	2b00      	cmp	r3, #0
 8006806:	d009      	beq.n	800681c <HAL_UART_IRQHandler+0x734>
 8006808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800680c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006810:	2b00      	cmp	r3, #0
 8006812:	d003      	beq.n	800681c <HAL_UART_IRQHandler+0x734>
  {
    UART_EndTransmit_IT(huart);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f001 f997 	bl	8007b48 <UART_EndTransmit_IT>
    return;
 800681a:	e02a      	b.n	8006872 <HAL_UART_IRQHandler+0x78a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800681c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006820:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00b      	beq.n	8006840 <HAL_UART_IRQHandler+0x758>
 8006828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800682c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d005      	beq.n	8006840 <HAL_UART_IRQHandler+0x758>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800683e:	e018      	b.n	8006872 <HAL_UART_IRQHandler+0x78a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006844:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d012      	beq.n	8006872 <HAL_UART_IRQHandler+0x78a>
 800684c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006850:	2b00      	cmp	r3, #0
 8006852:	da0e      	bge.n	8006872 <HAL_UART_IRQHandler+0x78a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800685e:	e008      	b.n	8006872 <HAL_UART_IRQHandler+0x78a>
      return;
 8006860:	bf00      	nop
 8006862:	e006      	b.n	8006872 <HAL_UART_IRQHandler+0x78a>
    return;
 8006864:	bf00      	nop
 8006866:	e004      	b.n	8006872 <HAL_UART_IRQHandler+0x78a>
      return;
 8006868:	bf00      	nop
 800686a:	e002      	b.n	8006872 <HAL_UART_IRQHandler+0x78a>
      return;
 800686c:	bf00      	nop
 800686e:	e000      	b.n	8006872 <HAL_UART_IRQHandler+0x78a>
    return;
 8006870:	bf00      	nop
  }
}
 8006872:	37e8      	adds	r7, #232	; 0xe8
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	effffffe 	.word	0xeffffffe

0800687c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80068d4:	bf00      	nop
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80068e8:	bf00      	nop
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80068fc:	bf00      	nop
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	460b      	mov	r3, r1
 8006912:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a1a      	ldr	r2, [pc, #104]	; (8006994 <UART_InitCallbacksToDefault+0x74>)
 800692c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a19      	ldr	r2, [pc, #100]	; (8006998 <UART_InitCallbacksToDefault+0x78>)
 8006934:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a18      	ldr	r2, [pc, #96]	; (800699c <UART_InitCallbacksToDefault+0x7c>)
 800693c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a17      	ldr	r2, [pc, #92]	; (80069a0 <UART_InitCallbacksToDefault+0x80>)
 8006944:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a16      	ldr	r2, [pc, #88]	; (80069a4 <UART_InitCallbacksToDefault+0x84>)
 800694c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a15      	ldr	r2, [pc, #84]	; (80069a8 <UART_InitCallbacksToDefault+0x88>)
 8006954:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a14      	ldr	r2, [pc, #80]	; (80069ac <UART_InitCallbacksToDefault+0x8c>)
 800695c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a13      	ldr	r2, [pc, #76]	; (80069b0 <UART_InitCallbacksToDefault+0x90>)
 8006964:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a12      	ldr	r2, [pc, #72]	; (80069b4 <UART_InitCallbacksToDefault+0x94>)
 800696c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a11      	ldr	r2, [pc, #68]	; (80069b8 <UART_InitCallbacksToDefault+0x98>)
 8006974:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a10      	ldr	r2, [pc, #64]	; (80069bc <UART_InitCallbacksToDefault+0x9c>)
 800697c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a0f      	ldr	r2, [pc, #60]	; (80069c0 <UART_InitCallbacksToDefault+0xa0>)
 8006984:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	08006891 	.word	0x08006891
 8006998:	0800687d 	.word	0x0800687d
 800699c:	080068a5 	.word	0x080068a5
 80069a0:	08000a6d 	.word	0x08000a6d
 80069a4:	080068b9 	.word	0x080068b9
 80069a8:	080068cd 	.word	0x080068cd
 80069ac:	080068e1 	.word	0x080068e1
 80069b0:	080068f5 	.word	0x080068f5
 80069b4:	08008605 	.word	0x08008605
 80069b8:	08008619 	.word	0x08008619
 80069bc:	0800862d 	.word	0x0800862d
 80069c0:	08006909 	.word	0x08006909

080069c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069c8:	b092      	sub	sp, #72	; 0x48
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069ce:	2300      	movs	r3, #0
 80069d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	689a      	ldr	r2, [r3, #8]
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	431a      	orrs	r2, r3
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	431a      	orrs	r2, r3
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	69db      	ldr	r3, [r3, #28]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	4bbe      	ldr	r3, [pc, #760]	; (8006cec <UART_SetConfig+0x328>)
 80069f4:	4013      	ands	r3, r2
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	6812      	ldr	r2, [r2, #0]
 80069fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80069fc:	430b      	orrs	r3, r1
 80069fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	68da      	ldr	r2, [r3, #12]
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4ab3      	ldr	r2, [pc, #716]	; (8006cf0 <UART_SetConfig+0x32c>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d004      	beq.n	8006a30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	689a      	ldr	r2, [r3, #8]
 8006a36:	4baf      	ldr	r3, [pc, #700]	; (8006cf4 <UART_SetConfig+0x330>)
 8006a38:	4013      	ands	r3, r2
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	6812      	ldr	r2, [r2, #0]
 8006a3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a40:	430b      	orrs	r3, r1
 8006a42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4a:	f023 010f 	bic.w	r1, r3, #15
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	430a      	orrs	r2, r1
 8006a58:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4aa6      	ldr	r2, [pc, #664]	; (8006cf8 <UART_SetConfig+0x334>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d177      	bne.n	8006b54 <UART_SetConfig+0x190>
 8006a64:	4ba5      	ldr	r3, [pc, #660]	; (8006cfc <UART_SetConfig+0x338>)
 8006a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a6c:	2b28      	cmp	r3, #40	; 0x28
 8006a6e:	d86d      	bhi.n	8006b4c <UART_SetConfig+0x188>
 8006a70:	a201      	add	r2, pc, #4	; (adr r2, 8006a78 <UART_SetConfig+0xb4>)
 8006a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a76:	bf00      	nop
 8006a78:	08006b1d 	.word	0x08006b1d
 8006a7c:	08006b4d 	.word	0x08006b4d
 8006a80:	08006b4d 	.word	0x08006b4d
 8006a84:	08006b4d 	.word	0x08006b4d
 8006a88:	08006b4d 	.word	0x08006b4d
 8006a8c:	08006b4d 	.word	0x08006b4d
 8006a90:	08006b4d 	.word	0x08006b4d
 8006a94:	08006b4d 	.word	0x08006b4d
 8006a98:	08006b25 	.word	0x08006b25
 8006a9c:	08006b4d 	.word	0x08006b4d
 8006aa0:	08006b4d 	.word	0x08006b4d
 8006aa4:	08006b4d 	.word	0x08006b4d
 8006aa8:	08006b4d 	.word	0x08006b4d
 8006aac:	08006b4d 	.word	0x08006b4d
 8006ab0:	08006b4d 	.word	0x08006b4d
 8006ab4:	08006b4d 	.word	0x08006b4d
 8006ab8:	08006b2d 	.word	0x08006b2d
 8006abc:	08006b4d 	.word	0x08006b4d
 8006ac0:	08006b4d 	.word	0x08006b4d
 8006ac4:	08006b4d 	.word	0x08006b4d
 8006ac8:	08006b4d 	.word	0x08006b4d
 8006acc:	08006b4d 	.word	0x08006b4d
 8006ad0:	08006b4d 	.word	0x08006b4d
 8006ad4:	08006b4d 	.word	0x08006b4d
 8006ad8:	08006b35 	.word	0x08006b35
 8006adc:	08006b4d 	.word	0x08006b4d
 8006ae0:	08006b4d 	.word	0x08006b4d
 8006ae4:	08006b4d 	.word	0x08006b4d
 8006ae8:	08006b4d 	.word	0x08006b4d
 8006aec:	08006b4d 	.word	0x08006b4d
 8006af0:	08006b4d 	.word	0x08006b4d
 8006af4:	08006b4d 	.word	0x08006b4d
 8006af8:	08006b3d 	.word	0x08006b3d
 8006afc:	08006b4d 	.word	0x08006b4d
 8006b00:	08006b4d 	.word	0x08006b4d
 8006b04:	08006b4d 	.word	0x08006b4d
 8006b08:	08006b4d 	.word	0x08006b4d
 8006b0c:	08006b4d 	.word	0x08006b4d
 8006b10:	08006b4d 	.word	0x08006b4d
 8006b14:	08006b4d 	.word	0x08006b4d
 8006b18:	08006b45 	.word	0x08006b45
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b22:	e222      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006b24:	2304      	movs	r3, #4
 8006b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b2a:	e21e      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006b2c:	2308      	movs	r3, #8
 8006b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b32:	e21a      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006b34:	2310      	movs	r3, #16
 8006b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b3a:	e216      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006b3c:	2320      	movs	r3, #32
 8006b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b42:	e212      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006b44:	2340      	movs	r3, #64	; 0x40
 8006b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b4a:	e20e      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006b4c:	2380      	movs	r3, #128	; 0x80
 8006b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b52:	e20a      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a69      	ldr	r2, [pc, #420]	; (8006d00 <UART_SetConfig+0x33c>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d130      	bne.n	8006bc0 <UART_SetConfig+0x1fc>
 8006b5e:	4b67      	ldr	r3, [pc, #412]	; (8006cfc <UART_SetConfig+0x338>)
 8006b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b62:	f003 0307 	and.w	r3, r3, #7
 8006b66:	2b05      	cmp	r3, #5
 8006b68:	d826      	bhi.n	8006bb8 <UART_SetConfig+0x1f4>
 8006b6a:	a201      	add	r2, pc, #4	; (adr r2, 8006b70 <UART_SetConfig+0x1ac>)
 8006b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b70:	08006b89 	.word	0x08006b89
 8006b74:	08006b91 	.word	0x08006b91
 8006b78:	08006b99 	.word	0x08006b99
 8006b7c:	08006ba1 	.word	0x08006ba1
 8006b80:	08006ba9 	.word	0x08006ba9
 8006b84:	08006bb1 	.word	0x08006bb1
 8006b88:	2300      	movs	r3, #0
 8006b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b8e:	e1ec      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006b90:	2304      	movs	r3, #4
 8006b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b96:	e1e8      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006b98:	2308      	movs	r3, #8
 8006b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b9e:	e1e4      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006ba0:	2310      	movs	r3, #16
 8006ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ba6:	e1e0      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006ba8:	2320      	movs	r3, #32
 8006baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bae:	e1dc      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006bb0:	2340      	movs	r3, #64	; 0x40
 8006bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bb6:	e1d8      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006bb8:	2380      	movs	r3, #128	; 0x80
 8006bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bbe:	e1d4      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a4f      	ldr	r2, [pc, #316]	; (8006d04 <UART_SetConfig+0x340>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d130      	bne.n	8006c2c <UART_SetConfig+0x268>
 8006bca:	4b4c      	ldr	r3, [pc, #304]	; (8006cfc <UART_SetConfig+0x338>)
 8006bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bce:	f003 0307 	and.w	r3, r3, #7
 8006bd2:	2b05      	cmp	r3, #5
 8006bd4:	d826      	bhi.n	8006c24 <UART_SetConfig+0x260>
 8006bd6:	a201      	add	r2, pc, #4	; (adr r2, 8006bdc <UART_SetConfig+0x218>)
 8006bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bdc:	08006bf5 	.word	0x08006bf5
 8006be0:	08006bfd 	.word	0x08006bfd
 8006be4:	08006c05 	.word	0x08006c05
 8006be8:	08006c0d 	.word	0x08006c0d
 8006bec:	08006c15 	.word	0x08006c15
 8006bf0:	08006c1d 	.word	0x08006c1d
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bfa:	e1b6      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006bfc:	2304      	movs	r3, #4
 8006bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c02:	e1b2      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006c04:	2308      	movs	r3, #8
 8006c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c0a:	e1ae      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006c0c:	2310      	movs	r3, #16
 8006c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c12:	e1aa      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006c14:	2320      	movs	r3, #32
 8006c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c1a:	e1a6      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006c1c:	2340      	movs	r3, #64	; 0x40
 8006c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c22:	e1a2      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006c24:	2380      	movs	r3, #128	; 0x80
 8006c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c2a:	e19e      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a35      	ldr	r2, [pc, #212]	; (8006d08 <UART_SetConfig+0x344>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d130      	bne.n	8006c98 <UART_SetConfig+0x2d4>
 8006c36:	4b31      	ldr	r3, [pc, #196]	; (8006cfc <UART_SetConfig+0x338>)
 8006c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c3a:	f003 0307 	and.w	r3, r3, #7
 8006c3e:	2b05      	cmp	r3, #5
 8006c40:	d826      	bhi.n	8006c90 <UART_SetConfig+0x2cc>
 8006c42:	a201      	add	r2, pc, #4	; (adr r2, 8006c48 <UART_SetConfig+0x284>)
 8006c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c48:	08006c61 	.word	0x08006c61
 8006c4c:	08006c69 	.word	0x08006c69
 8006c50:	08006c71 	.word	0x08006c71
 8006c54:	08006c79 	.word	0x08006c79
 8006c58:	08006c81 	.word	0x08006c81
 8006c5c:	08006c89 	.word	0x08006c89
 8006c60:	2300      	movs	r3, #0
 8006c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c66:	e180      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006c68:	2304      	movs	r3, #4
 8006c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c6e:	e17c      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006c70:	2308      	movs	r3, #8
 8006c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c76:	e178      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006c78:	2310      	movs	r3, #16
 8006c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c7e:	e174      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006c80:	2320      	movs	r3, #32
 8006c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c86:	e170      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006c88:	2340      	movs	r3, #64	; 0x40
 8006c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c8e:	e16c      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006c90:	2380      	movs	r3, #128	; 0x80
 8006c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c96:	e168      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a1b      	ldr	r2, [pc, #108]	; (8006d0c <UART_SetConfig+0x348>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d142      	bne.n	8006d28 <UART_SetConfig+0x364>
 8006ca2:	4b16      	ldr	r3, [pc, #88]	; (8006cfc <UART_SetConfig+0x338>)
 8006ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ca6:	f003 0307 	and.w	r3, r3, #7
 8006caa:	2b05      	cmp	r3, #5
 8006cac:	d838      	bhi.n	8006d20 <UART_SetConfig+0x35c>
 8006cae:	a201      	add	r2, pc, #4	; (adr r2, 8006cb4 <UART_SetConfig+0x2f0>)
 8006cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb4:	08006ccd 	.word	0x08006ccd
 8006cb8:	08006cd5 	.word	0x08006cd5
 8006cbc:	08006cdd 	.word	0x08006cdd
 8006cc0:	08006ce5 	.word	0x08006ce5
 8006cc4:	08006d11 	.word	0x08006d11
 8006cc8:	08006d19 	.word	0x08006d19
 8006ccc:	2300      	movs	r3, #0
 8006cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cd2:	e14a      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006cd4:	2304      	movs	r3, #4
 8006cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cda:	e146      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006cdc:	2308      	movs	r3, #8
 8006cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ce2:	e142      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006ce4:	2310      	movs	r3, #16
 8006ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cea:	e13e      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006cec:	cfff69f3 	.word	0xcfff69f3
 8006cf0:	58000c00 	.word	0x58000c00
 8006cf4:	11fff4ff 	.word	0x11fff4ff
 8006cf8:	40011000 	.word	0x40011000
 8006cfc:	58024400 	.word	0x58024400
 8006d00:	40004400 	.word	0x40004400
 8006d04:	40004800 	.word	0x40004800
 8006d08:	40004c00 	.word	0x40004c00
 8006d0c:	40005000 	.word	0x40005000
 8006d10:	2320      	movs	r3, #32
 8006d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d16:	e128      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006d18:	2340      	movs	r3, #64	; 0x40
 8006d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d1e:	e124      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006d20:	2380      	movs	r3, #128	; 0x80
 8006d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d26:	e120      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4acb      	ldr	r2, [pc, #812]	; (800705c <UART_SetConfig+0x698>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d176      	bne.n	8006e20 <UART_SetConfig+0x45c>
 8006d32:	4bcb      	ldr	r3, [pc, #812]	; (8007060 <UART_SetConfig+0x69c>)
 8006d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d3a:	2b28      	cmp	r3, #40	; 0x28
 8006d3c:	d86c      	bhi.n	8006e18 <UART_SetConfig+0x454>
 8006d3e:	a201      	add	r2, pc, #4	; (adr r2, 8006d44 <UART_SetConfig+0x380>)
 8006d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d44:	08006de9 	.word	0x08006de9
 8006d48:	08006e19 	.word	0x08006e19
 8006d4c:	08006e19 	.word	0x08006e19
 8006d50:	08006e19 	.word	0x08006e19
 8006d54:	08006e19 	.word	0x08006e19
 8006d58:	08006e19 	.word	0x08006e19
 8006d5c:	08006e19 	.word	0x08006e19
 8006d60:	08006e19 	.word	0x08006e19
 8006d64:	08006df1 	.word	0x08006df1
 8006d68:	08006e19 	.word	0x08006e19
 8006d6c:	08006e19 	.word	0x08006e19
 8006d70:	08006e19 	.word	0x08006e19
 8006d74:	08006e19 	.word	0x08006e19
 8006d78:	08006e19 	.word	0x08006e19
 8006d7c:	08006e19 	.word	0x08006e19
 8006d80:	08006e19 	.word	0x08006e19
 8006d84:	08006df9 	.word	0x08006df9
 8006d88:	08006e19 	.word	0x08006e19
 8006d8c:	08006e19 	.word	0x08006e19
 8006d90:	08006e19 	.word	0x08006e19
 8006d94:	08006e19 	.word	0x08006e19
 8006d98:	08006e19 	.word	0x08006e19
 8006d9c:	08006e19 	.word	0x08006e19
 8006da0:	08006e19 	.word	0x08006e19
 8006da4:	08006e01 	.word	0x08006e01
 8006da8:	08006e19 	.word	0x08006e19
 8006dac:	08006e19 	.word	0x08006e19
 8006db0:	08006e19 	.word	0x08006e19
 8006db4:	08006e19 	.word	0x08006e19
 8006db8:	08006e19 	.word	0x08006e19
 8006dbc:	08006e19 	.word	0x08006e19
 8006dc0:	08006e19 	.word	0x08006e19
 8006dc4:	08006e09 	.word	0x08006e09
 8006dc8:	08006e19 	.word	0x08006e19
 8006dcc:	08006e19 	.word	0x08006e19
 8006dd0:	08006e19 	.word	0x08006e19
 8006dd4:	08006e19 	.word	0x08006e19
 8006dd8:	08006e19 	.word	0x08006e19
 8006ddc:	08006e19 	.word	0x08006e19
 8006de0:	08006e19 	.word	0x08006e19
 8006de4:	08006e11 	.word	0x08006e11
 8006de8:	2301      	movs	r3, #1
 8006dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dee:	e0bc      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006df0:	2304      	movs	r3, #4
 8006df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006df6:	e0b8      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006df8:	2308      	movs	r3, #8
 8006dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dfe:	e0b4      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006e00:	2310      	movs	r3, #16
 8006e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e06:	e0b0      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006e08:	2320      	movs	r3, #32
 8006e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e0e:	e0ac      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006e10:	2340      	movs	r3, #64	; 0x40
 8006e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e16:	e0a8      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006e18:	2380      	movs	r3, #128	; 0x80
 8006e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e1e:	e0a4      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a8f      	ldr	r2, [pc, #572]	; (8007064 <UART_SetConfig+0x6a0>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d130      	bne.n	8006e8c <UART_SetConfig+0x4c8>
 8006e2a:	4b8d      	ldr	r3, [pc, #564]	; (8007060 <UART_SetConfig+0x69c>)
 8006e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e2e:	f003 0307 	and.w	r3, r3, #7
 8006e32:	2b05      	cmp	r3, #5
 8006e34:	d826      	bhi.n	8006e84 <UART_SetConfig+0x4c0>
 8006e36:	a201      	add	r2, pc, #4	; (adr r2, 8006e3c <UART_SetConfig+0x478>)
 8006e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e3c:	08006e55 	.word	0x08006e55
 8006e40:	08006e5d 	.word	0x08006e5d
 8006e44:	08006e65 	.word	0x08006e65
 8006e48:	08006e6d 	.word	0x08006e6d
 8006e4c:	08006e75 	.word	0x08006e75
 8006e50:	08006e7d 	.word	0x08006e7d
 8006e54:	2300      	movs	r3, #0
 8006e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e5a:	e086      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006e5c:	2304      	movs	r3, #4
 8006e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e62:	e082      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006e64:	2308      	movs	r3, #8
 8006e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e6a:	e07e      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006e6c:	2310      	movs	r3, #16
 8006e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e72:	e07a      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006e74:	2320      	movs	r3, #32
 8006e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e7a:	e076      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006e7c:	2340      	movs	r3, #64	; 0x40
 8006e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e82:	e072      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006e84:	2380      	movs	r3, #128	; 0x80
 8006e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e8a:	e06e      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a75      	ldr	r2, [pc, #468]	; (8007068 <UART_SetConfig+0x6a4>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d130      	bne.n	8006ef8 <UART_SetConfig+0x534>
 8006e96:	4b72      	ldr	r3, [pc, #456]	; (8007060 <UART_SetConfig+0x69c>)
 8006e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e9a:	f003 0307 	and.w	r3, r3, #7
 8006e9e:	2b05      	cmp	r3, #5
 8006ea0:	d826      	bhi.n	8006ef0 <UART_SetConfig+0x52c>
 8006ea2:	a201      	add	r2, pc, #4	; (adr r2, 8006ea8 <UART_SetConfig+0x4e4>)
 8006ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea8:	08006ec1 	.word	0x08006ec1
 8006eac:	08006ec9 	.word	0x08006ec9
 8006eb0:	08006ed1 	.word	0x08006ed1
 8006eb4:	08006ed9 	.word	0x08006ed9
 8006eb8:	08006ee1 	.word	0x08006ee1
 8006ebc:	08006ee9 	.word	0x08006ee9
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ec6:	e050      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006ec8:	2304      	movs	r3, #4
 8006eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ece:	e04c      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006ed0:	2308      	movs	r3, #8
 8006ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ed6:	e048      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006ed8:	2310      	movs	r3, #16
 8006eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ede:	e044      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006ee0:	2320      	movs	r3, #32
 8006ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ee6:	e040      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006ee8:	2340      	movs	r3, #64	; 0x40
 8006eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eee:	e03c      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006ef0:	2380      	movs	r3, #128	; 0x80
 8006ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ef6:	e038      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a5b      	ldr	r2, [pc, #364]	; (800706c <UART_SetConfig+0x6a8>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d130      	bne.n	8006f64 <UART_SetConfig+0x5a0>
 8006f02:	4b57      	ldr	r3, [pc, #348]	; (8007060 <UART_SetConfig+0x69c>)
 8006f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f06:	f003 0307 	and.w	r3, r3, #7
 8006f0a:	2b05      	cmp	r3, #5
 8006f0c:	d826      	bhi.n	8006f5c <UART_SetConfig+0x598>
 8006f0e:	a201      	add	r2, pc, #4	; (adr r2, 8006f14 <UART_SetConfig+0x550>)
 8006f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f14:	08006f2d 	.word	0x08006f2d
 8006f18:	08006f35 	.word	0x08006f35
 8006f1c:	08006f3d 	.word	0x08006f3d
 8006f20:	08006f45 	.word	0x08006f45
 8006f24:	08006f4d 	.word	0x08006f4d
 8006f28:	08006f55 	.word	0x08006f55
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f32:	e01a      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006f34:	2304      	movs	r3, #4
 8006f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f3a:	e016      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006f3c:	2308      	movs	r3, #8
 8006f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f42:	e012      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006f44:	2310      	movs	r3, #16
 8006f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f4a:	e00e      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006f4c:	2320      	movs	r3, #32
 8006f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f52:	e00a      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006f54:	2340      	movs	r3, #64	; 0x40
 8006f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f5a:	e006      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006f5c:	2380      	movs	r3, #128	; 0x80
 8006f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f62:	e002      	b.n	8006f6a <UART_SetConfig+0x5a6>
 8006f64:	2380      	movs	r3, #128	; 0x80
 8006f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a3f      	ldr	r2, [pc, #252]	; (800706c <UART_SetConfig+0x6a8>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	f040 80f8 	bne.w	8007166 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f76:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006f7a:	2b20      	cmp	r3, #32
 8006f7c:	dc46      	bgt.n	800700c <UART_SetConfig+0x648>
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	f2c0 8082 	blt.w	8007088 <UART_SetConfig+0x6c4>
 8006f84:	3b02      	subs	r3, #2
 8006f86:	2b1e      	cmp	r3, #30
 8006f88:	d87e      	bhi.n	8007088 <UART_SetConfig+0x6c4>
 8006f8a:	a201      	add	r2, pc, #4	; (adr r2, 8006f90 <UART_SetConfig+0x5cc>)
 8006f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f90:	08007013 	.word	0x08007013
 8006f94:	08007089 	.word	0x08007089
 8006f98:	0800701b 	.word	0x0800701b
 8006f9c:	08007089 	.word	0x08007089
 8006fa0:	08007089 	.word	0x08007089
 8006fa4:	08007089 	.word	0x08007089
 8006fa8:	0800702b 	.word	0x0800702b
 8006fac:	08007089 	.word	0x08007089
 8006fb0:	08007089 	.word	0x08007089
 8006fb4:	08007089 	.word	0x08007089
 8006fb8:	08007089 	.word	0x08007089
 8006fbc:	08007089 	.word	0x08007089
 8006fc0:	08007089 	.word	0x08007089
 8006fc4:	08007089 	.word	0x08007089
 8006fc8:	0800703b 	.word	0x0800703b
 8006fcc:	08007089 	.word	0x08007089
 8006fd0:	08007089 	.word	0x08007089
 8006fd4:	08007089 	.word	0x08007089
 8006fd8:	08007089 	.word	0x08007089
 8006fdc:	08007089 	.word	0x08007089
 8006fe0:	08007089 	.word	0x08007089
 8006fe4:	08007089 	.word	0x08007089
 8006fe8:	08007089 	.word	0x08007089
 8006fec:	08007089 	.word	0x08007089
 8006ff0:	08007089 	.word	0x08007089
 8006ff4:	08007089 	.word	0x08007089
 8006ff8:	08007089 	.word	0x08007089
 8006ffc:	08007089 	.word	0x08007089
 8007000:	08007089 	.word	0x08007089
 8007004:	08007089 	.word	0x08007089
 8007008:	0800707b 	.word	0x0800707b
 800700c:	2b40      	cmp	r3, #64	; 0x40
 800700e:	d037      	beq.n	8007080 <UART_SetConfig+0x6bc>
 8007010:	e03a      	b.n	8007088 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007012:	f7fd fb6b 	bl	80046ec <HAL_RCCEx_GetD3PCLK1Freq>
 8007016:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007018:	e03c      	b.n	8007094 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800701a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800701e:	4618      	mov	r0, r3
 8007020:	f7fd fb7a 	bl	8004718 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007026:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007028:	e034      	b.n	8007094 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800702a:	f107 0318 	add.w	r3, r7, #24
 800702e:	4618      	mov	r0, r3
 8007030:	f7fd fcc6 	bl	80049c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007038:	e02c      	b.n	8007094 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800703a:	4b09      	ldr	r3, [pc, #36]	; (8007060 <UART_SetConfig+0x69c>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 0320 	and.w	r3, r3, #32
 8007042:	2b00      	cmp	r3, #0
 8007044:	d016      	beq.n	8007074 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007046:	4b06      	ldr	r3, [pc, #24]	; (8007060 <UART_SetConfig+0x69c>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	08db      	lsrs	r3, r3, #3
 800704c:	f003 0303 	and.w	r3, r3, #3
 8007050:	4a07      	ldr	r2, [pc, #28]	; (8007070 <UART_SetConfig+0x6ac>)
 8007052:	fa22 f303 	lsr.w	r3, r2, r3
 8007056:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007058:	e01c      	b.n	8007094 <UART_SetConfig+0x6d0>
 800705a:	bf00      	nop
 800705c:	40011400 	.word	0x40011400
 8007060:	58024400 	.word	0x58024400
 8007064:	40007800 	.word	0x40007800
 8007068:	40007c00 	.word	0x40007c00
 800706c:	58000c00 	.word	0x58000c00
 8007070:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007074:	4b9d      	ldr	r3, [pc, #628]	; (80072ec <UART_SetConfig+0x928>)
 8007076:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007078:	e00c      	b.n	8007094 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800707a:	4b9d      	ldr	r3, [pc, #628]	; (80072f0 <UART_SetConfig+0x92c>)
 800707c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800707e:	e009      	b.n	8007094 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007080:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007084:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007086:	e005      	b.n	8007094 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007088:	2300      	movs	r3, #0
 800708a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007092:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007096:	2b00      	cmp	r3, #0
 8007098:	f000 81de 	beq.w	8007458 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a0:	4a94      	ldr	r2, [pc, #592]	; (80072f4 <UART_SetConfig+0x930>)
 80070a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070a6:	461a      	mov	r2, r3
 80070a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80070ae:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	685a      	ldr	r2, [r3, #4]
 80070b4:	4613      	mov	r3, r2
 80070b6:	005b      	lsls	r3, r3, #1
 80070b8:	4413      	add	r3, r2
 80070ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070bc:	429a      	cmp	r2, r3
 80070be:	d305      	bcc.n	80070cc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d903      	bls.n	80070d4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80070d2:	e1c1      	b.n	8007458 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070d6:	2200      	movs	r2, #0
 80070d8:	60bb      	str	r3, [r7, #8]
 80070da:	60fa      	str	r2, [r7, #12]
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e0:	4a84      	ldr	r2, [pc, #528]	; (80072f4 <UART_SetConfig+0x930>)
 80070e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	2200      	movs	r2, #0
 80070ea:	603b      	str	r3, [r7, #0]
 80070ec:	607a      	str	r2, [r7, #4]
 80070ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80070f6:	f7f9 f8ef 	bl	80002d8 <__aeabi_uldivmod>
 80070fa:	4602      	mov	r2, r0
 80070fc:	460b      	mov	r3, r1
 80070fe:	4610      	mov	r0, r2
 8007100:	4619      	mov	r1, r3
 8007102:	f04f 0200 	mov.w	r2, #0
 8007106:	f04f 0300 	mov.w	r3, #0
 800710a:	020b      	lsls	r3, r1, #8
 800710c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007110:	0202      	lsls	r2, r0, #8
 8007112:	6979      	ldr	r1, [r7, #20]
 8007114:	6849      	ldr	r1, [r1, #4]
 8007116:	0849      	lsrs	r1, r1, #1
 8007118:	2000      	movs	r0, #0
 800711a:	460c      	mov	r4, r1
 800711c:	4605      	mov	r5, r0
 800711e:	eb12 0804 	adds.w	r8, r2, r4
 8007122:	eb43 0905 	adc.w	r9, r3, r5
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	469a      	mov	sl, r3
 800712e:	4693      	mov	fp, r2
 8007130:	4652      	mov	r2, sl
 8007132:	465b      	mov	r3, fp
 8007134:	4640      	mov	r0, r8
 8007136:	4649      	mov	r1, r9
 8007138:	f7f9 f8ce 	bl	80002d8 <__aeabi_uldivmod>
 800713c:	4602      	mov	r2, r0
 800713e:	460b      	mov	r3, r1
 8007140:	4613      	mov	r3, r2
 8007142:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007146:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800714a:	d308      	bcc.n	800715e <UART_SetConfig+0x79a>
 800714c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007152:	d204      	bcs.n	800715e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800715a:	60da      	str	r2, [r3, #12]
 800715c:	e17c      	b.n	8007458 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007164:	e178      	b.n	8007458 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	69db      	ldr	r3, [r3, #28]
 800716a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800716e:	f040 80c5 	bne.w	80072fc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007172:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007176:	2b20      	cmp	r3, #32
 8007178:	dc48      	bgt.n	800720c <UART_SetConfig+0x848>
 800717a:	2b00      	cmp	r3, #0
 800717c:	db7b      	blt.n	8007276 <UART_SetConfig+0x8b2>
 800717e:	2b20      	cmp	r3, #32
 8007180:	d879      	bhi.n	8007276 <UART_SetConfig+0x8b2>
 8007182:	a201      	add	r2, pc, #4	; (adr r2, 8007188 <UART_SetConfig+0x7c4>)
 8007184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007188:	08007213 	.word	0x08007213
 800718c:	0800721b 	.word	0x0800721b
 8007190:	08007277 	.word	0x08007277
 8007194:	08007277 	.word	0x08007277
 8007198:	08007223 	.word	0x08007223
 800719c:	08007277 	.word	0x08007277
 80071a0:	08007277 	.word	0x08007277
 80071a4:	08007277 	.word	0x08007277
 80071a8:	08007233 	.word	0x08007233
 80071ac:	08007277 	.word	0x08007277
 80071b0:	08007277 	.word	0x08007277
 80071b4:	08007277 	.word	0x08007277
 80071b8:	08007277 	.word	0x08007277
 80071bc:	08007277 	.word	0x08007277
 80071c0:	08007277 	.word	0x08007277
 80071c4:	08007277 	.word	0x08007277
 80071c8:	08007243 	.word	0x08007243
 80071cc:	08007277 	.word	0x08007277
 80071d0:	08007277 	.word	0x08007277
 80071d4:	08007277 	.word	0x08007277
 80071d8:	08007277 	.word	0x08007277
 80071dc:	08007277 	.word	0x08007277
 80071e0:	08007277 	.word	0x08007277
 80071e4:	08007277 	.word	0x08007277
 80071e8:	08007277 	.word	0x08007277
 80071ec:	08007277 	.word	0x08007277
 80071f0:	08007277 	.word	0x08007277
 80071f4:	08007277 	.word	0x08007277
 80071f8:	08007277 	.word	0x08007277
 80071fc:	08007277 	.word	0x08007277
 8007200:	08007277 	.word	0x08007277
 8007204:	08007277 	.word	0x08007277
 8007208:	08007269 	.word	0x08007269
 800720c:	2b40      	cmp	r3, #64	; 0x40
 800720e:	d02e      	beq.n	800726e <UART_SetConfig+0x8aa>
 8007210:	e031      	b.n	8007276 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007212:	f7fc f835 	bl	8003280 <HAL_RCC_GetPCLK1Freq>
 8007216:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007218:	e033      	b.n	8007282 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800721a:	f7fc f847 	bl	80032ac <HAL_RCC_GetPCLK2Freq>
 800721e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007220:	e02f      	b.n	8007282 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007226:	4618      	mov	r0, r3
 8007228:	f7fd fa76 	bl	8004718 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800722c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007230:	e027      	b.n	8007282 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007232:	f107 0318 	add.w	r3, r7, #24
 8007236:	4618      	mov	r0, r3
 8007238:	f7fd fbc2 	bl	80049c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007240:	e01f      	b.n	8007282 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007242:	4b2d      	ldr	r3, [pc, #180]	; (80072f8 <UART_SetConfig+0x934>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 0320 	and.w	r3, r3, #32
 800724a:	2b00      	cmp	r3, #0
 800724c:	d009      	beq.n	8007262 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800724e:	4b2a      	ldr	r3, [pc, #168]	; (80072f8 <UART_SetConfig+0x934>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	08db      	lsrs	r3, r3, #3
 8007254:	f003 0303 	and.w	r3, r3, #3
 8007258:	4a24      	ldr	r2, [pc, #144]	; (80072ec <UART_SetConfig+0x928>)
 800725a:	fa22 f303 	lsr.w	r3, r2, r3
 800725e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007260:	e00f      	b.n	8007282 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007262:	4b22      	ldr	r3, [pc, #136]	; (80072ec <UART_SetConfig+0x928>)
 8007264:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007266:	e00c      	b.n	8007282 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007268:	4b21      	ldr	r3, [pc, #132]	; (80072f0 <UART_SetConfig+0x92c>)
 800726a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800726c:	e009      	b.n	8007282 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800726e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007272:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007274:	e005      	b.n	8007282 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007276:	2300      	movs	r3, #0
 8007278:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007280:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007284:	2b00      	cmp	r3, #0
 8007286:	f000 80e7 	beq.w	8007458 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728e:	4a19      	ldr	r2, [pc, #100]	; (80072f4 <UART_SetConfig+0x930>)
 8007290:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007294:	461a      	mov	r2, r3
 8007296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007298:	fbb3 f3f2 	udiv	r3, r3, r2
 800729c:	005a      	lsls	r2, r3, #1
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	085b      	lsrs	r3, r3, #1
 80072a4:	441a      	add	r2, r3
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ae:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b2:	2b0f      	cmp	r3, #15
 80072b4:	d916      	bls.n	80072e4 <UART_SetConfig+0x920>
 80072b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072bc:	d212      	bcs.n	80072e4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	f023 030f 	bic.w	r3, r3, #15
 80072c6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ca:	085b      	lsrs	r3, r3, #1
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	f003 0307 	and.w	r3, r3, #7
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80072d6:	4313      	orrs	r3, r2
 80072d8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80072e0:	60da      	str	r2, [r3, #12]
 80072e2:	e0b9      	b.n	8007458 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80072ea:	e0b5      	b.n	8007458 <UART_SetConfig+0xa94>
 80072ec:	03d09000 	.word	0x03d09000
 80072f0:	003d0900 	.word	0x003d0900
 80072f4:	080088c8 	.word	0x080088c8
 80072f8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80072fc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007300:	2b20      	cmp	r3, #32
 8007302:	dc49      	bgt.n	8007398 <UART_SetConfig+0x9d4>
 8007304:	2b00      	cmp	r3, #0
 8007306:	db7c      	blt.n	8007402 <UART_SetConfig+0xa3e>
 8007308:	2b20      	cmp	r3, #32
 800730a:	d87a      	bhi.n	8007402 <UART_SetConfig+0xa3e>
 800730c:	a201      	add	r2, pc, #4	; (adr r2, 8007314 <UART_SetConfig+0x950>)
 800730e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007312:	bf00      	nop
 8007314:	0800739f 	.word	0x0800739f
 8007318:	080073a7 	.word	0x080073a7
 800731c:	08007403 	.word	0x08007403
 8007320:	08007403 	.word	0x08007403
 8007324:	080073af 	.word	0x080073af
 8007328:	08007403 	.word	0x08007403
 800732c:	08007403 	.word	0x08007403
 8007330:	08007403 	.word	0x08007403
 8007334:	080073bf 	.word	0x080073bf
 8007338:	08007403 	.word	0x08007403
 800733c:	08007403 	.word	0x08007403
 8007340:	08007403 	.word	0x08007403
 8007344:	08007403 	.word	0x08007403
 8007348:	08007403 	.word	0x08007403
 800734c:	08007403 	.word	0x08007403
 8007350:	08007403 	.word	0x08007403
 8007354:	080073cf 	.word	0x080073cf
 8007358:	08007403 	.word	0x08007403
 800735c:	08007403 	.word	0x08007403
 8007360:	08007403 	.word	0x08007403
 8007364:	08007403 	.word	0x08007403
 8007368:	08007403 	.word	0x08007403
 800736c:	08007403 	.word	0x08007403
 8007370:	08007403 	.word	0x08007403
 8007374:	08007403 	.word	0x08007403
 8007378:	08007403 	.word	0x08007403
 800737c:	08007403 	.word	0x08007403
 8007380:	08007403 	.word	0x08007403
 8007384:	08007403 	.word	0x08007403
 8007388:	08007403 	.word	0x08007403
 800738c:	08007403 	.word	0x08007403
 8007390:	08007403 	.word	0x08007403
 8007394:	080073f5 	.word	0x080073f5
 8007398:	2b40      	cmp	r3, #64	; 0x40
 800739a:	d02e      	beq.n	80073fa <UART_SetConfig+0xa36>
 800739c:	e031      	b.n	8007402 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800739e:	f7fb ff6f 	bl	8003280 <HAL_RCC_GetPCLK1Freq>
 80073a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80073a4:	e033      	b.n	800740e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073a6:	f7fb ff81 	bl	80032ac <HAL_RCC_GetPCLK2Freq>
 80073aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80073ac:	e02f      	b.n	800740e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7fd f9b0 	bl	8004718 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80073b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073bc:	e027      	b.n	800740e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073be:	f107 0318 	add.w	r3, r7, #24
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7fd fafc 	bl	80049c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073cc:	e01f      	b.n	800740e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073ce:	4b2d      	ldr	r3, [pc, #180]	; (8007484 <UART_SetConfig+0xac0>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f003 0320 	and.w	r3, r3, #32
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d009      	beq.n	80073ee <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80073da:	4b2a      	ldr	r3, [pc, #168]	; (8007484 <UART_SetConfig+0xac0>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	08db      	lsrs	r3, r3, #3
 80073e0:	f003 0303 	and.w	r3, r3, #3
 80073e4:	4a28      	ldr	r2, [pc, #160]	; (8007488 <UART_SetConfig+0xac4>)
 80073e6:	fa22 f303 	lsr.w	r3, r2, r3
 80073ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80073ec:	e00f      	b.n	800740e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80073ee:	4b26      	ldr	r3, [pc, #152]	; (8007488 <UART_SetConfig+0xac4>)
 80073f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073f2:	e00c      	b.n	800740e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80073f4:	4b25      	ldr	r3, [pc, #148]	; (800748c <UART_SetConfig+0xac8>)
 80073f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073f8:	e009      	b.n	800740e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007400:	e005      	b.n	800740e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007402:	2300      	movs	r3, #0
 8007404:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800740c:	bf00      	nop
    }

    if (pclk != 0U)
 800740e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007410:	2b00      	cmp	r3, #0
 8007412:	d021      	beq.n	8007458 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007418:	4a1d      	ldr	r2, [pc, #116]	; (8007490 <UART_SetConfig+0xacc>)
 800741a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800741e:	461a      	mov	r2, r3
 8007420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007422:	fbb3 f2f2 	udiv	r2, r3, r2
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	085b      	lsrs	r3, r3, #1
 800742c:	441a      	add	r2, r3
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	fbb2 f3f3 	udiv	r3, r2, r3
 8007436:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743a:	2b0f      	cmp	r3, #15
 800743c:	d909      	bls.n	8007452 <UART_SetConfig+0xa8e>
 800743e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007444:	d205      	bcs.n	8007452 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007448:	b29a      	uxth	r2, r3
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	60da      	str	r2, [r3, #12]
 8007450:	e002      	b.n	8007458 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	2201      	movs	r2, #1
 800745c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	2201      	movs	r2, #1
 8007464:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	2200      	movs	r2, #0
 800746c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	2200      	movs	r2, #0
 8007472:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007474:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007478:	4618      	mov	r0, r3
 800747a:	3748      	adds	r7, #72	; 0x48
 800747c:	46bd      	mov	sp, r7
 800747e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007482:	bf00      	nop
 8007484:	58024400 	.word	0x58024400
 8007488:	03d09000 	.word	0x03d09000
 800748c:	003d0900 	.word	0x003d0900
 8007490:	080088c8 	.word	0x080088c8

08007494 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a0:	f003 0308 	and.w	r3, r3, #8
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00a      	beq.n	80074be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	430a      	orrs	r2, r1
 80074bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00a      	beq.n	80074e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	430a      	orrs	r2, r1
 80074de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e4:	f003 0302 	and.w	r3, r3, #2
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00a      	beq.n	8007502 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	430a      	orrs	r2, r1
 8007500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007506:	f003 0304 	and.w	r3, r3, #4
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00a      	beq.n	8007524 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	430a      	orrs	r2, r1
 8007522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007528:	f003 0310 	and.w	r3, r3, #16
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00a      	beq.n	8007546 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	430a      	orrs	r2, r1
 8007544:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800754a:	f003 0320 	and.w	r3, r3, #32
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00a      	beq.n	8007568 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	430a      	orrs	r2, r1
 8007566:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800756c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007570:	2b00      	cmp	r3, #0
 8007572:	d01a      	beq.n	80075aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	430a      	orrs	r2, r1
 8007588:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800758e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007592:	d10a      	bne.n	80075aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	430a      	orrs	r2, r1
 80075a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00a      	beq.n	80075cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	430a      	orrs	r2, r1
 80075ca:	605a      	str	r2, [r3, #4]
  }
}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b098      	sub	sp, #96	; 0x60
 80075dc:	af02      	add	r7, sp, #8
 80075de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075e8:	f7f9 fd4a 	bl	8001080 <HAL_GetTick>
 80075ec:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 0308 	and.w	r3, r3, #8
 80075f8:	2b08      	cmp	r3, #8
 80075fa:	d12f      	bne.n	800765c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007600:	9300      	str	r3, [sp, #0]
 8007602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007604:	2200      	movs	r2, #0
 8007606:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f88e 	bl	800772c <UART_WaitOnFlagUntilTimeout>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d022      	beq.n	800765c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761e:	e853 3f00 	ldrex	r3, [r3]
 8007622:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007626:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800762a:	653b      	str	r3, [r7, #80]	; 0x50
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	461a      	mov	r2, r3
 8007632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007634:	647b      	str	r3, [r7, #68]	; 0x44
 8007636:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007638:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800763a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800763c:	e841 2300 	strex	r3, r2, [r1]
 8007640:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007644:	2b00      	cmp	r3, #0
 8007646:	d1e6      	bne.n	8007616 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2220      	movs	r2, #32
 800764c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	e063      	b.n	8007724 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 0304 	and.w	r3, r3, #4
 8007666:	2b04      	cmp	r3, #4
 8007668:	d149      	bne.n	80076fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800766a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007672:	2200      	movs	r2, #0
 8007674:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 f857 	bl	800772c <UART_WaitOnFlagUntilTimeout>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d03c      	beq.n	80076fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768c:	e853 3f00 	ldrex	r3, [r3]
 8007690:	623b      	str	r3, [r7, #32]
   return(result);
 8007692:	6a3b      	ldr	r3, [r7, #32]
 8007694:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007698:	64fb      	str	r3, [r7, #76]	; 0x4c
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	461a      	mov	r2, r3
 80076a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076a2:	633b      	str	r3, [r7, #48]	; 0x30
 80076a4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076aa:	e841 2300 	strex	r3, r2, [r1]
 80076ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1e6      	bne.n	8007684 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	3308      	adds	r3, #8
 80076bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	e853 3f00 	ldrex	r3, [r3]
 80076c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f023 0301 	bic.w	r3, r3, #1
 80076cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	3308      	adds	r3, #8
 80076d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076d6:	61fa      	str	r2, [r7, #28]
 80076d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076da:	69b9      	ldr	r1, [r7, #24]
 80076dc:	69fa      	ldr	r2, [r7, #28]
 80076de:	e841 2300 	strex	r3, r2, [r1]
 80076e2:	617b      	str	r3, [r7, #20]
   return(result);
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1e5      	bne.n	80076b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2220      	movs	r2, #32
 80076ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e012      	b.n	8007724 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2220      	movs	r2, #32
 8007702:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2220      	movs	r2, #32
 800770a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3758      	adds	r7, #88	; 0x58
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	603b      	str	r3, [r7, #0]
 8007738:	4613      	mov	r3, r2
 800773a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800773c:	e04f      	b.n	80077de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007744:	d04b      	beq.n	80077de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007746:	f7f9 fc9b 	bl	8001080 <HAL_GetTick>
 800774a:	4602      	mov	r2, r0
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	69ba      	ldr	r2, [r7, #24]
 8007752:	429a      	cmp	r2, r3
 8007754:	d302      	bcc.n	800775c <UART_WaitOnFlagUntilTimeout+0x30>
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d101      	bne.n	8007760 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	e04e      	b.n	80077fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 0304 	and.w	r3, r3, #4
 800776a:	2b00      	cmp	r3, #0
 800776c:	d037      	beq.n	80077de <UART_WaitOnFlagUntilTimeout+0xb2>
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	2b80      	cmp	r3, #128	; 0x80
 8007772:	d034      	beq.n	80077de <UART_WaitOnFlagUntilTimeout+0xb2>
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	2b40      	cmp	r3, #64	; 0x40
 8007778:	d031      	beq.n	80077de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	69db      	ldr	r3, [r3, #28]
 8007780:	f003 0308 	and.w	r3, r3, #8
 8007784:	2b08      	cmp	r3, #8
 8007786:	d110      	bne.n	80077aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2208      	movs	r2, #8
 800778e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f000 f95b 	bl	8007a4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2208      	movs	r2, #8
 800779a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e029      	b.n	80077fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	69db      	ldr	r3, [r3, #28]
 80077b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077b8:	d111      	bne.n	80077de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	f000 f941 	bl	8007a4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2220      	movs	r2, #32
 80077ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	e00f      	b.n	80077fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	69da      	ldr	r2, [r3, #28]
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	4013      	ands	r3, r2
 80077e8:	68ba      	ldr	r2, [r7, #8]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	bf0c      	ite	eq
 80077ee:	2301      	moveq	r3, #1
 80077f0:	2300      	movne	r3, #0
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	461a      	mov	r2, r3
 80077f6:	79fb      	ldrb	r3, [r7, #7]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d0a0      	beq.n	800773e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
	...

08007808 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007808:	b480      	push	{r7}
 800780a:	b0a3      	sub	sp, #140	; 0x8c
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	4613      	mov	r3, r2
 8007814:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	88fa      	ldrh	r2, [r7, #6]
 8007820:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	88fa      	ldrh	r2, [r7, #6]
 8007828:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2200      	movs	r2, #0
 8007830:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800783a:	d10e      	bne.n	800785a <UART_Start_Receive_IT+0x52>
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d105      	bne.n	8007850 <UART_Start_Receive_IT+0x48>
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f240 12ff 	movw	r2, #511	; 0x1ff
 800784a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800784e:	e02d      	b.n	80078ac <UART_Start_Receive_IT+0xa4>
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	22ff      	movs	r2, #255	; 0xff
 8007854:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007858:	e028      	b.n	80078ac <UART_Start_Receive_IT+0xa4>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d10d      	bne.n	800787e <UART_Start_Receive_IT+0x76>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d104      	bne.n	8007874 <UART_Start_Receive_IT+0x6c>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	22ff      	movs	r2, #255	; 0xff
 800786e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007872:	e01b      	b.n	80078ac <UART_Start_Receive_IT+0xa4>
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	227f      	movs	r2, #127	; 0x7f
 8007878:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800787c:	e016      	b.n	80078ac <UART_Start_Receive_IT+0xa4>
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007886:	d10d      	bne.n	80078a4 <UART_Start_Receive_IT+0x9c>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d104      	bne.n	800789a <UART_Start_Receive_IT+0x92>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	227f      	movs	r2, #127	; 0x7f
 8007894:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007898:	e008      	b.n	80078ac <UART_Start_Receive_IT+0xa4>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	223f      	movs	r2, #63	; 0x3f
 800789e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80078a2:	e003      	b.n	80078ac <UART_Start_Receive_IT+0xa4>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2222      	movs	r2, #34	; 0x22
 80078b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	3308      	adds	r3, #8
 80078c2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078c6:	e853 3f00 	ldrex	r3, [r3]
 80078ca:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80078cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078ce:	f043 0301 	orr.w	r3, r3, #1
 80078d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	3308      	adds	r3, #8
 80078dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80078e0:	673a      	str	r2, [r7, #112]	; 0x70
 80078e2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80078e6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80078e8:	e841 2300 	strex	r3, r2, [r1]
 80078ec:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80078ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1e3      	bne.n	80078bc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078fc:	d14f      	bne.n	800799e <UART_Start_Receive_IT+0x196>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007904:	88fa      	ldrh	r2, [r7, #6]
 8007906:	429a      	cmp	r2, r3
 8007908:	d349      	bcc.n	800799e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007912:	d107      	bne.n	8007924 <UART_Start_Receive_IT+0x11c>
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d103      	bne.n	8007924 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	4a47      	ldr	r2, [pc, #284]	; (8007a3c <UART_Start_Receive_IT+0x234>)
 8007920:	675a      	str	r2, [r3, #116]	; 0x74
 8007922:	e002      	b.n	800792a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	4a46      	ldr	r2, [pc, #280]	; (8007a40 <UART_Start_Receive_IT+0x238>)
 8007928:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d01a      	beq.n	8007968 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800793a:	e853 3f00 	ldrex	r3, [r3]
 800793e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007946:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	461a      	mov	r2, r3
 8007950:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007954:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007956:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007958:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800795a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800795c:	e841 2300 	strex	r3, r2, [r1]
 8007960:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007964:	2b00      	cmp	r3, #0
 8007966:	d1e4      	bne.n	8007932 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	3308      	adds	r3, #8
 800796e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007972:	e853 3f00 	ldrex	r3, [r3]
 8007976:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800797e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	3308      	adds	r3, #8
 8007986:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007988:	64ba      	str	r2, [r7, #72]	; 0x48
 800798a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800798e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007990:	e841 2300 	strex	r3, r2, [r1]
 8007994:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1e5      	bne.n	8007968 <UART_Start_Receive_IT+0x160>
 800799c:	e046      	b.n	8007a2c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079a6:	d107      	bne.n	80079b8 <UART_Start_Receive_IT+0x1b0>
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d103      	bne.n	80079b8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	4a24      	ldr	r2, [pc, #144]	; (8007a44 <UART_Start_Receive_IT+0x23c>)
 80079b4:	675a      	str	r2, [r3, #116]	; 0x74
 80079b6:	e002      	b.n	80079be <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	4a23      	ldr	r2, [pc, #140]	; (8007a48 <UART_Start_Receive_IT+0x240>)
 80079bc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d019      	beq.n	80079fa <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ce:	e853 3f00 	ldrex	r3, [r3]
 80079d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80079da:	677b      	str	r3, [r7, #116]	; 0x74
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	461a      	mov	r2, r3
 80079e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079e4:	637b      	str	r3, [r7, #52]	; 0x34
 80079e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80079ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079ec:	e841 2300 	strex	r3, r2, [r1]
 80079f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80079f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d1e6      	bne.n	80079c6 <UART_Start_Receive_IT+0x1be>
 80079f8:	e018      	b.n	8007a2c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	e853 3f00 	ldrex	r3, [r3]
 8007a06:	613b      	str	r3, [r7, #16]
   return(result);
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	f043 0320 	orr.w	r3, r3, #32
 8007a0e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	461a      	mov	r2, r3
 8007a16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a18:	623b      	str	r3, [r7, #32]
 8007a1a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1c:	69f9      	ldr	r1, [r7, #28]
 8007a1e:	6a3a      	ldr	r2, [r7, #32]
 8007a20:	e841 2300 	strex	r3, r2, [r1]
 8007a24:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d1e6      	bne.n	80079fa <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	378c      	adds	r7, #140	; 0x8c
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	08008291 	.word	0x08008291
 8007a40:	08007f25 	.word	0x08007f25
 8007a44:	08007d65 	.word	0x08007d65
 8007a48:	08007ba5 	.word	0x08007ba5

08007a4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b095      	sub	sp, #84	; 0x54
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a5c:	e853 3f00 	ldrex	r3, [r3]
 8007a60:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	461a      	mov	r2, r3
 8007a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a72:	643b      	str	r3, [r7, #64]	; 0x40
 8007a74:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a7a:	e841 2300 	strex	r3, r2, [r1]
 8007a7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1e6      	bne.n	8007a54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	3308      	adds	r3, #8
 8007a8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8e:	6a3b      	ldr	r3, [r7, #32]
 8007a90:	e853 3f00 	ldrex	r3, [r3]
 8007a94:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a96:	69fa      	ldr	r2, [r7, #28]
 8007a98:	4b1e      	ldr	r3, [pc, #120]	; (8007b14 <UART_EndRxTransfer+0xc8>)
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	3308      	adds	r3, #8
 8007aa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007aa6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007aa8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007aac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007aae:	e841 2300 	strex	r3, r2, [r1]
 8007ab2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1e5      	bne.n	8007a86 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d118      	bne.n	8007af4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	e853 3f00 	ldrex	r3, [r3]
 8007ace:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	f023 0310 	bic.w	r3, r3, #16
 8007ad6:	647b      	str	r3, [r7, #68]	; 0x44
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	461a      	mov	r2, r3
 8007ade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ae0:	61bb      	str	r3, [r7, #24]
 8007ae2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae4:	6979      	ldr	r1, [r7, #20]
 8007ae6:	69ba      	ldr	r2, [r7, #24]
 8007ae8:	e841 2300 	strex	r3, r2, [r1]
 8007aec:	613b      	str	r3, [r7, #16]
   return(result);
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d1e6      	bne.n	8007ac2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2220      	movs	r2, #32
 8007af8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007b08:	bf00      	nop
 8007b0a:	3754      	adds	r7, #84	; 0x54
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr
 8007b14:	effffffe 	.word	0xeffffffe

08007b18 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b40:	bf00      	nop
 8007b42:	3710      	adds	r7, #16
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b088      	sub	sp, #32
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	e853 3f00 	ldrex	r3, [r3]
 8007b5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b64:	61fb      	str	r3, [r7, #28]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	61bb      	str	r3, [r7, #24]
 8007b70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b72:	6979      	ldr	r1, [r7, #20]
 8007b74:	69ba      	ldr	r2, [r7, #24]
 8007b76:	e841 2300 	strex	r3, r2, [r1]
 8007b7a:	613b      	str	r3, [r7, #16]
   return(result);
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1e6      	bne.n	8007b50 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2220      	movs	r2, #32
 8007b86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	679a      	str	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b9a:	bf00      	nop
 8007b9c:	3720      	adds	r7, #32
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
	...

08007ba4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b09c      	sub	sp, #112	; 0x70
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007bb2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bbc:	2b22      	cmp	r3, #34	; 0x22
 8007bbe:	f040 80c2 	bne.w	8007d46 <UART_RxISR_8BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007bcc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007bd0:	b2d9      	uxtb	r1, r3
 8007bd2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007bd6:	b2da      	uxtb	r2, r3
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bdc:	400a      	ands	r2, r1
 8007bde:	b2d2      	uxtb	r2, r2
 8007be0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007be6:	1c5a      	adds	r2, r3, #1
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	3b01      	subs	r3, #1
 8007bf6:	b29a      	uxth	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f040 80a5 	bne.w	8007d56 <UART_RxISR_8BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c14:	e853 3f00 	ldrex	r3, [r3]
 8007c18:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c20:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	461a      	mov	r2, r3
 8007c28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c2c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007c30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c32:	e841 2300 	strex	r3, r2, [r1]
 8007c36:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d1e6      	bne.n	8007c0c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	3308      	adds	r3, #8
 8007c44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c48:	e853 3f00 	ldrex	r3, [r3]
 8007c4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c50:	f023 0301 	bic.w	r3, r3, #1
 8007c54:	667b      	str	r3, [r7, #100]	; 0x64
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	3308      	adds	r3, #8
 8007c5c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007c5e:	647a      	str	r2, [r7, #68]	; 0x44
 8007c60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c66:	e841 2300 	strex	r3, r2, [r1]
 8007c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1e5      	bne.n	8007c3e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2220      	movs	r2, #32
 8007c76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a35      	ldr	r2, [pc, #212]	; (8007d60 <UART_RxISR_8BIT+0x1bc>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d01f      	beq.n	8007cd0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d018      	beq.n	8007cd0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca6:	e853 3f00 	ldrex	r3, [r3]
 8007caa:	623b      	str	r3, [r7, #32]
   return(result);
 8007cac:	6a3b      	ldr	r3, [r7, #32]
 8007cae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007cb2:	663b      	str	r3, [r7, #96]	; 0x60
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	461a      	mov	r2, r3
 8007cba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007cbc:	633b      	str	r3, [r7, #48]	; 0x30
 8007cbe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cc4:	e841 2300 	strex	r3, r2, [r1]
 8007cc8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d1e6      	bne.n	8007c9e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d130      	bne.n	8007d3a <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	e853 3f00 	ldrex	r3, [r3]
 8007cea:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f023 0310 	bic.w	r3, r3, #16
 8007cf2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cfc:	61fb      	str	r3, [r7, #28]
 8007cfe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d00:	69b9      	ldr	r1, [r7, #24]
 8007d02:	69fa      	ldr	r2, [r7, #28]
 8007d04:	e841 2300 	strex	r3, r2, [r1]
 8007d08:	617b      	str	r3, [r7, #20]
   return(result);
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1e6      	bne.n	8007cde <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	69db      	ldr	r3, [r3, #28]
 8007d16:	f003 0310 	and.w	r3, r3, #16
 8007d1a:	2b10      	cmp	r3, #16
 8007d1c:	d103      	bne.n	8007d26 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2210      	movs	r2, #16
 8007d24:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8007d32:	4611      	mov	r1, r2
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007d38:	e00d      	b.n	8007d56 <UART_RxISR_8BIT+0x1b2>
        huart->RxCpltCallback(huart);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	4798      	blx	r3
}
 8007d44:	e007      	b.n	8007d56 <UART_RxISR_8BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	699a      	ldr	r2, [r3, #24]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f042 0208 	orr.w	r2, r2, #8
 8007d54:	619a      	str	r2, [r3, #24]
}
 8007d56:	bf00      	nop
 8007d58:	3770      	adds	r7, #112	; 0x70
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	58000c00 	.word	0x58000c00

08007d64 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b09c      	sub	sp, #112	; 0x70
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007d72:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d7c:	2b22      	cmp	r3, #34	; 0x22
 8007d7e:	f040 80c2 	bne.w	8007f06 <UART_RxISR_16BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d88:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d90:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007d92:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007d96:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007da0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007da6:	1c9a      	adds	r2, r3, #2
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	3b01      	subs	r3, #1
 8007db6:	b29a      	uxth	r2, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	f040 80a5 	bne.w	8007f16 <UART_RxISR_16BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dd4:	e853 3f00 	ldrex	r3, [r3]
 8007dd8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007dda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ddc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007de0:	667b      	str	r3, [r7, #100]	; 0x64
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	461a      	mov	r2, r3
 8007de8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007dea:	657b      	str	r3, [r7, #84]	; 0x54
 8007dec:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007df0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007df2:	e841 2300 	strex	r3, r2, [r1]
 8007df6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1e6      	bne.n	8007dcc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	3308      	adds	r3, #8
 8007e04:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e08:	e853 3f00 	ldrex	r3, [r3]
 8007e0c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e10:	f023 0301 	bic.w	r3, r3, #1
 8007e14:	663b      	str	r3, [r7, #96]	; 0x60
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	3308      	adds	r3, #8
 8007e1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007e1e:	643a      	str	r2, [r7, #64]	; 0x40
 8007e20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e26:	e841 2300 	strex	r3, r2, [r1]
 8007e2a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1e5      	bne.n	8007dfe <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2220      	movs	r2, #32
 8007e36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a35      	ldr	r2, [pc, #212]	; (8007f20 <UART_RxISR_16BIT+0x1bc>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d01f      	beq.n	8007e90 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d018      	beq.n	8007e90 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e64:	6a3b      	ldr	r3, [r7, #32]
 8007e66:	e853 3f00 	ldrex	r3, [r3]
 8007e6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007e72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	461a      	mov	r2, r3
 8007e7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e7e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e84:	e841 2300 	strex	r3, r2, [r1]
 8007e88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d1e6      	bne.n	8007e5e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d130      	bne.n	8007efa <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	e853 3f00 	ldrex	r3, [r3]
 8007eaa:	60bb      	str	r3, [r7, #8]
   return(result);
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	f023 0310 	bic.w	r3, r3, #16
 8007eb2:	65bb      	str	r3, [r7, #88]	; 0x58
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	461a      	mov	r2, r3
 8007eba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ebc:	61bb      	str	r3, [r7, #24]
 8007ebe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec0:	6979      	ldr	r1, [r7, #20]
 8007ec2:	69ba      	ldr	r2, [r7, #24]
 8007ec4:	e841 2300 	strex	r3, r2, [r1]
 8007ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d1e6      	bne.n	8007e9e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	69db      	ldr	r3, [r3, #28]
 8007ed6:	f003 0310 	and.w	r3, r3, #16
 8007eda:	2b10      	cmp	r3, #16
 8007edc:	d103      	bne.n	8007ee6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2210      	movs	r2, #16
 8007ee4:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8007ef2:	4611      	mov	r1, r2
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ef8:	e00d      	b.n	8007f16 <UART_RxISR_16BIT+0x1b2>
        huart->RxCpltCallback(huart);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	4798      	blx	r3
}
 8007f04:	e007      	b.n	8007f16 <UART_RxISR_16BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	699a      	ldr	r2, [r3, #24]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f042 0208 	orr.w	r2, r2, #8
 8007f14:	619a      	str	r2, [r3, #24]
}
 8007f16:	bf00      	nop
 8007f18:	3770      	adds	r7, #112	; 0x70
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	58000c00 	.word	0x58000c00

08007f24 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b0ac      	sub	sp, #176	; 0xb0
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007f32:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	69db      	ldr	r3, [r3, #28]
 8007f3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f5a:	2b22      	cmp	r3, #34	; 0x22
 8007f5c:	f040 8186 	bne.w	800826c <UART_RxISR_8BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007f66:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007f6a:	e129      	b.n	80081c0 <UART_RxISR_8BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f72:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f76:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8007f7a:	b2d9      	uxtb	r1, r3
 8007f7c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007f80:	b2da      	uxtb	r2, r3
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f86:	400a      	ands	r2, r1
 8007f88:	b2d2      	uxtb	r2, r2
 8007f8a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f90:	1c5a      	adds	r2, r3, #1
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	b29a      	uxth	r2, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	69db      	ldr	r3, [r3, #28]
 8007fae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007fb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fb6:	f003 0307 	and.w	r3, r3, #7
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d055      	beq.n	800806a <UART_RxISR_8BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007fbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fc2:	f003 0301 	and.w	r3, r3, #1
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d011      	beq.n	8007fee <UART_RxISR_8BIT_FIFOEN+0xca>
 8007fca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00b      	beq.n	8007fee <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fe4:	f043 0201 	orr.w	r2, r3, #1
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ff2:	f003 0302 	and.w	r3, r3, #2
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d011      	beq.n	800801e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007ffa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007ffe:	f003 0301 	and.w	r3, r3, #1
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00b      	beq.n	800801e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2202      	movs	r2, #2
 800800c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008014:	f043 0204 	orr.w	r2, r3, #4
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800801e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008022:	f003 0304 	and.w	r3, r3, #4
 8008026:	2b00      	cmp	r3, #0
 8008028:	d011      	beq.n	800804e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800802a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800802e:	f003 0301 	and.w	r3, r3, #1
 8008032:	2b00      	cmp	r3, #0
 8008034:	d00b      	beq.n	800804e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	2204      	movs	r2, #4
 800803c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008044:	f043 0202 	orr.w	r2, r3, #2
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008054:	2b00      	cmp	r3, #0
 8008056:	d008      	beq.n	800806a <UART_RxISR_8BIT_FIFOEN+0x146>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008070:	b29b      	uxth	r3, r3
 8008072:	2b00      	cmp	r3, #0
 8008074:	f040 80a4 	bne.w	80081c0 <UART_RxISR_8BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008080:	e853 3f00 	ldrex	r3, [r3]
 8008084:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8008086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800808c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	461a      	mov	r2, r3
 8008096:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800809a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800809c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80080a0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80080a2:	e841 2300 	strex	r3, r2, [r1]
 80080a6:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80080a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1e4      	bne.n	8008078 <UART_RxISR_8BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	3308      	adds	r3, #8
 80080b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080b8:	e853 3f00 	ldrex	r3, [r3]
 80080bc:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80080be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80080c0:	4b70      	ldr	r3, [pc, #448]	; (8008284 <UART_RxISR_8BIT_FIFOEN+0x360>)
 80080c2:	4013      	ands	r3, r2
 80080c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	3308      	adds	r3, #8
 80080ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80080d2:	66ba      	str	r2, [r7, #104]	; 0x68
 80080d4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80080d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80080da:	e841 2300 	strex	r3, r2, [r1]
 80080de:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80080e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1e3      	bne.n	80080ae <UART_RxISR_8BIT_FIFOEN+0x18a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2220      	movs	r2, #32
 80080ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a62      	ldr	r2, [pc, #392]	; (8008288 <UART_RxISR_8BIT_FIFOEN+0x364>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d021      	beq.n	8008148 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800810e:	2b00      	cmp	r3, #0
 8008110:	d01a      	beq.n	8008148 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800811a:	e853 3f00 	ldrex	r3, [r3]
 800811e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008122:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008126:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	461a      	mov	r2, r3
 8008130:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008134:	657b      	str	r3, [r7, #84]	; 0x54
 8008136:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008138:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800813a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800813c:	e841 2300 	strex	r3, r2, [r1]
 8008140:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1e4      	bne.n	8008112 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800814c:	2b01      	cmp	r3, #1
 800814e:	d132      	bne.n	80081b6 <UART_RxISR_8BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800815e:	e853 3f00 	ldrex	r3, [r3]
 8008162:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008166:	f023 0310 	bic.w	r3, r3, #16
 800816a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	461a      	mov	r2, r3
 8008174:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008178:	643b      	str	r3, [r7, #64]	; 0x40
 800817a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800817e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008180:	e841 2300 	strex	r3, r2, [r1]
 8008184:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1e4      	bne.n	8008156 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	69db      	ldr	r3, [r3, #28]
 8008192:	f003 0310 	and.w	r3, r3, #16
 8008196:	2b10      	cmp	r3, #16
 8008198:	d103      	bne.n	80081a2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2210      	movs	r2, #16
 80081a0:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80081a8:	687a      	ldr	r2, [r7, #4]
 80081aa:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 80081ae:	4611      	mov	r1, r2
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	4798      	blx	r3
 80081b4:	e004      	b.n	80081c0 <UART_RxISR_8BIT_FIFOEN+0x29c>
        else
        {
          /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	4798      	blx	r3
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80081c0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d006      	beq.n	80081d6 <UART_RxISR_8BIT_FIFOEN+0x2b2>
 80081c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80081cc:	f003 0320 	and.w	r3, r3, #32
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	f47f aecb 	bne.w	8007f6c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081dc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80081e0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d049      	beq.n	800827c <UART_RxISR_8BIT_FIFOEN+0x358>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80081ee:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d242      	bcs.n	800827c <UART_RxISR_8BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	3308      	adds	r3, #8
 80081fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081fe:	6a3b      	ldr	r3, [r7, #32]
 8008200:	e853 3f00 	ldrex	r3, [r3]
 8008204:	61fb      	str	r3, [r7, #28]
   return(result);
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800820c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	3308      	adds	r3, #8
 8008216:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800821a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800821c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008222:	e841 2300 	strex	r3, r2, [r1]
 8008226:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1e3      	bne.n	80081f6 <UART_RxISR_8BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4a16      	ldr	r2, [pc, #88]	; (800828c <UART_RxISR_8BIT_FIFOEN+0x368>)
 8008232:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	e853 3f00 	ldrex	r3, [r3]
 8008240:	60bb      	str	r3, [r7, #8]
   return(result);
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	f043 0320 	orr.w	r3, r3, #32
 8008248:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	461a      	mov	r2, r3
 8008252:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008256:	61bb      	str	r3, [r7, #24]
 8008258:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825a:	6979      	ldr	r1, [r7, #20]
 800825c:	69ba      	ldr	r2, [r7, #24]
 800825e:	e841 2300 	strex	r3, r2, [r1]
 8008262:	613b      	str	r3, [r7, #16]
   return(result);
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d1e4      	bne.n	8008234 <UART_RxISR_8BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800826a:	e007      	b.n	800827c <UART_RxISR_8BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	699a      	ldr	r2, [r3, #24]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f042 0208 	orr.w	r2, r2, #8
 800827a:	619a      	str	r2, [r3, #24]
}
 800827c:	bf00      	nop
 800827e:	37b0      	adds	r7, #176	; 0xb0
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}
 8008284:	effffffe 	.word	0xeffffffe
 8008288:	58000c00 	.word	0x58000c00
 800828c:	08007ba5 	.word	0x08007ba5

08008290 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b0ae      	sub	sp, #184	; 0xb8
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800829e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	69db      	ldr	r3, [r3, #28]
 80082a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082c6:	2b22      	cmp	r3, #34	; 0x22
 80082c8:	f040 818a 	bne.w	80085e0 <UART_RxISR_16BIT_FIFOEN+0x350>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80082d2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80082d6:	e12d      	b.n	8008534 <UART_RxISR_16BIT_FIFOEN+0x2a4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082de:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80082ea:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80082ee:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80082f2:	4013      	ands	r3, r2
 80082f4:	b29a      	uxth	r2, r3
 80082f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80082fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008300:	1c9a      	adds	r2, r3, #2
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800830c:	b29b      	uxth	r3, r3
 800830e:	3b01      	subs	r3, #1
 8008310:	b29a      	uxth	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	69db      	ldr	r3, [r3, #28]
 800831e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008322:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008326:	f003 0307 	and.w	r3, r3, #7
 800832a:	2b00      	cmp	r3, #0
 800832c:	d055      	beq.n	80083da <UART_RxISR_16BIT_FIFOEN+0x14a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800832e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008332:	f003 0301 	and.w	r3, r3, #1
 8008336:	2b00      	cmp	r3, #0
 8008338:	d011      	beq.n	800835e <UART_RxISR_16BIT_FIFOEN+0xce>
 800833a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800833e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00b      	beq.n	800835e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2201      	movs	r2, #1
 800834c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008354:	f043 0201 	orr.w	r2, r3, #1
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800835e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008362:	f003 0302 	and.w	r3, r3, #2
 8008366:	2b00      	cmp	r3, #0
 8008368:	d011      	beq.n	800838e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800836a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800836e:	f003 0301 	and.w	r3, r3, #1
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00b      	beq.n	800838e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2202      	movs	r2, #2
 800837c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008384:	f043 0204 	orr.w	r2, r3, #4
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800838e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008392:	f003 0304 	and.w	r3, r3, #4
 8008396:	2b00      	cmp	r3, #0
 8008398:	d011      	beq.n	80083be <UART_RxISR_16BIT_FIFOEN+0x12e>
 800839a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800839e:	f003 0301 	and.w	r3, r3, #1
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00b      	beq.n	80083be <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2204      	movs	r2, #4
 80083ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083b4:	f043 0202 	orr.w	r2, r3, #2
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d008      	beq.n	80083da <UART_RxISR_16BIT_FIFOEN+0x14a>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	f040 80a6 	bne.w	8008534 <UART_RxISR_16BIT_FIFOEN+0x2a4>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083f0:	e853 3f00 	ldrex	r3, [r3]
 80083f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80083f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	461a      	mov	r2, r3
 8008406:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800840a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800840e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008410:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008412:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008416:	e841 2300 	strex	r3, r2, [r1]
 800841a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800841c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1e2      	bne.n	80083e8 <UART_RxISR_16BIT_FIFOEN+0x158>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	3308      	adds	r3, #8
 8008428:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800842c:	e853 3f00 	ldrex	r3, [r3]
 8008430:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008432:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008434:	4b70      	ldr	r3, [pc, #448]	; (80085f8 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8008436:	4013      	ands	r3, r2
 8008438:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	3308      	adds	r3, #8
 8008442:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008446:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008448:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800844c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800844e:	e841 2300 	strex	r3, r2, [r1]
 8008452:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008454:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1e3      	bne.n	8008422 <UART_RxISR_16BIT_FIFOEN+0x192>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2220      	movs	r2, #32
 800845e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a62      	ldr	r2, [pc, #392]	; (80085fc <UART_RxISR_16BIT_FIFOEN+0x36c>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d021      	beq.n	80084bc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008482:	2b00      	cmp	r3, #0
 8008484:	d01a      	beq.n	80084bc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800848e:	e853 3f00 	ldrex	r3, [r3]
 8008492:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008496:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800849a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	461a      	mov	r2, r3
 80084a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80084a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80084aa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80084ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084b0:	e841 2300 	strex	r3, r2, [r1]
 80084b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80084b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1e4      	bne.n	8008486 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d132      	bne.n	800852a <UART_RxISR_16BIT_FIFOEN+0x29a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d2:	e853 3f00 	ldrex	r3, [r3]
 80084d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80084d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084da:	f023 0310 	bic.w	r3, r3, #16
 80084de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	461a      	mov	r2, r3
 80084e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80084ec:	647b      	str	r3, [r7, #68]	; 0x44
 80084ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80084f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084f4:	e841 2300 	strex	r3, r2, [r1]
 80084f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80084fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d1e4      	bne.n	80084ca <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	69db      	ldr	r3, [r3, #28]
 8008506:	f003 0310 	and.w	r3, r3, #16
 800850a:	2b10      	cmp	r3, #16
 800850c:	d103      	bne.n	8008516 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	2210      	movs	r2, #16
 8008514:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8008522:	4611      	mov	r1, r2
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	4798      	blx	r3
 8008528:	e004      	b.n	8008534 <UART_RxISR_16BIT_FIFOEN+0x2a4>
        else
        {
          /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	4798      	blx	r3
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008534:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8008538:	2b00      	cmp	r3, #0
 800853a:	d006      	beq.n	800854a <UART_RxISR_16BIT_FIFOEN+0x2ba>
 800853c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008540:	f003 0320 	and.w	r3, r3, #32
 8008544:	2b00      	cmp	r3, #0
 8008546:	f47f aec7 	bne.w	80082d8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008550:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008554:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008558:	2b00      	cmp	r3, #0
 800855a:	d049      	beq.n	80085f0 <UART_RxISR_16BIT_FIFOEN+0x360>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008562:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008566:	429a      	cmp	r2, r3
 8008568:	d242      	bcs.n	80085f0 <UART_RxISR_16BIT_FIFOEN+0x360>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	3308      	adds	r3, #8
 8008570:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008574:	e853 3f00 	ldrex	r3, [r3]
 8008578:	623b      	str	r3, [r7, #32]
   return(result);
 800857a:	6a3b      	ldr	r3, [r7, #32]
 800857c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008580:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	3308      	adds	r3, #8
 800858a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800858e:	633a      	str	r2, [r7, #48]	; 0x30
 8008590:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008592:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008596:	e841 2300 	strex	r3, r2, [r1]
 800859a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800859c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d1e3      	bne.n	800856a <UART_RxISR_16BIT_FIFOEN+0x2da>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a16      	ldr	r2, [pc, #88]	; (8008600 <UART_RxISR_16BIT_FIFOEN+0x370>)
 80085a6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	e853 3f00 	ldrex	r3, [r3]
 80085b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f043 0320 	orr.w	r3, r3, #32
 80085bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	461a      	mov	r2, r3
 80085c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80085ca:	61fb      	str	r3, [r7, #28]
 80085cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ce:	69b9      	ldr	r1, [r7, #24]
 80085d0:	69fa      	ldr	r2, [r7, #28]
 80085d2:	e841 2300 	strex	r3, r2, [r1]
 80085d6:	617b      	str	r3, [r7, #20]
   return(result);
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d1e4      	bne.n	80085a8 <UART_RxISR_16BIT_FIFOEN+0x318>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80085de:	e007      	b.n	80085f0 <UART_RxISR_16BIT_FIFOEN+0x360>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	699a      	ldr	r2, [r3, #24]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f042 0208 	orr.w	r2, r2, #8
 80085ee:	619a      	str	r2, [r3, #24]
}
 80085f0:	bf00      	nop
 80085f2:	37b8      	adds	r7, #184	; 0xb8
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}
 80085f8:	effffffe 	.word	0xeffffffe
 80085fc:	58000c00 	.word	0x58000c00
 8008600:	08007d65 	.word	0x08007d65

08008604 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800860c:	bf00      	nop
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008620:	bf00      	nop
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008634:	bf00      	nop
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008640:	b480      	push	{r7}
 8008642:	b085      	sub	sp, #20
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800864e:	2b01      	cmp	r3, #1
 8008650:	d101      	bne.n	8008656 <HAL_UARTEx_DisableFifoMode+0x16>
 8008652:	2302      	movs	r3, #2
 8008654:	e027      	b.n	80086a6 <HAL_UARTEx_DisableFifoMode+0x66>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2201      	movs	r2, #1
 800865a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2224      	movs	r2, #36	; 0x24
 8008662:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f022 0201 	bic.w	r2, r2, #1
 800867c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008684:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	68fa      	ldr	r2, [r7, #12]
 8008692:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2220      	movs	r2, #32
 8008698:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3714      	adds	r7, #20
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr

080086b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80086b2:	b580      	push	{r7, lr}
 80086b4:	b084      	sub	sp, #16
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
 80086ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d101      	bne.n	80086ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80086c6:	2302      	movs	r3, #2
 80086c8:	e02d      	b.n	8008726 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2201      	movs	r2, #1
 80086ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2224      	movs	r2, #36	; 0x24
 80086d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f022 0201 	bic.w	r2, r2, #1
 80086f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	683a      	ldr	r2, [r7, #0]
 8008702:	430a      	orrs	r2, r1
 8008704:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 f850 	bl	80087ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2220      	movs	r2, #32
 8008718:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2200      	movs	r2, #0
 8008720:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}

0800872e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800872e:	b580      	push	{r7, lr}
 8008730:	b084      	sub	sp, #16
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
 8008736:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800873e:	2b01      	cmp	r3, #1
 8008740:	d101      	bne.n	8008746 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008742:	2302      	movs	r3, #2
 8008744:	e02d      	b.n	80087a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2201      	movs	r2, #1
 800874a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2224      	movs	r2, #36	; 0x24
 8008752:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f022 0201 	bic.w	r2, r2, #1
 800876c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	683a      	ldr	r2, [r7, #0]
 800877e:	430a      	orrs	r2, r1
 8008780:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 f812 	bl	80087ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2220      	movs	r2, #32
 8008794:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
	...

080087ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d108      	bne.n	80087ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80087cc:	e031      	b.n	8008832 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80087ce:	2310      	movs	r3, #16
 80087d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80087d2:	2310      	movs	r3, #16
 80087d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	0e5b      	lsrs	r3, r3, #25
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	f003 0307 	and.w	r3, r3, #7
 80087e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	0f5b      	lsrs	r3, r3, #29
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	f003 0307 	and.w	r3, r3, #7
 80087f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80087f6:	7bbb      	ldrb	r3, [r7, #14]
 80087f8:	7b3a      	ldrb	r2, [r7, #12]
 80087fa:	4911      	ldr	r1, [pc, #68]	; (8008840 <UARTEx_SetNbDataToProcess+0x94>)
 80087fc:	5c8a      	ldrb	r2, [r1, r2]
 80087fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008802:	7b3a      	ldrb	r2, [r7, #12]
 8008804:	490f      	ldr	r1, [pc, #60]	; (8008844 <UARTEx_SetNbDataToProcess+0x98>)
 8008806:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008808:	fb93 f3f2 	sdiv	r3, r3, r2
 800880c:	b29a      	uxth	r2, r3
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008814:	7bfb      	ldrb	r3, [r7, #15]
 8008816:	7b7a      	ldrb	r2, [r7, #13]
 8008818:	4909      	ldr	r1, [pc, #36]	; (8008840 <UARTEx_SetNbDataToProcess+0x94>)
 800881a:	5c8a      	ldrb	r2, [r1, r2]
 800881c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008820:	7b7a      	ldrb	r2, [r7, #13]
 8008822:	4908      	ldr	r1, [pc, #32]	; (8008844 <UARTEx_SetNbDataToProcess+0x98>)
 8008824:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008826:	fb93 f3f2 	sdiv	r3, r3, r2
 800882a:	b29a      	uxth	r2, r3
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008832:	bf00      	nop
 8008834:	3714      	adds	r7, #20
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop
 8008840:	080088e0 	.word	0x080088e0
 8008844:	080088e8 	.word	0x080088e8

08008848 <memset>:
 8008848:	4402      	add	r2, r0
 800884a:	4603      	mov	r3, r0
 800884c:	4293      	cmp	r3, r2
 800884e:	d100      	bne.n	8008852 <memset+0xa>
 8008850:	4770      	bx	lr
 8008852:	f803 1b01 	strb.w	r1, [r3], #1
 8008856:	e7f9      	b.n	800884c <memset+0x4>

08008858 <__libc_init_array>:
 8008858:	b570      	push	{r4, r5, r6, lr}
 800885a:	4d0d      	ldr	r5, [pc, #52]	; (8008890 <__libc_init_array+0x38>)
 800885c:	4c0d      	ldr	r4, [pc, #52]	; (8008894 <__libc_init_array+0x3c>)
 800885e:	1b64      	subs	r4, r4, r5
 8008860:	10a4      	asrs	r4, r4, #2
 8008862:	2600      	movs	r6, #0
 8008864:	42a6      	cmp	r6, r4
 8008866:	d109      	bne.n	800887c <__libc_init_array+0x24>
 8008868:	4d0b      	ldr	r5, [pc, #44]	; (8008898 <__libc_init_array+0x40>)
 800886a:	4c0c      	ldr	r4, [pc, #48]	; (800889c <__libc_init_array+0x44>)
 800886c:	f000 f818 	bl	80088a0 <_init>
 8008870:	1b64      	subs	r4, r4, r5
 8008872:	10a4      	asrs	r4, r4, #2
 8008874:	2600      	movs	r6, #0
 8008876:	42a6      	cmp	r6, r4
 8008878:	d105      	bne.n	8008886 <__libc_init_array+0x2e>
 800887a:	bd70      	pop	{r4, r5, r6, pc}
 800887c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008880:	4798      	blx	r3
 8008882:	3601      	adds	r6, #1
 8008884:	e7ee      	b.n	8008864 <__libc_init_array+0xc>
 8008886:	f855 3b04 	ldr.w	r3, [r5], #4
 800888a:	4798      	blx	r3
 800888c:	3601      	adds	r6, #1
 800888e:	e7f2      	b.n	8008876 <__libc_init_array+0x1e>
 8008890:	080088f8 	.word	0x080088f8
 8008894:	080088f8 	.word	0x080088f8
 8008898:	080088f8 	.word	0x080088f8
 800889c:	080088fc 	.word	0x080088fc

080088a0 <_init>:
 80088a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088a2:	bf00      	nop
 80088a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088a6:	bc08      	pop	{r3}
 80088a8:	469e      	mov	lr, r3
 80088aa:	4770      	bx	lr

080088ac <_fini>:
 80088ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ae:	bf00      	nop
 80088b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088b2:	bc08      	pop	{r3}
 80088b4:	469e      	mov	lr, r3
 80088b6:	4770      	bx	lr
